from yang_bindings.target_yang_bindings.huawei_ifm_binding import *
from yang_bindings.target_yang_bindings.huawei_bgp_binding import *

def exchange_maskint(mask_int):
  bin_arr = ['0' for i in range(32)]
  for i in range(mask_int):
    bin_arr[i] = '1'
  tmpmask = [''.join(bin_arr[i * 8:i * 8 + 8]) for i in range(4)]
  tmpmask = [str(int(tmpstr, 2)) for tmpstr in tmpmask]
  return '.'.join(tmpmask)

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/cloud-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/encryption-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/qos-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/bfd-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/forwarding-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/routing-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.cloud_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.encryption_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.qos_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.bfd_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.forwarding_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.routing_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj.valid_provider_identifiers, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.rd._changed():
        input_yang_obj.rd = input_yang_obj.rd
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj.vpn_targets, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ie_profile.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_underlay_transport(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/underlay-transport

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    # innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)

    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups/group

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.group.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/logical-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.peer_reference._changed():
        input_yang_obj.peer_reference = input_yang_obj.peer_reference
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/dot1q-vlan-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/priority-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinq

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinany

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan/peer-list

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vni_id._changed():
        input_yang_obj.vni_id = input_yang_obj.vni_id
        
    if input_yang_obj.peer_mode._changed():
        input_yang_obj.peer_mode = input_yang_obj.peer_mode
        
    for k, listInst in input_yang_obj.peer_list.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj.dot1q_vlan_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj.priority_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj.qinq, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj.qinany, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj.vxlan, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/pseudowire

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/vpls

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.bearer_reference._changed():
        input_yang_obj.bearer_reference = input_yang_obj.bearer_reference
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj.pseudowire, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj.vpls, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.encapsulation_type._changed():
        input_yang_obj.encapsulation_type = input_yang_obj.encapsulation_type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj.logical_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj.tagged_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj.bearer, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/cloud-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/encryption-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/qos-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/bfd-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/forwarding-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/routing-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.cloud_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.encryption_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.qos_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.bfd_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.forwarding_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.routing_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj.valid_provider_identifiers, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.rd._changed():
        input_yang_obj.rd = input_yang_obj.rd
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj.vpn_targets, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ie_profile.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_underlay_transport(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/underlay-transport

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups/group

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.group.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/logical-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.peer_reference._changed():
        input_yang_obj.peer_reference = input_yang_obj.peer_reference
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/dot1q-vlan-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/priority-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinq

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinany

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan/peer-list

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vni_id._changed():
        input_yang_obj.vni_id = input_yang_obj.vni_id
        
    if input_yang_obj.peer_mode._changed():
        input_yang_obj.peer_mode = input_yang_obj.peer_mode
        
    for k, listInst in input_yang_obj.peer_list.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj.dot1q_vlan_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj.priority_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj.qinq, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj.qinany, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj.vxlan, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/pseudowire

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/vpls

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.bearer_reference._changed():
        input_yang_obj.bearer_reference = input_yang_obj.bearer_reference
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj.pseudowire, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj.vpls, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.encapsulation_type._changed():
        input_yang_obj.encapsulation_type = input_yang_obj.encapsulation_type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj.logical_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj.tagged_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj.bearer, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/cloud-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/encryption-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/qos-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/bfd-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/forwarding-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/routing-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.cloud_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.encryption_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.qos_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.bfd_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.forwarding_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.routing_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj.valid_provider_identifiers, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.rd._changed():
        input_yang_obj.rd = input_yang_obj.rd
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj.vpn_targets, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ie_profile.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_underlay_transport(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/underlay-transport

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups/group

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.group.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/logical-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.peer_reference._changed():
        input_yang_obj.peer_reference = input_yang_obj.peer_reference
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/dot1q-vlan-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/priority-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinq

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinany

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan/peer-list

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vni_id._changed():
        input_yang_obj.vni_id = input_yang_obj.vni_id
        
    if input_yang_obj.peer_mode._changed():
        input_yang_obj.peer_mode = input_yang_obj.peer_mode
        
    for k, listInst in input_yang_obj.peer_list.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj.dot1q_vlan_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj.priority_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj.qinq, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj.qinany, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj.vxlan, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/pseudowire

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/vpls

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.bearer_reference._changed():
        input_yang_obj.bearer_reference = input_yang_obj.bearer_reference
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj.pseudowire, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj.vpls, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.encapsulation_type._changed():
        input_yang_obj.encapsulation_type = input_yang_obj.encapsulation_type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj.logical_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj.tagged_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj.bearer, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/cloud-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/encryption-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/qos-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/bfd-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/forwarding-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/routing-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.cloud_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.encryption_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.qos_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.bfd_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.forwarding_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.routing_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj.valid_provider_identifiers, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.rd._changed():
        input_yang_obj.rd = input_yang_obj.rd
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj.vpn_targets, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ie_profile.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_underlay_transport(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/underlay-transport

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups/group

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.group.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/logical-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.peer_reference._changed():
        input_yang_obj.peer_reference = input_yang_obj.peer_reference
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/dot1q-vlan-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/priority-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinq

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinany

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan/peer-list

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vni_id._changed():
        input_yang_obj.vni_id = input_yang_obj.vni_id
        
    if input_yang_obj.peer_mode._changed():
        input_yang_obj.peer_mode = input_yang_obj.peer_mode
        
    for k, listInst in input_yang_obj.peer_list.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj.dot1q_vlan_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj.priority_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj.qinq, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj.qinany, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj.vxlan, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/pseudowire

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/vpls

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.bearer_reference._changed():
        input_yang_obj.bearer_reference = input_yang_obj.bearer_reference
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj.pseudowire, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj.vpls, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.encapsulation_type._changed():
        input_yang_obj.encapsulation_type = input_yang_obj.encapsulation_type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj.logical_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj.tagged_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj.bearer, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/cloud-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/encryption-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/qos-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/bfd-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/forwarding-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/routing-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.cloud_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.encryption_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.qos_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.bfd_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.forwarding_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.routing_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj.valid_provider_identifiers, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.rd._changed():
        input_yang_obj.rd = input_yang_obj.rd
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj.vpn_targets, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ie_profile.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_underlay_transport(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/underlay-transport

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups/group

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.group.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/logical-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.peer_reference._changed():
        input_yang_obj.peer_reference = input_yang_obj.peer_reference
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/dot1q-vlan-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/priority-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinq

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinany

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan/peer-list

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vni_id._changed():
        input_yang_obj.vni_id = input_yang_obj.vni_id
        
    if input_yang_obj.peer_mode._changed():
        input_yang_obj.peer_mode = input_yang_obj.peer_mode
        
    for k, listInst in input_yang_obj.peer_list.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj.dot1q_vlan_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj.priority_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj.qinq, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj.qinany, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj.vxlan, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/pseudowire

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/vpls

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.bearer_reference._changed():
        input_yang_obj.bearer_reference = input_yang_obj.bearer_reference
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj.pseudowire, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj.vpls, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.encapsulation_type._changed():
        input_yang_obj.encapsulation_type = input_yang_obj.encapsulation_type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj.logical_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj.tagged_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj.bearer, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/cloud-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/encryption-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/qos-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/bfd-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/forwarding-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/routing-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.cloud_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.encryption_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.qos_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.bfd_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.forwarding_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.routing_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj.valid_provider_identifiers, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.rd._changed():
        input_yang_obj.rd = input_yang_obj.rd
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj.vpn_targets, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ie_profile.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_underlay_transport(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/underlay-transport

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups/group

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.group.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/logical-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.peer_reference._changed():
        input_yang_obj.peer_reference = input_yang_obj.peer_reference
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/dot1q-vlan-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/priority-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinq

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinany

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan/peer-list

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vni_id._changed():
        input_yang_obj.vni_id = input_yang_obj.vni_id
        
    if input_yang_obj.peer_mode._changed():
        input_yang_obj.peer_mode = input_yang_obj.peer_mode
        
    for k, listInst in input_yang_obj.peer_list.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj.dot1q_vlan_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj.priority_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj.qinq, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj.qinany, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj.vxlan, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/pseudowire

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/vpls

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.bearer_reference._changed():
        input_yang_obj.bearer_reference = input_yang_obj.bearer_reference
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj.pseudowire, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj.vpls, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.encapsulation_type._changed():
        input_yang_obj.encapsulation_type = input_yang_obj.encapsulation_type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj.logical_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj.tagged_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj.bearer, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_customer_dhcp_servers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4/customer-dhcp-servers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.server_ip_address._changed():
        input_yang_obj.server_ip_address = input_yang_obj.server_ip_address
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_address(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4/address

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.s_provider_address._changed():
        ipv4_address_obj = translated_yang_obj.ipv4.addresses.address.add(ip="")

    if input_yang_obj.s_customer_address._changed():
        input_yang_obj.s_customer_address = input_yang_obj.s_customer_address
        
    if input_yang_obj.s_prefix_length._changed():
        input_yang_obj.s_prefix_length = input_yang_obj.s_prefix_length
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_allocation_type._changed():
        input_yang_obj.address_allocation_type = input_yang_obj.address_allocation_type
        
    if input_yang_obj.provider_address._changed():
        input_yang_obj.provider_address = input_yang_obj.provider_address
        
    if input_yang_obj.prefix_length._changed():
        input_yang_obj.prefix_length = input_yang_obj.prefix_length
        
    if input_yang_obj.dr_provider_address._changed():
        input_yang_obj.dr_provider_address = input_yang_obj.dr_provider_address
        
    if input_yang_obj.dr_prefix_length._changed():
        input_yang_obj.dr_prefix_length = input_yang_obj.dr_prefix_length
        
    # innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_customer_dhcp_servers(input_yang_obj.customer_dhcp_servers, translated_yang_obj)
        
    if input_yang_obj.primary_address._changed():
        input_yang_obj.primary_address = input_yang_obj.primary_address
        
    for k, listInst in input_yang_obj.address.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_address(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/cloud-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/encryption-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/qos-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/bfd-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/forwarding-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/routing-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.cloud_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.encryption_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.qos_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.bfd_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.forwarding_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.routing_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj.valid_provider_identifiers, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.rd._changed():
        input_yang_obj.rd = input_yang_obj.rd
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj.vpn_targets, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ie_profile.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_underlay_transport(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/underlay-transport

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups/group

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.group.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/logical-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.peer_reference._changed():
        input_yang_obj.peer_reference = input_yang_obj.peer_reference
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/dot1q-vlan-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/priority-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinq

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinany

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan/peer-list

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vni_id._changed():
        input_yang_obj.vni_id = input_yang_obj.vni_id
        
    if input_yang_obj.peer_mode._changed():
        input_yang_obj.peer_mode = input_yang_obj.peer_mode
        
    for k, listInst in input_yang_obj.peer_list.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj.dot1q_vlan_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj.priority_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj.qinq, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj.qinany, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj.vxlan, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/pseudowire

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/vpls

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.bearer_reference._changed():
        input_yang_obj.bearer_reference = input_yang_obj.bearer_reference
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj.pseudowire, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj.vpls, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.encapsulation_type._changed():
        input_yang_obj.encapsulation_type = input_yang_obj.encapsulation_type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj.logical_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj.tagged_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj.bearer, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/cloud-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/encryption-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/qos-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/bfd-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/forwarding-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/routing-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.cloud_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.encryption_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.qos_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.bfd_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.forwarding_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.routing_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj.valid_provider_identifiers, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.rd._changed():
        input_yang_obj.rd = input_yang_obj.rd
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj.vpn_targets, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ie_profile.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_underlay_transport(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/underlay-transport

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups/group

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.group.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/logical-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.peer_reference._changed():
        input_yang_obj.peer_reference = input_yang_obj.peer_reference
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/dot1q-vlan-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/priority-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinq

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinany

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan/peer-list

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vni_id._changed():
        input_yang_obj.vni_id = input_yang_obj.vni_id
        
    if input_yang_obj.peer_mode._changed():
        input_yang_obj.peer_mode = input_yang_obj.peer_mode
        
    for k, listInst in input_yang_obj.peer_list.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj.dot1q_vlan_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj.priority_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj.qinq, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj.qinany, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj.vxlan, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/pseudowire

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/vpls

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.bearer_reference._changed():
        input_yang_obj.bearer_reference = input_yang_obj.bearer_reference
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj.pseudowire, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj.vpls, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.encapsulation_type._changed():
        input_yang_obj.encapsulation_type = input_yang_obj.encapsulation_type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj.logical_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj.tagged_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj.bearer, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/cloud-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/encryption-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/qos-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/bfd-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/forwarding-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/routing-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.cloud_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.encryption_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.qos_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.bfd_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.forwarding_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.routing_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj.valid_provider_identifiers, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.rd._changed():
        input_yang_obj.rd = input_yang_obj.rd
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj.vpn_targets, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ie_profile.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_underlay_transport(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/underlay-transport

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups/group

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.group.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/logical-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.peer_reference._changed():
        input_yang_obj.peer_reference = input_yang_obj.peer_reference
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/dot1q-vlan-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/priority-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinq

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinany

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan/peer-list

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vni_id._changed():
        input_yang_obj.vni_id = input_yang_obj.vni_id
        
    if input_yang_obj.peer_mode._changed():
        input_yang_obj.peer_mode = input_yang_obj.peer_mode
        
    for k, listInst in input_yang_obj.peer_list.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj.dot1q_vlan_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj.priority_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj.qinq, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj.qinany, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj.vxlan, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/pseudowire

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/vpls

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.bearer_reference._changed():
        input_yang_obj.bearer_reference = input_yang_obj.bearer_reference
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj.pseudowire, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj.vpls, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.encapsulation_type._changed():
        input_yang_obj.encapsulation_type = input_yang_obj.encapsulation_type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj.logical_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj.tagged_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj.bearer, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/cloud-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/encryption-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/qos-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/bfd-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/forwarding-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/routing-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.cloud_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.encryption_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.qos_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.bfd_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.forwarding_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.routing_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj.valid_provider_identifiers, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.rd._changed():
        input_yang_obj.rd = input_yang_obj.rd
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj.vpn_targets, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ie_profile.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_underlay_transport(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/underlay-transport

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups/group

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.group.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/logical-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.peer_reference._changed():
        input_yang_obj.peer_reference = input_yang_obj.peer_reference
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/dot1q-vlan-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/priority-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinq

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinany

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan/peer-list

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vni_id._changed():
        input_yang_obj.vni_id = input_yang_obj.vni_id
        
    if input_yang_obj.peer_mode._changed():
        input_yang_obj.peer_mode = input_yang_obj.peer_mode
        
    for k, listInst in input_yang_obj.peer_list.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj.dot1q_vlan_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj.priority_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj.qinq, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj.qinany, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj.vxlan, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/pseudowire

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/vpls

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.bearer_reference._changed():
        input_yang_obj.bearer_reference = input_yang_obj.bearer_reference
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj.pseudowire, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj.vpls, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.encapsulation_type._changed():
        input_yang_obj.encapsulation_type = input_yang_obj.encapsulation_type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj.logical_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj.tagged_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj.bearer, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/cloud-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/encryption-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/qos-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/bfd-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/forwarding-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/routing-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.cloud_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.encryption_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.qos_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.bfd_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.forwarding_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.routing_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj.valid_provider_identifiers, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.rd._changed():
        input_yang_obj.rd = input_yang_obj.rd
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj.vpn_targets, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ie_profile.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_underlay_transport(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/underlay-transport

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups/group

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.group.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/logical-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.peer_reference._changed():
        input_yang_obj.peer_reference = input_yang_obj.peer_reference
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/dot1q-vlan-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/priority-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinq

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinany

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan/peer-list

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vni_id._changed():
        input_yang_obj.vni_id = input_yang_obj.vni_id
        
    if input_yang_obj.peer_mode._changed():
        input_yang_obj.peer_mode = input_yang_obj.peer_mode
        
    for k, listInst in input_yang_obj.peer_list.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj.dot1q_vlan_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj.priority_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj.qinq, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj.qinany, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj.vxlan, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/pseudowire

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/vpls

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.bearer_reference._changed():
        input_yang_obj.bearer_reference = input_yang_obj.bearer_reference
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj.pseudowire, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj.vpls, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.encapsulation_type._changed():
        input_yang_obj.encapsulation_type = input_yang_obj.encapsulation_type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj.logical_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj.tagged_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj.bearer, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_customer_dhcp_servers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4/customer-dhcp-servers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.server_ip_address._changed():
        input_yang_obj.server_ip_address = input_yang_obj.server_ip_address
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_address(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4/address

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.s_provider_address._changed():
        input_yang_obj.s_provider_address = input_yang_obj.s_provider_address
        
    if input_yang_obj.s_customer_address._changed():
        input_yang_obj.s_customer_address = input_yang_obj.s_customer_address
        
    if input_yang_obj.s_prefix_length._changed():
        input_yang_obj.s_prefix_length = input_yang_obj.s_prefix_length
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_allocation_type._changed():
        input_yang_obj.address_allocation_type = input_yang_obj.address_allocation_type
        
    if input_yang_obj.provider_address._changed():
        input_yang_obj.provider_address = input_yang_obj.provider_address
        
    if input_yang_obj.prefix_length._changed():
        input_yang_obj.prefix_length = input_yang_obj.prefix_length
        
    if input_yang_obj.dr_provider_address._changed():
        input_yang_obj.dr_provider_address = input_yang_obj.dr_provider_address
        
    if input_yang_obj.dr_prefix_length._changed():
        input_yang_obj.dr_prefix_length = input_yang_obj.dr_prefix_length
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_customer_dhcp_servers(input_yang_obj.customer_dhcp_servers, translated_yang_obj)
        
    if input_yang_obj.primary_address._changed():
        input_yang_obj.primary_address = input_yang_obj.primary_address
        
    for k, listInst in input_yang_obj.address.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_address(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/cloud-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/encryption-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/qos-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/bfd-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/forwarding-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/routing-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.cloud_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.encryption_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.qos_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.bfd_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.forwarding_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.routing_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj.valid_provider_identifiers, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.rd._changed():
        input_yang_obj.rd = input_yang_obj.rd
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj.vpn_targets, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ie_profile.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_underlay_transport(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/underlay-transport

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups/group

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.group.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/logical-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.peer_reference._changed():
        input_yang_obj.peer_reference = input_yang_obj.peer_reference
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/dot1q-vlan-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/priority-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinq

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinany

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan/peer-list

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vni_id._changed():
        input_yang_obj.vni_id = input_yang_obj.vni_id
        
    if input_yang_obj.peer_mode._changed():
        input_yang_obj.peer_mode = input_yang_obj.peer_mode
        
    for k, listInst in input_yang_obj.peer_list.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj.dot1q_vlan_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj.priority_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj.qinq, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj.qinany, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj.vxlan, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/pseudowire

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/vpls

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.bearer_reference._changed():
        input_yang_obj.bearer_reference = input_yang_obj.bearer_reference
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj.pseudowire, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj.vpls, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.encapsulation_type._changed():
        input_yang_obj.encapsulation_type = input_yang_obj.encapsulation_type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj.logical_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj.tagged_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj.bearer, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4__explicit_customer_addresses_address_group(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4//explicit/customer-addresses/address-group

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.start_address._changed():
        input_yang_obj.start_address = input_yang_obj.start_address
        
    if input_yang_obj.end_address._changed():
        input_yang_obj.end_address = input_yang_obj.end_address
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4__explicit_customer_addresses(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4//explicit/customer-addresses

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.address_group.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4__explicit_customer_addresses_address_group(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/cloud-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/encryption-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/qos-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/bfd-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/forwarding-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/routing-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.cloud_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.encryption_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.qos_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.bfd_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.forwarding_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.routing_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj.valid_provider_identifiers, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.rd._changed():
        input_yang_obj.rd = input_yang_obj.rd
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj.vpn_targets, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ie_profile.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_underlay_transport(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/underlay-transport

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups/group

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.group.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/logical-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.peer_reference._changed():
        input_yang_obj.peer_reference = input_yang_obj.peer_reference
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/dot1q-vlan-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/priority-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinq

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinany

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan/peer-list

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vni_id._changed():
        input_yang_obj.vni_id = input_yang_obj.vni_id
        
    if input_yang_obj.peer_mode._changed():
        input_yang_obj.peer_mode = input_yang_obj.peer_mode
        
    for k, listInst in input_yang_obj.peer_list.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj.dot1q_vlan_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj.priority_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj.qinq, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj.qinany, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj.vxlan, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/pseudowire

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/vpls

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.bearer_reference._changed():
        input_yang_obj.bearer_reference = input_yang_obj.bearer_reference
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj.pseudowire, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj.vpls, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.encapsulation_type._changed():
        input_yang_obj.encapsulation_type = input_yang_obj.encapsulation_type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj.logical_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj.tagged_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj.bearer, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/cloud-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/encryption-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/qos-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/bfd-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/forwarding-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/routing-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.cloud_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.encryption_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.qos_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.bfd_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.forwarding_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.routing_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj.valid_provider_identifiers, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.rd._changed():
        input_yang_obj.rd = input_yang_obj.rd
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj.vpn_targets, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ie_profile.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_underlay_transport(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/underlay-transport

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups/group

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.group.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/logical-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.peer_reference._changed():
        input_yang_obj.peer_reference = input_yang_obj.peer_reference
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/dot1q-vlan-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/priority-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinq

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinany

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan/peer-list

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vni_id._changed():
        input_yang_obj.vni_id = input_yang_obj.vni_id
        
    if input_yang_obj.peer_mode._changed():
        input_yang_obj.peer_mode = input_yang_obj.peer_mode
        
    for k, listInst in input_yang_obj.peer_list.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj.dot1q_vlan_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj.priority_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj.qinq, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj.qinany, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj.vxlan, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/pseudowire

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/vpls

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.bearer_reference._changed():
        input_yang_obj.bearer_reference = input_yang_obj.bearer_reference
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj.pseudowire, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj.vpls, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.encapsulation_type._changed():
        input_yang_obj.encapsulation_type = input_yang_obj.encapsulation_type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj.logical_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj.tagged_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj.bearer, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/cloud-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/encryption-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/qos-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/bfd-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/forwarding-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/routing-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.cloud_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.encryption_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.qos_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.bfd_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.forwarding_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.routing_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj.valid_provider_identifiers, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.rd._changed():
        input_yang_obj.rd = input_yang_obj.rd
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj.vpn_targets, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ie_profile.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_underlay_transport(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/underlay-transport

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups/group

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.group.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/logical-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.peer_reference._changed():
        input_yang_obj.peer_reference = input_yang_obj.peer_reference
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/dot1q-vlan-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/priority-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinq

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinany

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan/peer-list

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vni_id._changed():
        input_yang_obj.vni_id = input_yang_obj.vni_id
        
    if input_yang_obj.peer_mode._changed():
        input_yang_obj.peer_mode = input_yang_obj.peer_mode
        
    for k, listInst in input_yang_obj.peer_list.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj.dot1q_vlan_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj.priority_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj.qinq, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj.qinany, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj.vxlan, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/pseudowire

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/vpls

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.bearer_reference._changed():
        input_yang_obj.bearer_reference = input_yang_obj.bearer_reference
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj.pseudowire, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj.vpls, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.encapsulation_type._changed():
        input_yang_obj.encapsulation_type = input_yang_obj.encapsulation_type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj.logical_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj.tagged_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj.bearer, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_customer_dhcp_servers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4/customer-dhcp-servers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.server_ip_address._changed():
        input_yang_obj.server_ip_address = input_yang_obj.server_ip_address
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_address(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4/address

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.s_provider_address._changed():
        input_yang_obj.s_provider_address = input_yang_obj.s_provider_address
        
    if input_yang_obj.s_customer_address._changed():
        input_yang_obj.s_customer_address = input_yang_obj.s_customer_address
        
    if input_yang_obj.s_prefix_length._changed():
        input_yang_obj.s_prefix_length = input_yang_obj.s_prefix_length
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_allocation_type._changed():
        input_yang_obj.address_allocation_type = input_yang_obj.address_allocation_type
        
    if input_yang_obj.dr_provider_address._changed():
        input_yang_obj.dr_provider_address = input_yang_obj.dr_provider_address
        
    if input_yang_obj.dr_prefix_length._changed():
        input_yang_obj.dr_prefix_length = input_yang_obj.dr_prefix_length
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_customer_dhcp_servers(input_yang_obj.customer_dhcp_servers, translated_yang_obj)
        
    if input_yang_obj.primary_address._changed():
        input_yang_obj.primary_address = input_yang_obj.primary_address
        
    for k, listInst in input_yang_obj.address.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_address(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/cloud-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/encryption-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/qos-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/bfd-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/forwarding-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/routing-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.cloud_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.encryption_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.qos_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.bfd_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.forwarding_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.routing_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj.valid_provider_identifiers, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.rd._changed():
        input_yang_obj.rd = input_yang_obj.rd
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj.vpn_targets, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ie_profile.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_underlay_transport(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/underlay-transport

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups/group

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.group.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/logical-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.peer_reference._changed():
        input_yang_obj.peer_reference = input_yang_obj.peer_reference
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/dot1q-vlan-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/priority-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinq

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinany

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan/peer-list

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vni_id._changed():
        input_yang_obj.vni_id = input_yang_obj.vni_id
        
    if input_yang_obj.peer_mode._changed():
        input_yang_obj.peer_mode = input_yang_obj.peer_mode
        
    for k, listInst in input_yang_obj.peer_list.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj.dot1q_vlan_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj.priority_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj.qinq, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj.qinany, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj.vxlan, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/pseudowire

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/vpls

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.bearer_reference._changed():
        input_yang_obj.bearer_reference = input_yang_obj.bearer_reference
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj.pseudowire, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj.vpls, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.encapsulation_type._changed():
        input_yang_obj.encapsulation_type = input_yang_obj.encapsulation_type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj.logical_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj.tagged_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj.bearer, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_customer_dhcp_servers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4/customer-dhcp-servers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.server_ip_address._changed():
        input_yang_obj.server_ip_address = input_yang_obj.server_ip_address
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_address(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4/address

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.s_provider_address._changed():
        input_yang_obj.s_provider_address = input_yang_obj.s_provider_address
        
    if input_yang_obj.s_customer_address._changed():
        input_yang_obj.s_customer_address = input_yang_obj.s_customer_address
        
    if input_yang_obj.s_prefix_length._changed():
        input_yang_obj.s_prefix_length = input_yang_obj.s_prefix_length
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_allocation_type._changed():
        input_yang_obj.address_allocation_type = input_yang_obj.address_allocation_type
        
    if input_yang_obj.dr_provider_address._changed():
        input_yang_obj.dr_provider_address = input_yang_obj.dr_provider_address
        
    if input_yang_obj.dr_prefix_length._changed():
        input_yang_obj.dr_prefix_length = input_yang_obj.dr_prefix_length
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_customer_dhcp_servers(input_yang_obj.customer_dhcp_servers, translated_yang_obj)
        
    if input_yang_obj.primary_address._changed():
        input_yang_obj.primary_address = input_yang_obj.primary_address
        
    for k, listInst in input_yang_obj.address.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_address(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/cloud-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/encryption-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/qos-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/bfd-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/forwarding-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/routing-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.cloud_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.encryption_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.qos_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.bfd_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.forwarding_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.routing_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj.valid_provider_identifiers, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.rd._changed():
        input_yang_obj.rd = input_yang_obj.rd
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj.vpn_targets, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ie_profile.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_underlay_transport(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/underlay-transport

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups/group

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.group.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/logical-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.peer_reference._changed():
        input_yang_obj.peer_reference = input_yang_obj.peer_reference
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/dot1q-vlan-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/priority-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinq

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinany

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan/peer-list

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vni_id._changed():
        input_yang_obj.vni_id = input_yang_obj.vni_id
        
    if input_yang_obj.peer_mode._changed():
        input_yang_obj.peer_mode = input_yang_obj.peer_mode
        
    for k, listInst in input_yang_obj.peer_list.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj.dot1q_vlan_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj.priority_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj.qinq, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj.qinany, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj.vxlan, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/pseudowire

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/vpls

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.bearer_reference._changed():
        input_yang_obj.bearer_reference = input_yang_obj.bearer_reference
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj.pseudowire, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj.vpls, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.encapsulation_type._changed():
        input_yang_obj.encapsulation_type = input_yang_obj.encapsulation_type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj.logical_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj.tagged_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj.bearer, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_customer_dhcp_servers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4/customer-dhcp-servers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.server_ip_address._changed():
        input_yang_obj.server_ip_address = input_yang_obj.server_ip_address
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_address(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4/address

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.s_provider_address._changed():
        input_yang_obj.s_provider_address = input_yang_obj.s_provider_address
        
    if input_yang_obj.s_customer_address._changed():
        input_yang_obj.s_customer_address = input_yang_obj.s_customer_address
        
    if input_yang_obj.s_prefix_length._changed():
        input_yang_obj.s_prefix_length = input_yang_obj.s_prefix_length
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_allocation_type._changed():
        input_yang_obj.address_allocation_type = input_yang_obj.address_allocation_type
        
    if input_yang_obj.dr_provider_address._changed():
        input_yang_obj.dr_provider_address = input_yang_obj.dr_provider_address
        
    if input_yang_obj.dr_prefix_length._changed():
        input_yang_obj.dr_prefix_length = input_yang_obj.dr_prefix_length
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_customer_dhcp_servers(input_yang_obj.customer_dhcp_servers, translated_yang_obj)
        
    if input_yang_obj.primary_address._changed():
        input_yang_obj.primary_address = input_yang_obj.primary_address
        
    for k, listInst in input_yang_obj.address.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_address(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6__address_assign_customer_addresses_address_group(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv6//address-assign/customer-addresses/address-group

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.start_address._changed():
        input_yang_obj.start_address = input_yang_obj.start_address
        
    if input_yang_obj.end_address._changed():
        input_yang_obj.end_address = input_yang_obj.end_address
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6__address_assign_customer_addresses(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv6//address-assign/customer-addresses

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.address_group.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6__address_assign_customer_addresses_address_group(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/cloud-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/encryption-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/qos-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/bfd-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/forwarding-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/routing-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.cloud_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.encryption_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.qos_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.bfd_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.forwarding_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.routing_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj.valid_provider_identifiers, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.rd._changed():
        input_yang_obj.rd = input_yang_obj.rd
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj.vpn_targets, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ie_profile.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_underlay_transport(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/underlay-transport

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups/group

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.group.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/logical-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.peer_reference._changed():
        input_yang_obj.peer_reference = input_yang_obj.peer_reference
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/dot1q-vlan-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/priority-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinq

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinany

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan/peer-list

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vni_id._changed():
        input_yang_obj.vni_id = input_yang_obj.vni_id
        
    if input_yang_obj.peer_mode._changed():
        input_yang_obj.peer_mode = input_yang_obj.peer_mode
        
    for k, listInst in input_yang_obj.peer_list.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj.dot1q_vlan_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj.priority_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj.qinq, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj.qinany, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj.vxlan, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/pseudowire

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/vpls

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.bearer_reference._changed():
        input_yang_obj.bearer_reference = input_yang_obj.bearer_reference
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj.pseudowire, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj.vpls, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.encapsulation_type._changed():
        input_yang_obj.encapsulation_type = input_yang_obj.encapsulation_type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj.logical_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj.tagged_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj.bearer, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_customer_dhcp_servers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4/customer-dhcp-servers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.server_ip_address._changed():
        input_yang_obj.server_ip_address = input_yang_obj.server_ip_address
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_address(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4/address

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.s_provider_address._changed():
        input_yang_obj.s_provider_address = input_yang_obj.s_provider_address
        
    if input_yang_obj.s_customer_address._changed():
        input_yang_obj.s_customer_address = input_yang_obj.s_customer_address
        
    if input_yang_obj.s_prefix_length._changed():
        input_yang_obj.s_prefix_length = input_yang_obj.s_prefix_length
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_allocation_type._changed():
        input_yang_obj.address_allocation_type = input_yang_obj.address_allocation_type
        
    if input_yang_obj.dr_provider_address._changed():
        input_yang_obj.dr_provider_address = input_yang_obj.dr_provider_address
        
    if input_yang_obj.dr_prefix_length._changed():
        input_yang_obj.dr_prefix_length = input_yang_obj.dr_prefix_length
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_customer_dhcp_servers(input_yang_obj.customer_dhcp_servers, translated_yang_obj)
        
    if input_yang_obj.primary_address._changed():
        input_yang_obj.primary_address = input_yang_obj.primary_address
        
    for k, listInst in input_yang_obj.address.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_address(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6_customer_dhcp_servers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv6/customer-dhcp-servers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.server_ip_address._changed():
        input_yang_obj.server_ip_address = input_yang_obj.server_ip_address
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6_s_address(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv6/s-address

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.provider_address._changed():
        input_yang_obj.provider_address = input_yang_obj.provider_address
        
    if input_yang_obj.customer_address._changed():
        input_yang_obj.customer_address = input_yang_obj.customer_address
        
    if input_yang_obj.prefix_length._changed():
        input_yang_obj.prefix_length = input_yang_obj.prefix_length
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv6

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_allocation_type._changed():
        input_yang_obj.address_allocation_type = input_yang_obj.address_allocation_type
        
    if input_yang_obj.dr_provider_address._changed():
        input_yang_obj.dr_provider_address = input_yang_obj.dr_provider_address
        
    if input_yang_obj.dr_prefix_length._changed():
        input_yang_obj.dr_prefix_length = input_yang_obj.dr_prefix_length
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6_customer_dhcp_servers(input_yang_obj.customer_dhcp_servers, translated_yang_obj)
        
    if input_yang_obj.s_primary_address._changed():
        input_yang_obj.s_primary_address = input_yang_obj.s_primary_address
        
    for k, listInst in input_yang_obj.s_address.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6_s_address(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_oam_bfd(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/oam/bfd

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enabled._changed():
        input_yang_obj.enabled = input_yang_obj.enabled
        
    if input_yang_obj.fixed_value._changed():
        input_yang_obj.fixed_value = input_yang_obj.fixed_value
        
    if input_yang_obj.profile_name._changed():
        input_yang_obj.profile_name = input_yang_obj.profile_name
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_oam(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/oam

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_oam_bfd(input_yang_obj.bfd, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4(input_yang_obj.ipv4, translated_yang_obj)
        
    # innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6(input_yang_obj.ipv6, translated_yang_obj)
        
    # innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_oam(input_yang_obj.oam, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_security_encryption(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/security/encryption

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enabled._changed():
        input_yang_obj.enabled = input_yang_obj.enabled
        
    if input_yang_obj.layer._changed():
        input_yang_obj.layer = input_yang_obj.layer
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_security_encryption_profile(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/security/encryption-profile

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.profile_name._changed():
        input_yang_obj.profile_name = input_yang_obj.profile_name
        
    if input_yang_obj.algorithm._changed():
        input_yang_obj.algorithm = input_yang_obj.algorithm
        
    if input_yang_obj.preshared_key._changed():
        input_yang_obj.preshared_key = input_yang_obj.preshared_key
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_security(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/security

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_security_encryption(input_yang_obj.encryption, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_security_encryption_profile(input_yang_obj.encryption_profile, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_routing_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/routing-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_security(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/ospf/security

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.auth_key._changed():
        input_yang_obj.auth_key = input_yang_obj.auth_key
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_sham_links_sham_link(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/ospf/sham-links/sham-link

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.metric._changed():
        input_yang_obj.metric = input_yang_obj.metric
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_sham_links(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/ospf/sham-links

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.sham_link.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_sham_links_sham_link(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/ospf

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_family._changed():
        input_yang_obj.address_family = input_yang_obj.address_family
        
    if input_yang_obj.area_address._changed():
        input_yang_obj.area_address = input_yang_obj.area_address
        
    if input_yang_obj.metric._changed():
        input_yang_obj.metric = input_yang_obj.metric
        
    if input_yang_obj.mtu._changed():
        input_yang_obj.mtu = input_yang_obj.mtu
        
    if input_yang_obj.process_id._changed():
        input_yang_obj.process_id = input_yang_obj.process_id
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_security(input_yang_obj.security, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_sham_links(input_yang_obj.sham_links, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_security(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/security

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.auth_key._changed():
        input_yang_obj.auth_key = input_yang_obj.auth_key
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_bgp_max_prefix(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/bgp-max-prefix

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.max_prefix._changed():
        input_yang_obj.max_prefix = input_yang_obj.max_prefix
        
    if input_yang_obj.warning_threshold._changed():
        input_yang_obj.warning_threshold = input_yang_obj.warning_threshold
        
    if input_yang_obj.violate_action._changed():
        input_yang_obj.violate_action = input_yang_obj.violate_action
        
    if input_yang_obj.restart_interval._changed():
        input_yang_obj.restart_interval = input_yang_obj.restart_interval
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_bgp_timer(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/bgp-timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.keep_alive._changed():
        input_yang_obj.keep_alive = input_yang_obj.keep_alive
        
    if input_yang_obj.hold_time._changed():
        input_yang_obj.hold_time = input_yang_obj.hold_time
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.peer_autonomous_system._changed():
        input_yang_obj.peer_autonomous_system = input_yang_obj.peer_autonomous_system
        
    if input_yang_obj.local_autonomous_system._changed():
        input_yang_obj.local_autonomous_system = input_yang_obj.local_autonomous_system
        
    if input_yang_obj.address_family._changed():
        input_yang_obj.address_family = input_yang_obj.address_family
        
    if input_yang_obj.neighbor._changed():
        input_yang_obj.neighbor = input_yang_obj.neighbor
        
    if input_yang_obj.multihop._changed():
        input_yang_obj.multihop = input_yang_obj.multihop
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_security(input_yang_obj.security, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status(input_yang_obj.status, translated_yang_obj)
        
    if input_yang_obj.description._changed():
        input_yang_obj.description = input_yang_obj.description
        
    if input_yang_obj.as_override._changed():
        input_yang_obj.as_override = input_yang_obj.as_override
        
    if input_yang_obj.default_route._changed():
        input_yang_obj.default_route = input_yang_obj.default_route
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_bgp_max_prefix(input_yang_obj.bgp_max_prefix, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_bgp_timer(input_yang_obj.bgp_timer, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/isis/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/isis/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/isis/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/isis

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_family._changed():
        input_yang_obj.address_family = input_yang_obj.address_family
        
    if input_yang_obj.area_address._changed():
        input_yang_obj.area_address = input_yang_obj.area_address
        
    if input_yang_obj.level._changed():
        input_yang_obj.level = input_yang_obj.level
        
    if input_yang_obj.metric._changed():
        input_yang_obj.metric = input_yang_obj.metric
        
    if input_yang_obj.process_id._changed():
        input_yang_obj.process_id = input_yang_obj.process_id
        
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status(input_yang_obj.status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes_ipv4_lan_prefixes(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/static/cascaded-lan-prefixes/ipv4-lan-prefixes

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.lan_tag._changed():
        input_yang_obj.lan_tag = input_yang_obj.lan_tag
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes_ipv6_lan_prefixes(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/static/cascaded-lan-prefixes/ipv6-lan-prefixes

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.lan_tag._changed():
        input_yang_obj.lan_tag = input_yang_obj.lan_tag
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/static/cascaded-lan-prefixes

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ipv4_lan_prefixes.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes_ipv4_lan_prefixes(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.ipv6_lan_prefixes.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes_ipv6_lan_prefixes(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/static

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes(input_yang_obj.cascaded_lan_prefixes, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_rip(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/rip

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_family._changed():
        input_yang_obj.address_family = input_yang_obj.address_family
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_vrrp(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/vrrp

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_family._changed():
        input_yang_obj.address_family = input_yang_obj.address_family
        
    if input_yang_obj.vrrp_group._changed():
        input_yang_obj.vrrp_group = input_yang_obj.vrrp_group
        
    if input_yang_obj.backup_peer._changed():
        input_yang_obj.backup_peer = input_yang_obj.backup_peer
        
    if input_yang_obj.priority._changed():
        input_yang_obj.priority = input_yang_obj.priority
        
    if input_yang_obj.ping_reply._changed():
        input_yang_obj.ping_reply = input_yang_obj.ping_reply
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    for k, listInst in input_yang_obj.routing_profiles.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_routing_profiles(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf(input_yang_obj.ospf, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp(input_yang_obj.bgp, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis(input_yang_obj.isis, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static(input_yang_obj.static, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_rip(input_yang_obj.rip, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_vrrp(input_yang_obj.vrrp, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.routing_protocol.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/cloud-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/encryption-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/qos-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/bfd-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/forwarding-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/routing-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.cloud_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.encryption_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.qos_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.bfd_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.forwarding_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.routing_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj.valid_provider_identifiers, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.rd._changed():
        input_yang_obj.rd = input_yang_obj.rd
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj.vpn_targets, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ie_profile.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_underlay_transport(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/underlay-transport

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups/group

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.group.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/logical-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.peer_reference._changed():
        input_yang_obj.peer_reference = input_yang_obj.peer_reference
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/dot1q-vlan-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/priority-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinq

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinany

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan/peer-list

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vni_id._changed():
        input_yang_obj.vni_id = input_yang_obj.vni_id
        
    if input_yang_obj.peer_mode._changed():
        input_yang_obj.peer_mode = input_yang_obj.peer_mode
        
    for k, listInst in input_yang_obj.peer_list.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj.dot1q_vlan_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj.priority_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj.qinq, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj.qinany, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj.vxlan, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/pseudowire

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/vpls

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.bearer_reference._changed():
        input_yang_obj.bearer_reference = input_yang_obj.bearer_reference
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj.pseudowire, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj.vpls, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.encapsulation_type._changed():
        input_yang_obj.encapsulation_type = input_yang_obj.encapsulation_type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj.logical_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj.tagged_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj.bearer, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_customer_dhcp_servers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4/customer-dhcp-servers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.server_ip_address._changed():
        input_yang_obj.server_ip_address = input_yang_obj.server_ip_address
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_address(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4/address

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.s_provider_address._changed():
        input_yang_obj.s_provider_address = input_yang_obj.s_provider_address
        
    if input_yang_obj.s_customer_address._changed():
        input_yang_obj.s_customer_address = input_yang_obj.s_customer_address
        
    if input_yang_obj.s_prefix_length._changed():
        input_yang_obj.s_prefix_length = input_yang_obj.s_prefix_length
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_allocation_type._changed():
        input_yang_obj.address_allocation_type = input_yang_obj.address_allocation_type
        
    if input_yang_obj.dr_provider_address._changed():
        input_yang_obj.dr_provider_address = input_yang_obj.dr_provider_address
        
    if input_yang_obj.dr_prefix_length._changed():
        input_yang_obj.dr_prefix_length = input_yang_obj.dr_prefix_length
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_customer_dhcp_servers(input_yang_obj.customer_dhcp_servers, translated_yang_obj)
        
    if input_yang_obj.primary_address._changed():
        input_yang_obj.primary_address = input_yang_obj.primary_address
        
    for k, listInst in input_yang_obj.address.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_address(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6_customer_dhcp_servers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv6/customer-dhcp-servers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.server_ip_address._changed():
        input_yang_obj.server_ip_address = input_yang_obj.server_ip_address
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6_s_address(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv6/s-address

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.provider_address._changed():
        input_yang_obj.provider_address = input_yang_obj.provider_address
        
    if input_yang_obj.customer_address._changed():
        input_yang_obj.customer_address = input_yang_obj.customer_address
        
    if input_yang_obj.prefix_length._changed():
        input_yang_obj.prefix_length = input_yang_obj.prefix_length
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv6

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_allocation_type._changed():
        input_yang_obj.address_allocation_type = input_yang_obj.address_allocation_type
        
    if input_yang_obj.dr_provider_address._changed():
        input_yang_obj.dr_provider_address = input_yang_obj.dr_provider_address
        
    if input_yang_obj.dr_prefix_length._changed():
        input_yang_obj.dr_prefix_length = input_yang_obj.dr_prefix_length
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6_customer_dhcp_servers(input_yang_obj.customer_dhcp_servers, translated_yang_obj)
        
    if input_yang_obj.s_primary_address._changed():
        input_yang_obj.s_primary_address = input_yang_obj.s_primary_address
        
    for k, listInst in input_yang_obj.s_address.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6_s_address(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_oam_bfd(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/oam/bfd

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enabled._changed():
        input_yang_obj.enabled = input_yang_obj.enabled
        
    if input_yang_obj.fixed_value._changed():
        input_yang_obj.fixed_value = input_yang_obj.fixed_value
        
    if input_yang_obj.profile_name._changed():
        input_yang_obj.profile_name = input_yang_obj.profile_name
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_oam(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/oam

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_oam_bfd(input_yang_obj.bfd, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4(input_yang_obj.ipv4, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6(input_yang_obj.ipv6, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_oam(input_yang_obj.oam, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_security_encryption(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/security/encryption

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enabled._changed():
        input_yang_obj.enabled = input_yang_obj.enabled
        
    if input_yang_obj.layer._changed():
        input_yang_obj.layer = input_yang_obj.layer
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_security_encryption_profile(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/security/encryption-profile

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.profile_name._changed():
        input_yang_obj.profile_name = input_yang_obj.profile_name
        
    if input_yang_obj.algorithm._changed():
        input_yang_obj.algorithm = input_yang_obj.algorithm
        
    if input_yang_obj.preshared_key._changed():
        input_yang_obj.preshared_key = input_yang_obj.preshared_key
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_security(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/security

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_security_encryption(input_yang_obj.encryption, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_security_encryption_profile(input_yang_obj.encryption_profile, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_routing_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/routing-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_security(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/ospf/security

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.auth_key._changed():
        input_yang_obj.auth_key = input_yang_obj.auth_key
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_sham_links_sham_link(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/ospf/sham-links/sham-link

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.metric._changed():
        input_yang_obj.metric = input_yang_obj.metric
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_sham_links(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/ospf/sham-links

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.sham_link.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_sham_links_sham_link(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/ospf

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_family._changed():
        input_yang_obj.address_family = input_yang_obj.address_family
        
    if input_yang_obj.area_address._changed():
        input_yang_obj.area_address = input_yang_obj.area_address
        
    if input_yang_obj.metric._changed():
        input_yang_obj.metric = input_yang_obj.metric
        
    if input_yang_obj.mtu._changed():
        input_yang_obj.mtu = input_yang_obj.mtu
        
    if input_yang_obj.process_id._changed():
        input_yang_obj.process_id = input_yang_obj.process_id
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_security(input_yang_obj.security, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_sham_links(input_yang_obj.sham_links, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_security(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/security

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.auth_key._changed():
        input_yang_obj.auth_key = input_yang_obj.auth_key
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_bgp_max_prefix(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/bgp-max-prefix

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.max_prefix._changed():
        input_yang_obj.max_prefix = input_yang_obj.max_prefix
        
    if input_yang_obj.warning_threshold._changed():
        input_yang_obj.warning_threshold = input_yang_obj.warning_threshold
        
    if input_yang_obj.violate_action._changed():
        input_yang_obj.violate_action = input_yang_obj.violate_action
        
    if input_yang_obj.restart_interval._changed():
        input_yang_obj.restart_interval = input_yang_obj.restart_interval
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_bgp_timer(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/bgp-timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.keep_alive._changed():
        input_yang_obj.keep_alive = input_yang_obj.keep_alive
        
    if input_yang_obj.hold_time._changed():
        input_yang_obj.hold_time = input_yang_obj.hold_time
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.peer_autonomous_system._changed():
        input_yang_obj.peer_autonomous_system = input_yang_obj.peer_autonomous_system
        
    if input_yang_obj.local_autonomous_system._changed():
        input_yang_obj.local_autonomous_system = input_yang_obj.local_autonomous_system
        
    if input_yang_obj.address_family._changed():
        input_yang_obj.address_family = input_yang_obj.address_family
        
    if input_yang_obj.neighbor._changed():
        input_yang_obj.neighbor = input_yang_obj.neighbor
        
    if input_yang_obj.multihop._changed():
        input_yang_obj.multihop = input_yang_obj.multihop
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_security(input_yang_obj.security, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status(input_yang_obj.status, translated_yang_obj)
        
    if input_yang_obj.description._changed():
        input_yang_obj.description = input_yang_obj.description
        
    if input_yang_obj.as_override._changed():
        input_yang_obj.as_override = input_yang_obj.as_override
        
    if input_yang_obj.default_route._changed():
        input_yang_obj.default_route = input_yang_obj.default_route
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_bgp_max_prefix(input_yang_obj.bgp_max_prefix, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_bgp_timer(input_yang_obj.bgp_timer, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/isis/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/isis/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/isis/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/isis

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_family._changed():
        input_yang_obj.address_family = input_yang_obj.address_family
        
    if input_yang_obj.area_address._changed():
        input_yang_obj.area_address = input_yang_obj.area_address
        
    if input_yang_obj.level._changed():
        input_yang_obj.level = input_yang_obj.level
        
    if input_yang_obj.metric._changed():
        input_yang_obj.metric = input_yang_obj.metric
        
    if input_yang_obj.process_id._changed():
        input_yang_obj.process_id = input_yang_obj.process_id
        
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status(input_yang_obj.status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes_ipv4_lan_prefixes(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/static/cascaded-lan-prefixes/ipv4-lan-prefixes

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.lan_tag._changed():
        input_yang_obj.lan_tag = input_yang_obj.lan_tag
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes_ipv6_lan_prefixes(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/static/cascaded-lan-prefixes/ipv6-lan-prefixes

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.lan_tag._changed():
        input_yang_obj.lan_tag = input_yang_obj.lan_tag
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/static/cascaded-lan-prefixes

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ipv4_lan_prefixes.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes_ipv4_lan_prefixes(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.ipv6_lan_prefixes.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes_ipv6_lan_prefixes(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/static

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes(input_yang_obj.cascaded_lan_prefixes, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_rip(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/rip

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_family._changed():
        input_yang_obj.address_family = input_yang_obj.address_family
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_vrrp(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/vrrp

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_family._changed():
        input_yang_obj.address_family = input_yang_obj.address_family
        
    if input_yang_obj.vrrp_group._changed():
        input_yang_obj.vrrp_group = input_yang_obj.vrrp_group
        
    if input_yang_obj.backup_peer._changed():
        input_yang_obj.backup_peer = input_yang_obj.backup_peer
        
    if input_yang_obj.priority._changed():
        input_yang_obj.priority = input_yang_obj.priority
        
    if input_yang_obj.ping_reply._changed():
        input_yang_obj.ping_reply = input_yang_obj.ping_reply
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    for k, listInst in input_yang_obj.routing_profiles.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_routing_profiles(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf(input_yang_obj.ospf, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp(input_yang_obj.bgp, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis(input_yang_obj.isis, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static(input_yang_obj.static, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_rip(input_yang_obj.rip, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_vrrp(input_yang_obj.vrrp, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.routing_protocol.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/cloud-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/encryption-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/qos-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/bfd-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/forwarding-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/routing-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.cloud_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.encryption_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.qos_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.bfd_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.forwarding_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.routing_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj.valid_provider_identifiers, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.rd._changed():
        input_yang_obj.rd = input_yang_obj.rd
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj.vpn_targets, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ie_profile.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_underlay_transport(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/underlay-transport

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups/group

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.group.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/logical-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.peer_reference._changed():
        input_yang_obj.peer_reference = input_yang_obj.peer_reference
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/dot1q-vlan-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/priority-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinq

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinany

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan/peer-list

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vni_id._changed():
        input_yang_obj.vni_id = input_yang_obj.vni_id
        
    if input_yang_obj.peer_mode._changed():
        input_yang_obj.peer_mode = input_yang_obj.peer_mode
        
    for k, listInst in input_yang_obj.peer_list.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj.dot1q_vlan_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj.priority_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj.qinq, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj.qinany, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj.vxlan, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/pseudowire

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/vpls

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.bearer_reference._changed():
        input_yang_obj.bearer_reference = input_yang_obj.bearer_reference
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj.pseudowire, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj.vpls, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.encapsulation_type._changed():
        input_yang_obj.encapsulation_type = input_yang_obj.encapsulation_type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj.logical_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj.tagged_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj.bearer, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/cloud-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/encryption-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/qos-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/bfd-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/forwarding-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/routing-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.cloud_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.encryption_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.qos_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.bfd_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.forwarding_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.routing_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj.valid_provider_identifiers, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.rd._changed():
        input_yang_obj.rd = input_yang_obj.rd
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj.vpn_targets, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ie_profile.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_underlay_transport(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/underlay-transport

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups/group

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.group.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/logical-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.peer_reference._changed():
        input_yang_obj.peer_reference = input_yang_obj.peer_reference
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/dot1q-vlan-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/priority-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinq

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinany

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan/peer-list

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vni_id._changed():
        input_yang_obj.vni_id = input_yang_obj.vni_id
        
    if input_yang_obj.peer_mode._changed():
        input_yang_obj.peer_mode = input_yang_obj.peer_mode
        
    for k, listInst in input_yang_obj.peer_list.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj.dot1q_vlan_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj.priority_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj.qinq, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj.qinany, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj.vxlan, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/pseudowire

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/vpls

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.bearer_reference._changed():
        input_yang_obj.bearer_reference = input_yang_obj.bearer_reference
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj.pseudowire, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj.vpls, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.encapsulation_type._changed():
        input_yang_obj.encapsulation_type = input_yang_obj.encapsulation_type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj.logical_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj.tagged_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj.bearer, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/cloud-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/encryption-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/qos-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/bfd-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/forwarding-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/routing-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.cloud_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.encryption_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.qos_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.bfd_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.forwarding_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.routing_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj.valid_provider_identifiers, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.rd._changed():
        input_yang_obj.rd = input_yang_obj.rd
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj.vpn_targets, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ie_profile.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_underlay_transport(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/underlay-transport

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups/group

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.group.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/logical-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.peer_reference._changed():
        input_yang_obj.peer_reference = input_yang_obj.peer_reference
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/dot1q-vlan-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/priority-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinq

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinany

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan/peer-list

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vni_id._changed():
        input_yang_obj.vni_id = input_yang_obj.vni_id
        
    if input_yang_obj.peer_mode._changed():
        input_yang_obj.peer_mode = input_yang_obj.peer_mode
        
    for k, listInst in input_yang_obj.peer_list.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj.dot1q_vlan_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj.priority_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj.qinq, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj.qinany, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj.vxlan, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/pseudowire

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/vpls

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.bearer_reference._changed():
        input_yang_obj.bearer_reference = input_yang_obj.bearer_reference
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj.pseudowire, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj.vpls, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.encapsulation_type._changed():
        input_yang_obj.encapsulation_type = input_yang_obj.encapsulation_type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj.logical_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj.tagged_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj.bearer, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_customer_dhcp_servers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4/customer-dhcp-servers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.server_ip_address._changed():
        input_yang_obj.server_ip_address = input_yang_obj.server_ip_address
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_address(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4/address

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.s_provider_address._changed():
        input_yang_obj.s_provider_address = input_yang_obj.s_provider_address
        
    if input_yang_obj.s_customer_address._changed():
        input_yang_obj.s_customer_address = input_yang_obj.s_customer_address
        
    if input_yang_obj.s_prefix_length._changed():
        input_yang_obj.s_prefix_length = input_yang_obj.s_prefix_length
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_allocation_type._changed():
        input_yang_obj.address_allocation_type = input_yang_obj.address_allocation_type
        
    if input_yang_obj.provider_address._changed():
        input_yang_obj.provider_address = input_yang_obj.provider_address
        
    if input_yang_obj.prefix_length._changed():
        input_yang_obj.prefix_length = input_yang_obj.prefix_length
        
    if input_yang_obj.dr_provider_address._changed():
        input_yang_obj.dr_provider_address = input_yang_obj.dr_provider_address
        
    if input_yang_obj.dr_prefix_length._changed():
        input_yang_obj.dr_prefix_length = input_yang_obj.dr_prefix_length
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_customer_dhcp_servers(input_yang_obj.customer_dhcp_servers, translated_yang_obj)
        
    if input_yang_obj.primary_address._changed():
        input_yang_obj.primary_address = input_yang_obj.primary_address
        
    for k, listInst in input_yang_obj.address.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_address(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/cloud-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/encryption-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/qos-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/bfd-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/forwarding-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/routing-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.cloud_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.encryption_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.qos_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.bfd_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.forwarding_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.routing_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj.valid_provider_identifiers, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.rd._changed():
        input_yang_obj.rd = input_yang_obj.rd
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj.vpn_targets, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ie_profile.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_underlay_transport(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/underlay-transport

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups/group

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.group.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/logical-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.peer_reference._changed():
        input_yang_obj.peer_reference = input_yang_obj.peer_reference
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/dot1q-vlan-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/priority-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinq

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinany

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan/peer-list

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vni_id._changed():
        input_yang_obj.vni_id = input_yang_obj.vni_id
        
    if input_yang_obj.peer_mode._changed():
        input_yang_obj.peer_mode = input_yang_obj.peer_mode
        
    for k, listInst in input_yang_obj.peer_list.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj.dot1q_vlan_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj.priority_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj.qinq, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj.qinany, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj.vxlan, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/pseudowire

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/vpls

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.bearer_reference._changed():
        input_yang_obj.bearer_reference = input_yang_obj.bearer_reference
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj.pseudowire, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj.vpls, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.encapsulation_type._changed():
        input_yang_obj.encapsulation_type = input_yang_obj.encapsulation_type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj.logical_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj.tagged_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj.bearer, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_customer_dhcp_servers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4/customer-dhcp-servers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.server_ip_address._changed():
        input_yang_obj.server_ip_address = input_yang_obj.server_ip_address
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_address(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4/address

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.s_provider_address._changed():
        input_yang_obj.s_provider_address = input_yang_obj.s_provider_address
        
    if input_yang_obj.s_customer_address._changed():
        input_yang_obj.s_customer_address = input_yang_obj.s_customer_address
        
    if input_yang_obj.s_prefix_length._changed():
        input_yang_obj.s_prefix_length = input_yang_obj.s_prefix_length
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_allocation_type._changed():
        input_yang_obj.address_allocation_type = input_yang_obj.address_allocation_type
        
    if input_yang_obj.provider_address._changed():
        input_yang_obj.provider_address = input_yang_obj.provider_address
        
    if input_yang_obj.prefix_length._changed():
        input_yang_obj.prefix_length = input_yang_obj.prefix_length
        
    if input_yang_obj.dr_provider_address._changed():
        input_yang_obj.dr_provider_address = input_yang_obj.dr_provider_address
        
    if input_yang_obj.dr_prefix_length._changed():
        input_yang_obj.dr_prefix_length = input_yang_obj.dr_prefix_length
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_customer_dhcp_servers(input_yang_obj.customer_dhcp_servers, translated_yang_obj)
        
    if input_yang_obj.primary_address._changed():
        input_yang_obj.primary_address = input_yang_obj.primary_address
        
    for k, listInst in input_yang_obj.address.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_address(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6_customer_dhcp_servers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv6/customer-dhcp-servers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.server_ip_address._changed():
        input_yang_obj.server_ip_address = input_yang_obj.server_ip_address
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6_s_address(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv6/s-address

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.provider_address._changed():
        input_yang_obj.provider_address = input_yang_obj.provider_address
        
    if input_yang_obj.customer_address._changed():
        input_yang_obj.customer_address = input_yang_obj.customer_address
        
    if input_yang_obj.prefix_length._changed():
        input_yang_obj.prefix_length = input_yang_obj.prefix_length
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv6

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_allocation_type._changed():
        input_yang_obj.address_allocation_type = input_yang_obj.address_allocation_type
        
    if input_yang_obj.dr_provider_address._changed():
        input_yang_obj.dr_provider_address = input_yang_obj.dr_provider_address
        
    if input_yang_obj.dr_prefix_length._changed():
        input_yang_obj.dr_prefix_length = input_yang_obj.dr_prefix_length
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6_customer_dhcp_servers(input_yang_obj.customer_dhcp_servers, translated_yang_obj)
        
    if input_yang_obj.s_primary_address._changed():
        input_yang_obj.s_primary_address = input_yang_obj.s_primary_address
        
    for k, listInst in input_yang_obj.s_address.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6_s_address(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_oam_bfd(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/oam/bfd

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enabled._changed():
        input_yang_obj.enabled = input_yang_obj.enabled
        
    if input_yang_obj.fixed_value._changed():
        input_yang_obj.fixed_value = input_yang_obj.fixed_value
        
    if input_yang_obj.profile_name._changed():
        input_yang_obj.profile_name = input_yang_obj.profile_name
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_oam(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/oam

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_oam_bfd(input_yang_obj.bfd, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4(input_yang_obj.ipv4, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6(input_yang_obj.ipv6, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_oam(input_yang_obj.oam, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_security_encryption(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/security/encryption

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enabled._changed():
        input_yang_obj.enabled = input_yang_obj.enabled
        
    if input_yang_obj.layer._changed():
        input_yang_obj.layer = input_yang_obj.layer
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_security_encryption_profile(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/security/encryption-profile

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.profile_name._changed():
        input_yang_obj.profile_name = input_yang_obj.profile_name
        
    if input_yang_obj.algorithm._changed():
        input_yang_obj.algorithm = input_yang_obj.algorithm
        
    if input_yang_obj.preshared_key._changed():
        input_yang_obj.preshared_key = input_yang_obj.preshared_key
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_security(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/security

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_security_encryption(input_yang_obj.encryption, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_security_encryption_profile(input_yang_obj.encryption_profile, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_routing_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/routing-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_security(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/ospf/security

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.auth_key._changed():
        input_yang_obj.auth_key = input_yang_obj.auth_key
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_sham_links_sham_link(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/ospf/sham-links/sham-link

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.metric._changed():
        input_yang_obj.metric = input_yang_obj.metric
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_sham_links(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/ospf/sham-links

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.sham_link.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_sham_links_sham_link(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/ospf

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_family._changed():
        input_yang_obj.address_family = input_yang_obj.address_family
        
    if input_yang_obj.area_address._changed():
        input_yang_obj.area_address = input_yang_obj.area_address
        
    if input_yang_obj.metric._changed():
        input_yang_obj.metric = input_yang_obj.metric
        
    if input_yang_obj.mtu._changed():
        input_yang_obj.mtu = input_yang_obj.mtu
        
    if input_yang_obj.process_id._changed():
        input_yang_obj.process_id = input_yang_obj.process_id
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_security(input_yang_obj.security, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_sham_links(input_yang_obj.sham_links, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_security(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/security

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.auth_key._changed():
        input_yang_obj.auth_key = input_yang_obj.auth_key
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_bgp_max_prefix(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/bgp-max-prefix

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.max_prefix._changed():
        input_yang_obj.max_prefix = input_yang_obj.max_prefix
        
    if input_yang_obj.warning_threshold._changed():
        input_yang_obj.warning_threshold = input_yang_obj.warning_threshold
        
    if input_yang_obj.violate_action._changed():
        input_yang_obj.violate_action = input_yang_obj.violate_action
        
    if input_yang_obj.restart_interval._changed():
        input_yang_obj.restart_interval = input_yang_obj.restart_interval
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_bgp_timer(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/bgp-timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.keep_alive._changed():
        input_yang_obj.keep_alive = input_yang_obj.keep_alive
        
    if input_yang_obj.hold_time._changed():
        input_yang_obj.hold_time = input_yang_obj.hold_time
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.peer_autonomous_system._changed():
        input_yang_obj.peer_autonomous_system = input_yang_obj.peer_autonomous_system
        
    if input_yang_obj.local_autonomous_system._changed():
        input_yang_obj.local_autonomous_system = input_yang_obj.local_autonomous_system
        
    if input_yang_obj.address_family._changed():
        input_yang_obj.address_family = input_yang_obj.address_family
        
    if input_yang_obj.neighbor._changed():
        input_yang_obj.neighbor = input_yang_obj.neighbor
        
    if input_yang_obj.multihop._changed():
        input_yang_obj.multihop = input_yang_obj.multihop
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_security(input_yang_obj.security, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status(input_yang_obj.status, translated_yang_obj)
        
    if input_yang_obj.description._changed():
        input_yang_obj.description = input_yang_obj.description
        
    if input_yang_obj.as_override._changed():
        input_yang_obj.as_override = input_yang_obj.as_override
        
    if input_yang_obj.default_route._changed():
        input_yang_obj.default_route = input_yang_obj.default_route
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_bgp_max_prefix(input_yang_obj.bgp_max_prefix, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_bgp_timer(input_yang_obj.bgp_timer, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/isis/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/isis/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/isis/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/isis

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_family._changed():
        input_yang_obj.address_family = input_yang_obj.address_family
        
    if input_yang_obj.area_address._changed():
        input_yang_obj.area_address = input_yang_obj.area_address
        
    if input_yang_obj.level._changed():
        input_yang_obj.level = input_yang_obj.level
        
    if input_yang_obj.metric._changed():
        input_yang_obj.metric = input_yang_obj.metric
        
    if input_yang_obj.process_id._changed():
        input_yang_obj.process_id = input_yang_obj.process_id
        
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status(input_yang_obj.status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes_ipv4_lan_prefixes(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/static/cascaded-lan-prefixes/ipv4-lan-prefixes

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.lan_tag._changed():
        input_yang_obj.lan_tag = input_yang_obj.lan_tag
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes_ipv6_lan_prefixes(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/static/cascaded-lan-prefixes/ipv6-lan-prefixes

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.lan_tag._changed():
        input_yang_obj.lan_tag = input_yang_obj.lan_tag
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/static/cascaded-lan-prefixes

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ipv4_lan_prefixes.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes_ipv4_lan_prefixes(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.ipv6_lan_prefixes.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes_ipv6_lan_prefixes(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/static

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes(input_yang_obj.cascaded_lan_prefixes, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_rip(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/rip

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_family._changed():
        input_yang_obj.address_family = input_yang_obj.address_family
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_vrrp(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/vrrp

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_family._changed():
        input_yang_obj.address_family = input_yang_obj.address_family
        
    if input_yang_obj.vrrp_group._changed():
        input_yang_obj.vrrp_group = input_yang_obj.vrrp_group
        
    if input_yang_obj.backup_peer._changed():
        input_yang_obj.backup_peer = input_yang_obj.backup_peer
        
    if input_yang_obj.priority._changed():
        input_yang_obj.priority = input_yang_obj.priority
        
    if input_yang_obj.ping_reply._changed():
        input_yang_obj.ping_reply = input_yang_obj.ping_reply
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    for k, listInst in input_yang_obj.routing_profiles.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_routing_profiles(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf(input_yang_obj.ospf, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp(input_yang_obj.bgp, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis(input_yang_obj.isis, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static(input_yang_obj.static, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_rip(input_yang_obj.rip, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_vrrp(input_yang_obj.vrrp, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.routing_protocol.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/cloud-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/encryption-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/qos-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/bfd-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/forwarding-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/routing-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.cloud_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.encryption_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.qos_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.bfd_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.forwarding_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.routing_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj.valid_provider_identifiers, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.rd._changed():
        input_yang_obj.rd = input_yang_obj.rd
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj.vpn_targets, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ie_profile.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_underlay_transport(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/underlay-transport

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups/group

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.group.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/logical-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.peer_reference._changed():
        input_yang_obj.peer_reference = input_yang_obj.peer_reference
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/dot1q-vlan-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/priority-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinq

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinany

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan/peer-list

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vni_id._changed():
        input_yang_obj.vni_id = input_yang_obj.vni_id
        
    if input_yang_obj.peer_mode._changed():
        input_yang_obj.peer_mode = input_yang_obj.peer_mode
        
    for k, listInst in input_yang_obj.peer_list.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj.dot1q_vlan_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj.priority_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj.qinq, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj.qinany, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj.vxlan, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/pseudowire

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/vpls

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.bearer_reference._changed():
        input_yang_obj.bearer_reference = input_yang_obj.bearer_reference
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj.pseudowire, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj.vpls, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.encapsulation_type._changed():
        input_yang_obj.encapsulation_type = input_yang_obj.encapsulation_type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj.logical_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj.tagged_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj.bearer, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_customer_dhcp_servers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4/customer-dhcp-servers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.server_ip_address._changed():
        input_yang_obj.server_ip_address = input_yang_obj.server_ip_address
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_address(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4/address

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.s_provider_address._changed():
        input_yang_obj.s_provider_address = input_yang_obj.s_provider_address
        
    if input_yang_obj.s_customer_address._changed():
        input_yang_obj.s_customer_address = input_yang_obj.s_customer_address
        
    if input_yang_obj.s_prefix_length._changed():
        input_yang_obj.s_prefix_length = input_yang_obj.s_prefix_length
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_allocation_type._changed():
        input_yang_obj.address_allocation_type = input_yang_obj.address_allocation_type
        
    if input_yang_obj.provider_address._changed():
        input_yang_obj.provider_address = input_yang_obj.provider_address
        
    if input_yang_obj.prefix_length._changed():
        input_yang_obj.prefix_length = input_yang_obj.prefix_length
        
    if input_yang_obj.dr_provider_address._changed():
        input_yang_obj.dr_provider_address = input_yang_obj.dr_provider_address
        
    if input_yang_obj.dr_prefix_length._changed():
        input_yang_obj.dr_prefix_length = input_yang_obj.dr_prefix_length
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_customer_dhcp_servers(input_yang_obj.customer_dhcp_servers, translated_yang_obj)
        
    if input_yang_obj.primary_address._changed():
        input_yang_obj.primary_address = input_yang_obj.primary_address
        
    for k, listInst in input_yang_obj.address.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_address(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6_customer_dhcp_servers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv6/customer-dhcp-servers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.server_ip_address._changed():
        input_yang_obj.server_ip_address = input_yang_obj.server_ip_address
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6_s_address(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv6/s-address

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.provider_address._changed():
        input_yang_obj.provider_address = input_yang_obj.provider_address
        
    if input_yang_obj.customer_address._changed():
        input_yang_obj.customer_address = input_yang_obj.customer_address
        
    if input_yang_obj.prefix_length._changed():
        input_yang_obj.prefix_length = input_yang_obj.prefix_length
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv6

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_allocation_type._changed():
        input_yang_obj.address_allocation_type = input_yang_obj.address_allocation_type
        
    if input_yang_obj.dr_provider_address._changed():
        input_yang_obj.dr_provider_address = input_yang_obj.dr_provider_address
        
    if input_yang_obj.dr_prefix_length._changed():
        input_yang_obj.dr_prefix_length = input_yang_obj.dr_prefix_length
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6_customer_dhcp_servers(input_yang_obj.customer_dhcp_servers, translated_yang_obj)
        
    if input_yang_obj.s_primary_address._changed():
        input_yang_obj.s_primary_address = input_yang_obj.s_primary_address
        
    for k, listInst in input_yang_obj.s_address.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6_s_address(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_oam_bfd(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/oam/bfd

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enabled._changed():
        input_yang_obj.enabled = input_yang_obj.enabled
        
    if input_yang_obj.fixed_value._changed():
        input_yang_obj.fixed_value = input_yang_obj.fixed_value
        
    if input_yang_obj.profile_name._changed():
        input_yang_obj.profile_name = input_yang_obj.profile_name
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_oam(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/oam

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_oam_bfd(input_yang_obj.bfd, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4(input_yang_obj.ipv4, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6(input_yang_obj.ipv6, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_oam(input_yang_obj.oam, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_security_encryption(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/security/encryption

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enabled._changed():
        input_yang_obj.enabled = input_yang_obj.enabled
        
    if input_yang_obj.layer._changed():
        input_yang_obj.layer = input_yang_obj.layer
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_security_encryption_profile(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/security/encryption-profile

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.profile_name._changed():
        input_yang_obj.profile_name = input_yang_obj.profile_name
        
    if input_yang_obj.algorithm._changed():
        input_yang_obj.algorithm = input_yang_obj.algorithm
        
    if input_yang_obj.preshared_key._changed():
        input_yang_obj.preshared_key = input_yang_obj.preshared_key
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_security(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/security

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_security_encryption(input_yang_obj.encryption, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_security_encryption_profile(input_yang_obj.encryption_profile, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_routing_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/routing-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_security(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/ospf/security

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.auth_key._changed():
        input_yang_obj.auth_key = input_yang_obj.auth_key
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_sham_links_sham_link(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/ospf/sham-links/sham-link

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.metric._changed():
        input_yang_obj.metric = input_yang_obj.metric
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_sham_links(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/ospf/sham-links

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.sham_link.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_sham_links_sham_link(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/ospf

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_family._changed():
        input_yang_obj.address_family = input_yang_obj.address_family
        
    if input_yang_obj.area_address._changed():
        input_yang_obj.area_address = input_yang_obj.area_address
        
    if input_yang_obj.metric._changed():
        input_yang_obj.metric = input_yang_obj.metric
        
    if input_yang_obj.mtu._changed():
        input_yang_obj.mtu = input_yang_obj.mtu
        
    if input_yang_obj.process_id._changed():
        input_yang_obj.process_id = input_yang_obj.process_id
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_security(input_yang_obj.security, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_sham_links(input_yang_obj.sham_links, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_security(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/security

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.auth_key._changed():
        input_yang_obj.auth_key = input_yang_obj.auth_key
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_bgp_max_prefix(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/bgp-max-prefix

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.max_prefix._changed():
        input_yang_obj.max_prefix = input_yang_obj.max_prefix
        
    if input_yang_obj.warning_threshold._changed():
        input_yang_obj.warning_threshold = input_yang_obj.warning_threshold
        
    if input_yang_obj.violate_action._changed():
        input_yang_obj.violate_action = input_yang_obj.violate_action
        
    if input_yang_obj.restart_interval._changed():
        input_yang_obj.restart_interval = input_yang_obj.restart_interval
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_bgp_timer(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/bgp-timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.keep_alive._changed():
        input_yang_obj.keep_alive = input_yang_obj.keep_alive
        
    if input_yang_obj.hold_time._changed():
        input_yang_obj.hold_time = input_yang_obj.hold_time
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.peer_autonomous_system._changed():
        input_yang_obj.peer_autonomous_system = input_yang_obj.peer_autonomous_system
        
    if input_yang_obj.local_autonomous_system._changed():
        input_yang_obj.local_autonomous_system = input_yang_obj.local_autonomous_system
        
    if input_yang_obj.address_family._changed():
        input_yang_obj.address_family = input_yang_obj.address_family
        
    if input_yang_obj.neighbor._changed():
        input_yang_obj.neighbor = input_yang_obj.neighbor
        
    if input_yang_obj.multihop._changed():
        input_yang_obj.multihop = input_yang_obj.multihop
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_security(input_yang_obj.security, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status(input_yang_obj.status, translated_yang_obj)
        
    if input_yang_obj.description._changed():
        input_yang_obj.description = input_yang_obj.description
        
    if input_yang_obj.as_override._changed():
        input_yang_obj.as_override = input_yang_obj.as_override
        
    if input_yang_obj.default_route._changed():
        input_yang_obj.default_route = input_yang_obj.default_route
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_bgp_max_prefix(input_yang_obj.bgp_max_prefix, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_bgp_timer(input_yang_obj.bgp_timer, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/isis/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/isis/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/isis/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/isis

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_family._changed():
        input_yang_obj.address_family = input_yang_obj.address_family
        
    if input_yang_obj.area_address._changed():
        input_yang_obj.area_address = input_yang_obj.area_address
        
    if input_yang_obj.level._changed():
        input_yang_obj.level = input_yang_obj.level
        
    if input_yang_obj.metric._changed():
        input_yang_obj.metric = input_yang_obj.metric
        
    if input_yang_obj.process_id._changed():
        input_yang_obj.process_id = input_yang_obj.process_id
        
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status(input_yang_obj.status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes_ipv4_lan_prefixes(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/static/cascaded-lan-prefixes/ipv4-lan-prefixes

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.lan_tag._changed():
        input_yang_obj.lan_tag = input_yang_obj.lan_tag
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes_ipv6_lan_prefixes(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/static/cascaded-lan-prefixes/ipv6-lan-prefixes

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.lan_tag._changed():
        input_yang_obj.lan_tag = input_yang_obj.lan_tag
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/static/cascaded-lan-prefixes

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ipv4_lan_prefixes.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes_ipv4_lan_prefixes(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.ipv6_lan_prefixes.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes_ipv6_lan_prefixes(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/static

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes(input_yang_obj.cascaded_lan_prefixes, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_rip(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/rip

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_family._changed():
        input_yang_obj.address_family = input_yang_obj.address_family
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_vrrp(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/vrrp

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_family._changed():
        input_yang_obj.address_family = input_yang_obj.address_family
        
    if input_yang_obj.vrrp_group._changed():
        input_yang_obj.vrrp_group = input_yang_obj.vrrp_group
        
    if input_yang_obj.backup_peer._changed():
        input_yang_obj.backup_peer = input_yang_obj.backup_peer
        
    if input_yang_obj.priority._changed():
        input_yang_obj.priority = input_yang_obj.priority
        
    if input_yang_obj.ping_reply._changed():
        input_yang_obj.ping_reply = input_yang_obj.ping_reply
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    for k, listInst in input_yang_obj.routing_profiles.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_routing_profiles(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf(input_yang_obj.ospf, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp(input_yang_obj.bgp, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis(input_yang_obj.isis, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static(input_yang_obj.static, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_rip(input_yang_obj.rip, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_vrrp(input_yang_obj.vrrp, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.routing_protocol.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/cloud-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/encryption-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/qos-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/bfd-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/forwarding-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/routing-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.cloud_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.encryption_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.qos_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.bfd_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.forwarding_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.routing_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj.valid_provider_identifiers, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.rd._changed():
        input_yang_obj.rd = input_yang_obj.rd
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj.vpn_targets, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ie_profile.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_underlay_transport(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/underlay-transport

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups/group

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.group.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/logical-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.peer_reference._changed():
        input_yang_obj.peer_reference = input_yang_obj.peer_reference
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/dot1q-vlan-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/priority-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinq

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinany

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan/peer-list

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vni_id._changed():
        input_yang_obj.vni_id = input_yang_obj.vni_id
        
    if input_yang_obj.peer_mode._changed():
        input_yang_obj.peer_mode = input_yang_obj.peer_mode
        
    for k, listInst in input_yang_obj.peer_list.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj.dot1q_vlan_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj.priority_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj.qinq, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj.qinany, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj.vxlan, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/pseudowire

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/vpls

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.bearer_reference._changed():
        input_yang_obj.bearer_reference = input_yang_obj.bearer_reference
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj.pseudowire, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj.vpls, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.encapsulation_type._changed():
        input_yang_obj.encapsulation_type = input_yang_obj.encapsulation_type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj.logical_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj.tagged_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj.bearer, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_customer_dhcp_servers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4/customer-dhcp-servers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.server_ip_address._changed():
        input_yang_obj.server_ip_address = input_yang_obj.server_ip_address
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_address(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4/address

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.s_provider_address._changed():
        input_yang_obj.s_provider_address = input_yang_obj.s_provider_address
        
    if input_yang_obj.s_customer_address._changed():
        input_yang_obj.s_customer_address = input_yang_obj.s_customer_address
        
    if input_yang_obj.s_prefix_length._changed():
        input_yang_obj.s_prefix_length = input_yang_obj.s_prefix_length
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_allocation_type._changed():
        input_yang_obj.address_allocation_type = input_yang_obj.address_allocation_type
        
    if input_yang_obj.provider_address._changed():
        input_yang_obj.provider_address = input_yang_obj.provider_address
        
    if input_yang_obj.prefix_length._changed():
        input_yang_obj.prefix_length = input_yang_obj.prefix_length
        
    if input_yang_obj.dr_provider_address._changed():
        input_yang_obj.dr_provider_address = input_yang_obj.dr_provider_address
        
    if input_yang_obj.dr_prefix_length._changed():
        input_yang_obj.dr_prefix_length = input_yang_obj.dr_prefix_length
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_customer_dhcp_servers(input_yang_obj.customer_dhcp_servers, translated_yang_obj)
        
    if input_yang_obj.primary_address._changed():
        input_yang_obj.primary_address = input_yang_obj.primary_address
        
    for k, listInst in input_yang_obj.address.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_address(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/cloud-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/encryption-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/qos-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/bfd-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/forwarding-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/routing-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.cloud_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.encryption_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.qos_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.bfd_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.forwarding_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.routing_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj.valid_provider_identifiers, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.rd._changed():
        input_yang_obj.rd = input_yang_obj.rd
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj.vpn_targets, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ie_profile.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_underlay_transport(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/underlay-transport

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups/group

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.group.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/logical-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.peer_reference._changed():
        input_yang_obj.peer_reference = input_yang_obj.peer_reference
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/dot1q-vlan-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/priority-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinq

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinany

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan/peer-list

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vni_id._changed():
        input_yang_obj.vni_id = input_yang_obj.vni_id
        
    if input_yang_obj.peer_mode._changed():
        input_yang_obj.peer_mode = input_yang_obj.peer_mode
        
    for k, listInst in input_yang_obj.peer_list.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj.dot1q_vlan_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj.priority_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj.qinq, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj.qinany, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj.vxlan, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/pseudowire

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/vpls

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.bearer_reference._changed():
        input_yang_obj.bearer_reference = input_yang_obj.bearer_reference
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj.pseudowire, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj.vpls, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.encapsulation_type._changed():
        input_yang_obj.encapsulation_type = input_yang_obj.encapsulation_type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj.logical_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj.tagged_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj.bearer, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_customer_dhcp_servers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4/customer-dhcp-servers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.server_ip_address._changed():
        input_yang_obj.server_ip_address = input_yang_obj.server_ip_address
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_address(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4/address

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.s_provider_address._changed():
        input_yang_obj.s_provider_address = input_yang_obj.s_provider_address
        
    if input_yang_obj.s_customer_address._changed():
        input_yang_obj.s_customer_address = input_yang_obj.s_customer_address
        
    if input_yang_obj.s_prefix_length._changed():
        input_yang_obj.s_prefix_length = input_yang_obj.s_prefix_length
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_allocation_type._changed():
        input_yang_obj.address_allocation_type = input_yang_obj.address_allocation_type
        
    if input_yang_obj.provider_address._changed():
        input_yang_obj.provider_address = input_yang_obj.provider_address
        
    if input_yang_obj.prefix_length._changed():
        input_yang_obj.prefix_length = input_yang_obj.prefix_length
        
    if input_yang_obj.dr_provider_address._changed():
        input_yang_obj.dr_provider_address = input_yang_obj.dr_provider_address
        
    if input_yang_obj.dr_prefix_length._changed():
        input_yang_obj.dr_prefix_length = input_yang_obj.dr_prefix_length
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_customer_dhcp_servers(input_yang_obj.customer_dhcp_servers, translated_yang_obj)
        
    if input_yang_obj.primary_address._changed():
        input_yang_obj.primary_address = input_yang_obj.primary_address
        
    for k, listInst in input_yang_obj.address.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_address(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/cloud-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/encryption-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/qos-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/bfd-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/forwarding-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/routing-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.cloud_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.encryption_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.qos_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.bfd_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.forwarding_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.routing_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj.valid_provider_identifiers, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.rd._changed():
        input_yang_obj.rd = input_yang_obj.rd
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj.vpn_targets, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ie_profile.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_underlay_transport(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/underlay-transport

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups/group

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.group.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/logical-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.peer_reference._changed():
        input_yang_obj.peer_reference = input_yang_obj.peer_reference
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/dot1q-vlan-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/priority-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinq

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinany

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan/peer-list

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vni_id._changed():
        input_yang_obj.vni_id = input_yang_obj.vni_id
        
    if input_yang_obj.peer_mode._changed():
        input_yang_obj.peer_mode = input_yang_obj.peer_mode
        
    for k, listInst in input_yang_obj.peer_list.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj.dot1q_vlan_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj.priority_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj.qinq, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj.qinany, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj.vxlan, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/pseudowire

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/vpls

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.bearer_reference._changed():
        input_yang_obj.bearer_reference = input_yang_obj.bearer_reference
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj.pseudowire, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj.vpls, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.encapsulation_type._changed():
        input_yang_obj.encapsulation_type = input_yang_obj.encapsulation_type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj.logical_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj.tagged_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj.bearer, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_customer_dhcp_servers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4/customer-dhcp-servers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.server_ip_address._changed():
        input_yang_obj.server_ip_address = input_yang_obj.server_ip_address
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_address(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4/address

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.s_provider_address._changed():
        input_yang_obj.s_provider_address = input_yang_obj.s_provider_address
        
    if input_yang_obj.s_customer_address._changed():
        input_yang_obj.s_customer_address = input_yang_obj.s_customer_address
        
    if input_yang_obj.s_prefix_length._changed():
        input_yang_obj.s_prefix_length = input_yang_obj.s_prefix_length
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_allocation_type._changed():
        input_yang_obj.address_allocation_type = input_yang_obj.address_allocation_type
        
    if input_yang_obj.provider_address._changed():
        input_yang_obj.provider_address = input_yang_obj.provider_address
        
    if input_yang_obj.prefix_length._changed():
        input_yang_obj.prefix_length = input_yang_obj.prefix_length
        
    if input_yang_obj.dr_provider_address._changed():
        input_yang_obj.dr_provider_address = input_yang_obj.dr_provider_address
        
    if input_yang_obj.dr_prefix_length._changed():
        input_yang_obj.dr_prefix_length = input_yang_obj.dr_prefix_length
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_customer_dhcp_servers(input_yang_obj.customer_dhcp_servers, translated_yang_obj)
        
    if input_yang_obj.primary_address._changed():
        input_yang_obj.primary_address = input_yang_obj.primary_address
        
    for k, listInst in input_yang_obj.address.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_address(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6_customer_dhcp_servers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv6/customer-dhcp-servers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.server_ip_address._changed():
        input_yang_obj.server_ip_address = input_yang_obj.server_ip_address
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6_s_address(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv6/s-address

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.provider_address._changed():
        input_yang_obj.provider_address = input_yang_obj.provider_address
        
    if input_yang_obj.customer_address._changed():
        input_yang_obj.customer_address = input_yang_obj.customer_address
        
    if input_yang_obj.prefix_length._changed():
        input_yang_obj.prefix_length = input_yang_obj.prefix_length
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv6

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_allocation_type._changed():
        input_yang_obj.address_allocation_type = input_yang_obj.address_allocation_type
        
    if input_yang_obj.provider_address._changed():
        input_yang_obj.provider_address = input_yang_obj.provider_address
        
    if input_yang_obj.prefix_length._changed():
        input_yang_obj.prefix_length = input_yang_obj.prefix_length
        
    if input_yang_obj.dr_provider_address._changed():
        input_yang_obj.dr_provider_address = input_yang_obj.dr_provider_address
        
    if input_yang_obj.dr_prefix_length._changed():
        input_yang_obj.dr_prefix_length = input_yang_obj.dr_prefix_length
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6_customer_dhcp_servers(input_yang_obj.customer_dhcp_servers, translated_yang_obj)
        
    if input_yang_obj.s_primary_address._changed():
        input_yang_obj.s_primary_address = input_yang_obj.s_primary_address
        
    for k, listInst in input_yang_obj.s_address.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6_s_address(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_oam_bfd(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/oam/bfd

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enabled._changed():
        input_yang_obj.enabled = input_yang_obj.enabled
        
    if input_yang_obj.fixed_value._changed():
        input_yang_obj.fixed_value = input_yang_obj.fixed_value
        
    if input_yang_obj.profile_name._changed():
        input_yang_obj.profile_name = input_yang_obj.profile_name
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_oam(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/oam

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_oam_bfd(input_yang_obj.bfd, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4(input_yang_obj.ipv4, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6(input_yang_obj.ipv6, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_oam(input_yang_obj.oam, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_security_encryption(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/security/encryption

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enabled._changed():
        input_yang_obj.enabled = input_yang_obj.enabled
        
    if input_yang_obj.layer._changed():
        input_yang_obj.layer = input_yang_obj.layer
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_security_encryption_profile(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/security/encryption-profile

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.profile_name._changed():
        input_yang_obj.profile_name = input_yang_obj.profile_name
        
    if input_yang_obj.algorithm._changed():
        input_yang_obj.algorithm = input_yang_obj.algorithm
        
    if input_yang_obj.preshared_key._changed():
        input_yang_obj.preshared_key = input_yang_obj.preshared_key
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_security(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/security

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_security_encryption(input_yang_obj.encryption, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_security_encryption_profile(input_yang_obj.encryption_profile, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_routing_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/routing-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_security(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/ospf/security

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.auth_key._changed():
        input_yang_obj.auth_key = input_yang_obj.auth_key
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_sham_links_sham_link(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/ospf/sham-links/sham-link

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.metric._changed():
        input_yang_obj.metric = input_yang_obj.metric
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_sham_links(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/ospf/sham-links

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.sham_link.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_sham_links_sham_link(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/ospf

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_family._changed():
        input_yang_obj.address_family = input_yang_obj.address_family
        
    if input_yang_obj.area_address._changed():
        input_yang_obj.area_address = input_yang_obj.area_address
        
    if input_yang_obj.metric._changed():
        input_yang_obj.metric = input_yang_obj.metric
        
    if input_yang_obj.mtu._changed():
        input_yang_obj.mtu = input_yang_obj.mtu
        
    if input_yang_obj.process_id._changed():
        input_yang_obj.process_id = input_yang_obj.process_id
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_security(input_yang_obj.security, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_sham_links(input_yang_obj.sham_links, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_security(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/security

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.auth_key._changed():
        input_yang_obj.auth_key = input_yang_obj.auth_key
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_bgp_max_prefix(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/bgp-max-prefix

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.max_prefix._changed():
        input_yang_obj.max_prefix = input_yang_obj.max_prefix
        
    if input_yang_obj.warning_threshold._changed():
        input_yang_obj.warning_threshold = input_yang_obj.warning_threshold
        
    if input_yang_obj.violate_action._changed():
        input_yang_obj.violate_action = input_yang_obj.violate_action
        
    if input_yang_obj.restart_interval._changed():
        input_yang_obj.restart_interval = input_yang_obj.restart_interval
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_bgp_timer(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/bgp-timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.keep_alive._changed():
        input_yang_obj.keep_alive = input_yang_obj.keep_alive
        
    if input_yang_obj.hold_time._changed():
        input_yang_obj.hold_time = input_yang_obj.hold_time
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.peer_autonomous_system._changed():
        input_yang_obj.peer_autonomous_system = input_yang_obj.peer_autonomous_system
        
    if input_yang_obj.local_autonomous_system._changed():
        input_yang_obj.local_autonomous_system = input_yang_obj.local_autonomous_system
        
    if input_yang_obj.address_family._changed():
        input_yang_obj.address_family = input_yang_obj.address_family
        
    if input_yang_obj.neighbor._changed():
        input_yang_obj.neighbor = input_yang_obj.neighbor
        
    if input_yang_obj.multihop._changed():
        input_yang_obj.multihop = input_yang_obj.multihop
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_security(input_yang_obj.security, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status(input_yang_obj.status, translated_yang_obj)
        
    if input_yang_obj.description._changed():
        input_yang_obj.description = input_yang_obj.description
        
    if input_yang_obj.as_override._changed():
        input_yang_obj.as_override = input_yang_obj.as_override
        
    if input_yang_obj.default_route._changed():
        input_yang_obj.default_route = input_yang_obj.default_route
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_bgp_max_prefix(input_yang_obj.bgp_max_prefix, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_bgp_timer(input_yang_obj.bgp_timer, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/isis/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/isis/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/isis/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/isis

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_family._changed():
        input_yang_obj.address_family = input_yang_obj.address_family
        
    if input_yang_obj.area_address._changed():
        input_yang_obj.area_address = input_yang_obj.area_address
        
    if input_yang_obj.level._changed():
        input_yang_obj.level = input_yang_obj.level
        
    if input_yang_obj.metric._changed():
        input_yang_obj.metric = input_yang_obj.metric
        
    if input_yang_obj.process_id._changed():
        input_yang_obj.process_id = input_yang_obj.process_id
        
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status(input_yang_obj.status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes_ipv4_lan_prefixes(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/static/cascaded-lan-prefixes/ipv4-lan-prefixes

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.lan_tag._changed():
        input_yang_obj.lan_tag = input_yang_obj.lan_tag
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes_ipv6_lan_prefixes(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/static/cascaded-lan-prefixes/ipv6-lan-prefixes

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.lan_tag._changed():
        input_yang_obj.lan_tag = input_yang_obj.lan_tag
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/static/cascaded-lan-prefixes

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ipv4_lan_prefixes.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes_ipv4_lan_prefixes(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.ipv6_lan_prefixes.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes_ipv6_lan_prefixes(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/static

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes(input_yang_obj.cascaded_lan_prefixes, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_rip(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/rip

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_family._changed():
        input_yang_obj.address_family = input_yang_obj.address_family
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_vrrp(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/vrrp

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_family._changed():
        input_yang_obj.address_family = input_yang_obj.address_family
        
    if input_yang_obj.vrrp_group._changed():
        input_yang_obj.vrrp_group = input_yang_obj.vrrp_group
        
    if input_yang_obj.backup_peer._changed():
        input_yang_obj.backup_peer = input_yang_obj.backup_peer
        
    if input_yang_obj.priority._changed():
        input_yang_obj.priority = input_yang_obj.priority
        
    if input_yang_obj.ping_reply._changed():
        input_yang_obj.ping_reply = input_yang_obj.ping_reply
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    for k, listInst in input_yang_obj.routing_profiles.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_routing_profiles(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf(input_yang_obj.ospf, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp(input_yang_obj.bgp, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis(input_yang_obj.isis, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static(input_yang_obj.static, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_rip(input_yang_obj.rip, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_vrrp(input_yang_obj.vrrp, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.routing_protocol.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/cloud-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/encryption-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/qos-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/bfd-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/forwarding-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/routing-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.cloud_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.encryption_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.qos_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.bfd_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.forwarding_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.routing_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj.valid_provider_identifiers, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.rd._changed():
        input_yang_obj.rd = input_yang_obj.rd
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj.vpn_targets, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ie_profile.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_underlay_transport(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/underlay-transport

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups/group

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.group.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/logical-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.peer_reference._changed():
        input_yang_obj.peer_reference = input_yang_obj.peer_reference
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/dot1q-vlan-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/priority-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinq

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinany

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan/peer-list

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vni_id._changed():
        input_yang_obj.vni_id = input_yang_obj.vni_id
        
    if input_yang_obj.peer_mode._changed():
        input_yang_obj.peer_mode = input_yang_obj.peer_mode
        
    for k, listInst in input_yang_obj.peer_list.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj.dot1q_vlan_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj.priority_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj.qinq, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj.qinany, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj.vxlan, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/pseudowire

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/vpls

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.bearer_reference._changed():
        input_yang_obj.bearer_reference = input_yang_obj.bearer_reference
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj.pseudowire, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj.vpls, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.encapsulation_type._changed():
        input_yang_obj.encapsulation_type = input_yang_obj.encapsulation_type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj.logical_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj.tagged_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj.bearer, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_customer_dhcp_servers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4/customer-dhcp-servers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.server_ip_address._changed():
        input_yang_obj.server_ip_address = input_yang_obj.server_ip_address
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_address(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4/address

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.s_provider_address._changed():
        input_yang_obj.s_provider_address = input_yang_obj.s_provider_address
        
    if input_yang_obj.s_customer_address._changed():
        input_yang_obj.s_customer_address = input_yang_obj.s_customer_address
        
    if input_yang_obj.s_prefix_length._changed():
        input_yang_obj.s_prefix_length = input_yang_obj.s_prefix_length
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_allocation_type._changed():
        input_yang_obj.address_allocation_type = input_yang_obj.address_allocation_type
        
    if input_yang_obj.provider_address._changed():
        input_yang_obj.provider_address = input_yang_obj.provider_address
        
    if input_yang_obj.prefix_length._changed():
        input_yang_obj.prefix_length = input_yang_obj.prefix_length
        
    if input_yang_obj.dr_provider_address._changed():
        input_yang_obj.dr_provider_address = input_yang_obj.dr_provider_address
        
    if input_yang_obj.dr_prefix_length._changed():
        input_yang_obj.dr_prefix_length = input_yang_obj.dr_prefix_length
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_customer_dhcp_servers(input_yang_obj.customer_dhcp_servers, translated_yang_obj)
        
    if input_yang_obj.primary_address._changed():
        input_yang_obj.primary_address = input_yang_obj.primary_address
        
    for k, listInst in input_yang_obj.address.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_address(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6_customer_dhcp_servers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv6/customer-dhcp-servers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.server_ip_address._changed():
        input_yang_obj.server_ip_address = input_yang_obj.server_ip_address
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6_s_address(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv6/s-address

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.provider_address._changed():
        input_yang_obj.provider_address = input_yang_obj.provider_address
        
    if input_yang_obj.customer_address._changed():
        input_yang_obj.customer_address = input_yang_obj.customer_address
        
    if input_yang_obj.prefix_length._changed():
        input_yang_obj.prefix_length = input_yang_obj.prefix_length
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv6

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_allocation_type._changed():
        input_yang_obj.address_allocation_type = input_yang_obj.address_allocation_type
        
    if input_yang_obj.provider_address._changed():
        input_yang_obj.provider_address = input_yang_obj.provider_address
        
    if input_yang_obj.prefix_length._changed():
        input_yang_obj.prefix_length = input_yang_obj.prefix_length
        
    if input_yang_obj.dr_provider_address._changed():
        input_yang_obj.dr_provider_address = input_yang_obj.dr_provider_address
        
    if input_yang_obj.dr_prefix_length._changed():
        input_yang_obj.dr_prefix_length = input_yang_obj.dr_prefix_length
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6_customer_dhcp_servers(input_yang_obj.customer_dhcp_servers, translated_yang_obj)
        
    if input_yang_obj.s_primary_address._changed():
        input_yang_obj.s_primary_address = input_yang_obj.s_primary_address
        
    for k, listInst in input_yang_obj.s_address.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6_s_address(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_oam_bfd(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/oam/bfd

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enabled._changed():
        input_yang_obj.enabled = input_yang_obj.enabled
        
    if input_yang_obj.fixed_value._changed():
        input_yang_obj.fixed_value = input_yang_obj.fixed_value
        
    if input_yang_obj.profile_name._changed():
        input_yang_obj.profile_name = input_yang_obj.profile_name
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_oam(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/oam

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_oam_bfd(input_yang_obj.bfd, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4(input_yang_obj.ipv4, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6(input_yang_obj.ipv6, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_oam(input_yang_obj.oam, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_security_encryption(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/security/encryption

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enabled._changed():
        input_yang_obj.enabled = input_yang_obj.enabled
        
    if input_yang_obj.layer._changed():
        input_yang_obj.layer = input_yang_obj.layer
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_security_encryption_profile(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/security/encryption-profile

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.profile_name._changed():
        input_yang_obj.profile_name = input_yang_obj.profile_name
        
    if input_yang_obj.algorithm._changed():
        input_yang_obj.algorithm = input_yang_obj.algorithm
        
    if input_yang_obj.preshared_key._changed():
        input_yang_obj.preshared_key = input_yang_obj.preshared_key
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_security(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/security

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_security_encryption(input_yang_obj.encryption, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_security_encryption_profile(input_yang_obj.encryption_profile, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_routing_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/routing-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_security(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/ospf/security

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.auth_key._changed():
        input_yang_obj.auth_key = input_yang_obj.auth_key
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_sham_links_sham_link(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/ospf/sham-links/sham-link

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.metric._changed():
        input_yang_obj.metric = input_yang_obj.metric
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_sham_links(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/ospf/sham-links

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.sham_link.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_sham_links_sham_link(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/ospf

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_family._changed():
        input_yang_obj.address_family = input_yang_obj.address_family
        
    if input_yang_obj.area_address._changed():
        input_yang_obj.area_address = input_yang_obj.area_address
        
    if input_yang_obj.metric._changed():
        input_yang_obj.metric = input_yang_obj.metric
        
    if input_yang_obj.mtu._changed():
        input_yang_obj.mtu = input_yang_obj.mtu
        
    if input_yang_obj.process_id._changed():
        input_yang_obj.process_id = input_yang_obj.process_id
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_security(input_yang_obj.security, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_sham_links(input_yang_obj.sham_links, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_security(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/security

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.auth_key._changed():
        input_yang_obj.auth_key = input_yang_obj.auth_key
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_bgp_max_prefix(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/bgp-max-prefix

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.max_prefix._changed():
        input_yang_obj.max_prefix = input_yang_obj.max_prefix
        
    if input_yang_obj.warning_threshold._changed():
        input_yang_obj.warning_threshold = input_yang_obj.warning_threshold
        
    if input_yang_obj.violate_action._changed():
        input_yang_obj.violate_action = input_yang_obj.violate_action
        
    if input_yang_obj.restart_interval._changed():
        input_yang_obj.restart_interval = input_yang_obj.restart_interval
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_bgp_timer(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/bgp-timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.keep_alive._changed():
        input_yang_obj.keep_alive = input_yang_obj.keep_alive
        
    if input_yang_obj.hold_time._changed():
        input_yang_obj.hold_time = input_yang_obj.hold_time
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.peer_autonomous_system._changed():
        input_yang_obj.peer_autonomous_system = input_yang_obj.peer_autonomous_system
        
    if input_yang_obj.local_autonomous_system._changed():
        input_yang_obj.local_autonomous_system = input_yang_obj.local_autonomous_system
        
    if input_yang_obj.address_family._changed():
        input_yang_obj.address_family = input_yang_obj.address_family
        
    if input_yang_obj.neighbor._changed():
        input_yang_obj.neighbor = input_yang_obj.neighbor
        
    if input_yang_obj.multihop._changed():
        input_yang_obj.multihop = input_yang_obj.multihop
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_security(input_yang_obj.security, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status(input_yang_obj.status, translated_yang_obj)
        
    if input_yang_obj.description._changed():
        input_yang_obj.description = input_yang_obj.description
        
    if input_yang_obj.as_override._changed():
        input_yang_obj.as_override = input_yang_obj.as_override
        
    if input_yang_obj.default_route._changed():
        input_yang_obj.default_route = input_yang_obj.default_route
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_bgp_max_prefix(input_yang_obj.bgp_max_prefix, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_bgp_timer(input_yang_obj.bgp_timer, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/isis/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/isis/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/isis/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/isis

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_family._changed():
        input_yang_obj.address_family = input_yang_obj.address_family
        
    if input_yang_obj.area_address._changed():
        input_yang_obj.area_address = input_yang_obj.area_address
        
    if input_yang_obj.level._changed():
        input_yang_obj.level = input_yang_obj.level
        
    if input_yang_obj.metric._changed():
        input_yang_obj.metric = input_yang_obj.metric
        
    if input_yang_obj.process_id._changed():
        input_yang_obj.process_id = input_yang_obj.process_id
        
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status(input_yang_obj.status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes_ipv4_lan_prefixes(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/static/cascaded-lan-prefixes/ipv4-lan-prefixes

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.lan_tag._changed():
        input_yang_obj.lan_tag = input_yang_obj.lan_tag
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes_ipv6_lan_prefixes(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/static/cascaded-lan-prefixes/ipv6-lan-prefixes

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.lan_tag._changed():
        input_yang_obj.lan_tag = input_yang_obj.lan_tag
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/static/cascaded-lan-prefixes

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ipv4_lan_prefixes.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes_ipv4_lan_prefixes(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.ipv6_lan_prefixes.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes_ipv6_lan_prefixes(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/static

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes(input_yang_obj.cascaded_lan_prefixes, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_rip(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/rip

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_family._changed():
        input_yang_obj.address_family = input_yang_obj.address_family
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_vrrp(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/vrrp

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_family._changed():
        input_yang_obj.address_family = input_yang_obj.address_family
        
    if input_yang_obj.vrrp_group._changed():
        input_yang_obj.vrrp_group = input_yang_obj.vrrp_group
        
    if input_yang_obj.backup_peer._changed():
        input_yang_obj.backup_peer = input_yang_obj.backup_peer
        
    if input_yang_obj.priority._changed():
        input_yang_obj.priority = input_yang_obj.priority
        
    if input_yang_obj.ping_reply._changed():
        input_yang_obj.ping_reply = input_yang_obj.ping_reply
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    for k, listInst in input_yang_obj.routing_profiles.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_routing_profiles(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf(input_yang_obj.ospf, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp(input_yang_obj.bgp, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis(input_yang_obj.isis, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static(input_yang_obj.static, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_rip(input_yang_obj.rip, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_vrrp(input_yang_obj.vrrp, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.routing_protocol.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/cloud-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/encryption-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/qos-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/bfd-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/forwarding-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/routing-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.cloud_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.encryption_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.qos_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.bfd_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.forwarding_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.routing_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj.valid_provider_identifiers, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.rd._changed():
        input_yang_obj.rd = input_yang_obj.rd
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj.vpn_targets, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ie_profile.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_underlay_transport(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/underlay-transport

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups/group

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.group.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/logical-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.peer_reference._changed():
        input_yang_obj.peer_reference = input_yang_obj.peer_reference
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/dot1q-vlan-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/priority-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinq

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinany

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan/peer-list

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vni_id._changed():
        input_yang_obj.vni_id = input_yang_obj.vni_id
        
    if input_yang_obj.peer_mode._changed():
        input_yang_obj.peer_mode = input_yang_obj.peer_mode
        
    for k, listInst in input_yang_obj.peer_list.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj.dot1q_vlan_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj.priority_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj.qinq, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj.qinany, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj.vxlan, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/pseudowire

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/vpls

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.bearer_reference._changed():
        input_yang_obj.bearer_reference = input_yang_obj.bearer_reference
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj.pseudowire, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj.vpls, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.encapsulation_type._changed():
        input_yang_obj.encapsulation_type = input_yang_obj.encapsulation_type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj.logical_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj.tagged_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj.bearer, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_customer_dhcp_servers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4/customer-dhcp-servers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.server_ip_address._changed():
        input_yang_obj.server_ip_address = input_yang_obj.server_ip_address
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_address(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4/address

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.s_provider_address._changed():
        input_yang_obj.s_provider_address = input_yang_obj.s_provider_address
        
    if input_yang_obj.s_customer_address._changed():
        input_yang_obj.s_customer_address = input_yang_obj.s_customer_address
        
    if input_yang_obj.s_prefix_length._changed():
        input_yang_obj.s_prefix_length = input_yang_obj.s_prefix_length
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_allocation_type._changed():
        input_yang_obj.address_allocation_type = input_yang_obj.address_allocation_type
        
    if input_yang_obj.provider_address._changed():
        input_yang_obj.provider_address = input_yang_obj.provider_address
        
    if input_yang_obj.prefix_length._changed():
        input_yang_obj.prefix_length = input_yang_obj.prefix_length
        
    if input_yang_obj.dr_provider_address._changed():
        input_yang_obj.dr_provider_address = input_yang_obj.dr_provider_address
        
    if input_yang_obj.dr_prefix_length._changed():
        input_yang_obj.dr_prefix_length = input_yang_obj.dr_prefix_length
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_customer_dhcp_servers(input_yang_obj.customer_dhcp_servers, translated_yang_obj)
        
    if input_yang_obj.primary_address._changed():
        input_yang_obj.primary_address = input_yang_obj.primary_address
        
    for k, listInst in input_yang_obj.address.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_address(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6_customer_dhcp_servers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv6/customer-dhcp-servers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.server_ip_address._changed():
        input_yang_obj.server_ip_address = input_yang_obj.server_ip_address
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6_s_address(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv6/s-address

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.provider_address._changed():
        input_yang_obj.provider_address = input_yang_obj.provider_address
        
    if input_yang_obj.customer_address._changed():
        input_yang_obj.customer_address = input_yang_obj.customer_address
        
    if input_yang_obj.prefix_length._changed():
        input_yang_obj.prefix_length = input_yang_obj.prefix_length
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv6

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_allocation_type._changed():
        input_yang_obj.address_allocation_type = input_yang_obj.address_allocation_type
        
    if input_yang_obj.provider_address._changed():
        input_yang_obj.provider_address = input_yang_obj.provider_address
        
    if input_yang_obj.prefix_length._changed():
        input_yang_obj.prefix_length = input_yang_obj.prefix_length
        
    if input_yang_obj.dr_provider_address._changed():
        input_yang_obj.dr_provider_address = input_yang_obj.dr_provider_address
        
    if input_yang_obj.dr_prefix_length._changed():
        input_yang_obj.dr_prefix_length = input_yang_obj.dr_prefix_length
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6_customer_dhcp_servers(input_yang_obj.customer_dhcp_servers, translated_yang_obj)
        
    if input_yang_obj.s_primary_address._changed():
        input_yang_obj.s_primary_address = input_yang_obj.s_primary_address
        
    for k, listInst in input_yang_obj.s_address.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6_s_address(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_oam_bfd(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/oam/bfd

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enabled._changed():
        input_yang_obj.enabled = input_yang_obj.enabled
        
    if input_yang_obj.fixed_value._changed():
        input_yang_obj.fixed_value = input_yang_obj.fixed_value
        
    if input_yang_obj.profile_name._changed():
        input_yang_obj.profile_name = input_yang_obj.profile_name
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_oam(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/oam

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_oam_bfd(input_yang_obj.bfd, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4(input_yang_obj.ipv4, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6(input_yang_obj.ipv6, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_oam(input_yang_obj.oam, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_security_encryption(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/security/encryption

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enabled._changed():
        input_yang_obj.enabled = input_yang_obj.enabled
        
    if input_yang_obj.layer._changed():
        input_yang_obj.layer = input_yang_obj.layer
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_security_encryption_profile(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/security/encryption-profile

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.profile_name._changed():
        input_yang_obj.profile_name = input_yang_obj.profile_name
        
    if input_yang_obj.algorithm._changed():
        input_yang_obj.algorithm = input_yang_obj.algorithm
        
    if input_yang_obj.preshared_key._changed():
        input_yang_obj.preshared_key = input_yang_obj.preshared_key
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_security(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/security

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_security_encryption(input_yang_obj.encryption, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_security_encryption_profile(input_yang_obj.encryption_profile, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_routing_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/routing-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_security(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/ospf/security

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.auth_key._changed():
        input_yang_obj.auth_key = input_yang_obj.auth_key
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_sham_links_sham_link(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/ospf/sham-links/sham-link

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.metric._changed():
        input_yang_obj.metric = input_yang_obj.metric
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_sham_links(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/ospf/sham-links

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.sham_link.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_sham_links_sham_link(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/ospf

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_family._changed():
        input_yang_obj.address_family = input_yang_obj.address_family
        
    if input_yang_obj.area_address._changed():
        input_yang_obj.area_address = input_yang_obj.area_address
        
    if input_yang_obj.metric._changed():
        input_yang_obj.metric = input_yang_obj.metric
        
    if input_yang_obj.mtu._changed():
        input_yang_obj.mtu = input_yang_obj.mtu
        
    if input_yang_obj.process_id._changed():
        input_yang_obj.process_id = input_yang_obj.process_id
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_security(input_yang_obj.security, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_sham_links(input_yang_obj.sham_links, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_security(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/security

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.auth_key._changed():
        input_yang_obj.auth_key = input_yang_obj.auth_key
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_bgp_max_prefix(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/bgp-max-prefix

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.max_prefix._changed():
        input_yang_obj.max_prefix = input_yang_obj.max_prefix
        
    if input_yang_obj.warning_threshold._changed():
        input_yang_obj.warning_threshold = input_yang_obj.warning_threshold
        
    if input_yang_obj.violate_action._changed():
        input_yang_obj.violate_action = input_yang_obj.violate_action
        
    if input_yang_obj.restart_interval._changed():
        input_yang_obj.restart_interval = input_yang_obj.restart_interval
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_bgp_timer(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/bgp-timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.keep_alive._changed():
        input_yang_obj.keep_alive = input_yang_obj.keep_alive
        
    if input_yang_obj.hold_time._changed():
        input_yang_obj.hold_time = input_yang_obj.hold_time
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.peer_autonomous_system._changed():
        input_yang_obj.peer_autonomous_system = input_yang_obj.peer_autonomous_system
        
    if input_yang_obj.local_autonomous_system._changed():
        input_yang_obj.local_autonomous_system = input_yang_obj.local_autonomous_system
        
    if input_yang_obj.address_family._changed():
        input_yang_obj.address_family = input_yang_obj.address_family
        
    if input_yang_obj.neighbor._changed():
        input_yang_obj.neighbor = input_yang_obj.neighbor
        
    if input_yang_obj.multihop._changed():
        input_yang_obj.multihop = input_yang_obj.multihop
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_security(input_yang_obj.security, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status(input_yang_obj.status, translated_yang_obj)
        
    if input_yang_obj.description._changed():
        input_yang_obj.description = input_yang_obj.description
        
    if input_yang_obj.as_override._changed():
        input_yang_obj.as_override = input_yang_obj.as_override
        
    if input_yang_obj.default_route._changed():
        input_yang_obj.default_route = input_yang_obj.default_route
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_bgp_max_prefix(input_yang_obj.bgp_max_prefix, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_bgp_timer(input_yang_obj.bgp_timer, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/isis/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/isis/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/isis/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/isis

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_family._changed():
        input_yang_obj.address_family = input_yang_obj.address_family
        
    if input_yang_obj.area_address._changed():
        input_yang_obj.area_address = input_yang_obj.area_address
        
    if input_yang_obj.level._changed():
        input_yang_obj.level = input_yang_obj.level
        
    if input_yang_obj.metric._changed():
        input_yang_obj.metric = input_yang_obj.metric
        
    if input_yang_obj.process_id._changed():
        input_yang_obj.process_id = input_yang_obj.process_id
        
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status(input_yang_obj.status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes_ipv4_lan_prefixes(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/static/cascaded-lan-prefixes/ipv4-lan-prefixes

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.lan_tag._changed():
        input_yang_obj.lan_tag = input_yang_obj.lan_tag
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes_ipv6_lan_prefixes(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/static/cascaded-lan-prefixes/ipv6-lan-prefixes

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.lan_tag._changed():
        input_yang_obj.lan_tag = input_yang_obj.lan_tag
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/static/cascaded-lan-prefixes

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ipv4_lan_prefixes.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes_ipv4_lan_prefixes(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.ipv6_lan_prefixes.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes_ipv6_lan_prefixes(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/static

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes(input_yang_obj.cascaded_lan_prefixes, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_rip(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/rip

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_family._changed():
        input_yang_obj.address_family = input_yang_obj.address_family
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_vrrp(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/vrrp

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_family._changed():
        input_yang_obj.address_family = input_yang_obj.address_family
        
    if input_yang_obj.vrrp_group._changed():
        input_yang_obj.vrrp_group = input_yang_obj.vrrp_group
        
    if input_yang_obj.backup_peer._changed():
        input_yang_obj.backup_peer = input_yang_obj.backup_peer
        
    if input_yang_obj.priority._changed():
        input_yang_obj.priority = input_yang_obj.priority
        
    if input_yang_obj.ping_reply._changed():
        input_yang_obj.ping_reply = input_yang_obj.ping_reply
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    for k, listInst in input_yang_obj.routing_profiles.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_routing_profiles(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf(input_yang_obj.ospf, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp(input_yang_obj.bgp, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis(input_yang_obj.isis, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static(input_yang_obj.static, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_rip(input_yang_obj.rip, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_vrrp(input_yang_obj.vrrp, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.routing_protocol.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_service_qos_qos_classification_policy_rule__ipv4_ipv4(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/service/qos/qos-classification-policy/rule//ipv4/ipv4

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.dscp._changed():
        input_yang_obj.dscp = input_yang_obj.dscp
        
    if input_yang_obj.ecn._changed():
        input_yang_obj.ecn = input_yang_obj.ecn
        
    if input_yang_obj.length._changed():
        input_yang_obj.length = input_yang_obj.length
        
    if input_yang_obj.ttl._changed():
        input_yang_obj.ttl = input_yang_obj.ttl
        
    if input_yang_obj.protocol._changed():
        input_yang_obj.protocol = input_yang_obj.protocol
        
    if input_yang_obj.ihl._changed():
        input_yang_obj.ihl = input_yang_obj.ihl
        
    if input_yang_obj.identification._changed():
        input_yang_obj.identification = input_yang_obj.identification
        
    if input_yang_obj.destination_ipv4_network._changed():
        input_yang_obj.destination_ipv4_network = input_yang_obj.destination_ipv4_network
        
    if input_yang_obj.source_ipv4_network._changed():
        input_yang_obj.source_ipv4_network = input_yang_obj.source_ipv4_network
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/cloud-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/encryption-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/qos-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/bfd-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/forwarding-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers/routing-profile-identifier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles/valid-provider-identifiers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.cloud_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_cloud_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.encryption_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_encryption_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.qos_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_qos_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.bfd_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_bfd_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.forwarding_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_forwarding_profile_identifier(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.routing_profile_identifier.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers_routing_profile_identifier(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_profiles_valid_provider_identifiers(input_yang_obj.valid_provider_identifiers, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles/ie-profile

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.rd._changed():
        input_yang_obj.rd = input_yang_obj.rd
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile_vpn_targets(input_yang_obj.vpn_targets, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/ie-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ie_profile.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_ie_profiles_ie_profile(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_underlay_transport(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/underlay-transport

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target/route-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    translated_yang_obj.vpn_targets.vpn_target.add(value=str(input_yang_obj.route_target),type="import-extcommunity")
    translated_yang_obj.vpn_targets.vpn_target.add(value=str(input_yang_obj.route_target), type="export-extcommunity")
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_targets.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target_route_targets(listInst, translated_yang_obj)
        
    if input_yang_obj.route_target_type._changed():
        input_yang_obj.route_target_type = input_yang_obj.route_target_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets/vpn-policies

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    # innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets_vpn_policies(input_yang_obj.vpn_policies, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups/group

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/groups

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.group.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_groups_group(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/logical-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.peer_reference._changed():
        input_yang_obj.peer_reference = input_yang_obj.peer_reference
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/dot1q-vlan-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/priority-tagged

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinq

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    if input_yang_obj.cvlan_id._changed():
        input_yang_obj.cvlan_id = input_yang_obj.cvlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/qinany

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tag_type._changed():
        input_yang_obj.tag_type = input_yang_obj.tag_type
        
    if input_yang_obj.svlan_id._changed():
        input_yang_obj.svlan_id = input_yang_obj.svlan_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan/peer-list

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface/vxlan

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vni_id._changed():
        input_yang_obj.vni_id = input_yang_obj.vni_id
        
    if input_yang_obj.peer_mode._changed():
        input_yang_obj.peer_mode = input_yang_obj.peer_mode
        
    for k, listInst in input_yang_obj.peer_list.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan_peer_list(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/tagged-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_dot1q_vlan_tagged(input_yang_obj.dot1q_vlan_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_priority_tagged(input_yang_obj.priority_tagged, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinq(input_yang_obj.qinq, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_qinany(input_yang_obj.qinany, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface_vxlan(input_yang_obj.vxlan, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/pseudowire

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer/vpls

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.vcid._changed():
        input_yang_obj.vcid = input_yang_obj.vcid
        
    if input_yang_obj.far_end._changed():
        input_yang_obj.far_end = input_yang_obj.far_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/bearer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.bearer_reference._changed():
        input_yang_obj.bearer_reference = input_yang_obj.bearer_reference
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_pseudowire(input_yang_obj.pseudowire, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer_vpls(input_yang_obj.vpls, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.encapsulation_type._changed():
        input_yang_obj.encapsulation_type = input_yang_obj.encapsulation_type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_logical_interface(input_yang_obj.logical_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_tagged_interface(input_yang_obj.tagged_interface, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_connection_bearer(input_yang_obj.bearer, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_customer_dhcp_servers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4/customer-dhcp-servers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.server_ip_address._changed():
        input_yang_obj.server_ip_address = input_yang_obj.server_ip_address
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_address(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4/address

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.s_provider_address._changed():
        input_yang_obj.s_provider_address = input_yang_obj.s_provider_address
        
    if input_yang_obj.s_customer_address._changed():
        input_yang_obj.s_customer_address = input_yang_obj.s_customer_address
        
    if input_yang_obj.s_prefix_length._changed():
        input_yang_obj.s_prefix_length = input_yang_obj.s_prefix_length
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv4

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_allocation_type._changed():
        input_yang_obj.address_allocation_type = input_yang_obj.address_allocation_type
        
    if input_yang_obj.provider_address._changed():
        input_yang_obj.provider_address = input_yang_obj.provider_address
        
    if input_yang_obj.prefix_length._changed():
        input_yang_obj.prefix_length = input_yang_obj.prefix_length
        
    if input_yang_obj.dr_provider_address._changed():
        input_yang_obj.dr_provider_address = input_yang_obj.dr_provider_address
        
    if input_yang_obj.dr_prefix_length._changed():
        input_yang_obj.dr_prefix_length = input_yang_obj.dr_prefix_length
        
    # innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_customer_dhcp_servers(input_yang_obj.customer_dhcp_servers, translated_yang_obj)
        
    if input_yang_obj.primary_address._changed():
        input_yang_obj.primary_address = input_yang_obj.primary_address

    # innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_address(listInst, translated_yang_obj)

    if hasattr(translated_yang_obj,"ipv4"):
        for k, listInst in input_yang_obj.address.iteritems():
            # innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4_address(listInst, translated_yang_obj)
            address_obj = translated_yang_obj.ipv4.addresses.address.add(ip=str(listInst.s_provider_address))
            address_obj.mask = exchange_maskint(listInst.s_prefix_length)
            address_obj.type = "main"

    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6_customer_dhcp_servers(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv6/customer-dhcp-servers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.server_ip_address._changed():
        input_yang_obj.server_ip_address = input_yang_obj.server_ip_address
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6_s_address(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv6/s-address

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.provider_address._changed():
        input_yang_obj.provider_address = input_yang_obj.provider_address
        
    if input_yang_obj.customer_address._changed():
        input_yang_obj.customer_address = input_yang_obj.customer_address
        
    if input_yang_obj.prefix_length._changed():
        input_yang_obj.prefix_length = input_yang_obj.prefix_length
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/ipv6

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_allocation_type._changed():
        input_yang_obj.address_allocation_type = input_yang_obj.address_allocation_type
        
    if input_yang_obj.provider_address._changed():
        input_yang_obj.provider_address = input_yang_obj.provider_address
        
    if input_yang_obj.prefix_length._changed():
        input_yang_obj.prefix_length = input_yang_obj.prefix_length
        
    if input_yang_obj.dr_provider_address._changed():
        input_yang_obj.dr_provider_address = input_yang_obj.dr_provider_address
        
    if input_yang_obj.dr_prefix_length._changed():
        input_yang_obj.dr_prefix_length = input_yang_obj.dr_prefix_length
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6_customer_dhcp_servers(input_yang_obj.customer_dhcp_servers, translated_yang_obj)
        
    if input_yang_obj.s_primary_address._changed():
        input_yang_obj.s_primary_address = input_yang_obj.s_primary_address
        
    for k, listInst in input_yang_obj.s_address.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6_s_address(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_oam_bfd(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/oam/bfd

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enabled._changed():
        input_yang_obj.enabled = input_yang_obj.enabled
        
    if input_yang_obj.fixed_value._changed():
        input_yang_obj.fixed_value = input_yang_obj.fixed_value
        
    if input_yang_obj.profile_name._changed():
        input_yang_obj.profile_name = input_yang_obj.profile_name
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_oam(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection/oam

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_oam_bfd(input_yang_obj.bfd, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ip-connection

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv4(input_yang_obj.ipv4, translated_yang_obj)
        
    # innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_ipv6(input_yang_obj.ipv6, translated_yang_obj)
        
    # innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection_oam(input_yang_obj.oam, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_security_encryption(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/security/encryption

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enabled._changed():
        input_yang_obj.enabled = input_yang_obj.enabled
        
    if input_yang_obj.layer._changed():
        input_yang_obj.layer = input_yang_obj.layer
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_security_encryption_profile(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/security/encryption-profile

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.profile_name._changed():
        input_yang_obj.profile_name = input_yang_obj.profile_name
        
    if input_yang_obj.algorithm._changed():
        input_yang_obj.algorithm = input_yang_obj.algorithm
        
    if input_yang_obj.preshared_key._changed():
        input_yang_obj.preshared_key = input_yang_obj.preshared_key
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_security(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/security

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_security_encryption(input_yang_obj.encryption, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_security_encryption_profile(input_yang_obj.encryption_profile, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_routing_profiles(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/routing-profiles

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_security(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/ospf/security

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.auth_key._changed():
        input_yang_obj.auth_key = input_yang_obj.auth_key
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_sham_links_sham_link(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/ospf/sham-links/sham-link

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.metric._changed():
        input_yang_obj.metric = input_yang_obj.metric
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_sham_links(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/ospf/sham-links

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.sham_link.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_sham_links_sham_link(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/ospf

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_family._changed():
        input_yang_obj.address_family = input_yang_obj.address_family
        
    if input_yang_obj.area_address._changed():
        input_yang_obj.area_address = input_yang_obj.area_address
        
    if input_yang_obj.metric._changed():
        input_yang_obj.metric = input_yang_obj.metric
        
    if input_yang_obj.mtu._changed():
        input_yang_obj.mtu = input_yang_obj.mtu
        
    if input_yang_obj.process_id._changed():
        input_yang_obj.process_id = input_yang_obj.process_id
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_security(input_yang_obj.security, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf_sham_links(input_yang_obj.sham_links, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_security(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/security

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.auth_key._changed():
        input_yang_obj.auth_key = input_yang_obj.auth_key
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_bgp_max_prefix(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/bgp-max-prefix

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.max_prefix._changed():
        input_yang_obj.max_prefix = input_yang_obj.max_prefix
        
    if input_yang_obj.warning_threshold._changed():
        input_yang_obj.warning_threshold = input_yang_obj.warning_threshold
        
    if input_yang_obj.violate_action._changed():
        input_yang_obj.violate_action = input_yang_obj.violate_action
        
    if input_yang_obj.restart_interval._changed():
        input_yang_obj.restart_interval = input_yang_obj.restart_interval
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_bgp_timer(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp/bgp-timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.keep_alive._changed():
        input_yang_obj.keep_alive = input_yang_obj.keep_alive
        
    if input_yang_obj.hold_time._changed():
        input_yang_obj.hold_time = input_yang_obj.hold_time
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/bgp

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.peer_autonomous_system._changed():
        input_yang_obj.peer_autonomous_system = input_yang_obj.peer_autonomous_system
        
    if input_yang_obj.local_autonomous_system._changed():
        input_yang_obj.local_autonomous_system = input_yang_obj.local_autonomous_system
        
    if input_yang_obj.address_family._changed() and hasattr(translated_yang_obj,"bgp"):
       af_obj = translated_yang_obj.bgp.base_process.afs.af.add(type="ipv4uni")
       af_obj.ipv4_unicast.import_routes.import_route.add(protocol="static",process_id="0")

    if input_yang_obj.neighbor._changed() and hasattr(translated_yang_obj,"bgp"):
        af_obj = translated_yang_obj.bgp.base_process.peers.peer.add(address=str(input_yang_obj.neighbor[0]))
        af_obj.remote_as = str(input_yang_obj.peer_autonomous_system)
        af_obj.afs.af.add(type="ipv4uni")

    if input_yang_obj.multihop._changed():
        input_yang_obj.multihop = input_yang_obj.multihop
        
    # innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_security(input_yang_obj.security, translated_yang_obj)
        
    # innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_status(input_yang_obj.status, translated_yang_obj)
        
    if input_yang_obj.description._changed():
        input_yang_obj.description = input_yang_obj.description
        
    if input_yang_obj.as_override._changed():
        input_yang_obj.as_override = input_yang_obj.as_override
        
    if input_yang_obj.default_route._changed():
        input_yang_obj.default_route = input_yang_obj.default_route
        
    # innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_bgp_max_prefix(input_yang_obj.bgp_max_prefix, translated_yang_obj)
        
    # innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp_bgp_timer(input_yang_obj.bgp_timer, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status_admin_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/isis/status/admin-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status_oper_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/isis/status/oper-status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    if input_yang_obj.last_updated._changed():
        input_yang_obj.last_updated = input_yang_obj.last_updated
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/isis/status

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status_admin_status(input_yang_obj.admin_status, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status_oper_status(input_yang_obj.oper_status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/isis

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_family._changed():
        input_yang_obj.address_family = input_yang_obj.address_family
        
    if input_yang_obj.area_address._changed():
        input_yang_obj.area_address = input_yang_obj.area_address
        
    if input_yang_obj.level._changed():
        input_yang_obj.level = input_yang_obj.level
        
    if input_yang_obj.metric._changed():
        input_yang_obj.metric = input_yang_obj.metric
        
    if input_yang_obj.process_id._changed():
        input_yang_obj.process_id = input_yang_obj.process_id
        
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis_status(input_yang_obj.status, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes_ipv4_lan_prefixes(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/static/cascaded-lan-prefixes/ipv4-lan-prefixes

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.lan_tag._changed():
        input_yang_obj.lan_tag = input_yang_obj.lan_tag
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes_ipv6_lan_prefixes(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/static/cascaded-lan-prefixes/ipv6-lan-prefixes

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.lan_tag._changed():
        input_yang_obj.lan_tag = input_yang_obj.lan_tag
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/static/cascaded-lan-prefixes

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ipv4_lan_prefixes.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes_ipv4_lan_prefixes(listInst, translated_yang_obj)
        
    for k, listInst in input_yang_obj.ipv6_lan_prefixes.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes_ipv6_lan_prefixes(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/static

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static_cascaded_lan_prefixes(input_yang_obj.cascaded_lan_prefixes, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_rip(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/rip

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_family._changed():
        input_yang_obj.address_family = input_yang_obj.address_family
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_vrrp(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol/vrrp

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.address_family._changed():
        input_yang_obj.address_family = input_yang_obj.address_family
        
    if input_yang_obj.vrrp_group._changed():
        input_yang_obj.vrrp_group = input_yang_obj.vrrp_group
        
    if input_yang_obj.backup_peer._changed():
        input_yang_obj.backup_peer = input_yang_obj.backup_peer
        
    if input_yang_obj.priority._changed():
        input_yang_obj.priority = input_yang_obj.priority
        
    if input_yang_obj.ping_reply._changed():
        input_yang_obj.ping_reply = input_yang_obj.ping_reply
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols/routing-protocol

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    # for k, listInst in input_yang_obj.routing_profiles.iteritems():
        # innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_routing_profiles(listInst, translated_yang_obj)
        
    # innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_ospf(input_yang_obj.ospf, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_bgp(input_yang_obj.bgp, translated_yang_obj)
        
    # innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_isis(input_yang_obj.isis, translated_yang_obj)
        
    # innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_static(input_yang_obj.static, translated_yang_obj)
        
    # innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_rip(input_yang_obj.rip, translated_yang_obj)
        
    # innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol_vrrp(input_yang_obj.vrrp, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/routing-protocols

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.routing_protocol.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols_routing_protocol(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_service_qos_qos_classification_policy_rule(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/service/qos/qos-classification-policy/rule

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.match_application._changed():
        input_yang_obj.match_application = input_yang_obj.match_application
        
    if input_yang_obj.target_class_id._changed():
        input_yang_obj.target_class_id = input_yang_obj.target_class_id
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_service_qos_qos_classification_policy(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/service/qos/qos-classification-policy

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.rule.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_service_qos_qos_classification_policy_rule(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_service_qos_qos_profile_qos_profile(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/service/qos/qos-profile/qos-profile

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.direction._changed():
        input_yang_obj.direction = input_yang_obj.direction
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_service_qos_qos_profile(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/service/qos/qos-profile

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.qos_profile.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_service_qos_qos_profile_qos_profile(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_service_qos(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/service/qos

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_service_qos_qos_classification_policy(input_yang_obj.qos_classification_policy, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_service_qos_qos_profile(input_yang_obj.qos_profile, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_service_carrierscarrier(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/service/carrierscarrier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.signalling_type._changed():
        input_yang_obj.signalling_type = input_yang_obj.signalling_type
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_service_multicast(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/service/multicast

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.site_type._changed():
        input_yang_obj.site_type = input_yang_obj.site_type
        
    if input_yang_obj.address_family._changed():
        input_yang_obj.address_family = input_yang_obj.address_family
        
    if input_yang_obj.protocol_type._changed():
        input_yang_obj.protocol_type = input_yang_obj.protocol_type
        
    if input_yang_obj.remote_source._changed():
        input_yang_obj.remote_source = input_yang_obj.remote_source
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_service(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/service

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.svc_input_bandwidth._changed():
        input_yang_obj.svc_input_bandwidth = input_yang_obj.svc_input_bandwidth
        
    if input_yang_obj.svc_output_bandwidth._changed():
        input_yang_obj.svc_output_bandwidth = input_yang_obj.svc_output_bandwidth
        
    if input_yang_obj.svc_mtu._changed():
        input_yang_obj.svc_mtu = input_yang_obj.svc_mtu
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_service_qos(input_yang_obj.qos, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_service_carrierscarrier(input_yang_obj.carrierscarrier, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_service_multicast(input_yang_obj.multicast, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    interface_obj = translated_yang_obj

    if input_yang_obj.port_id._changed() and hasattr(translated_yang_obj,"ifm"):
        interface_obj = translated_yang_obj.ifm.interfaces.interface.add(name=str(input_yang_obj.port_id))
        interface_obj.vrf_name = "mycustomer"

        
    if input_yang_obj.description._changed():
        input_yang_obj.description = input_yang_obj.description


    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_ip_connection(input_yang_obj.ip_connection, interface_obj)

    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access_routing_protocols(input_yang_obj.routing_protocols, translated_yang_obj)
        

    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_network_access.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses_vpn_network_access(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_maximum_routes_address_family(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/maximum-routes/address-family

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.maximum_routes._changed():
        input_yang_obj.maximum_routes = input_yang_obj.maximum_routes
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_maximum_routes(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/maximum-routes

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.address_family.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_maximum_routes_address_family(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_multicast_rp_rp_group_mappings_rp_group_mapping_provider_managed_anycast(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/multicast/rp/rp-group-mappings/rp-group-mapping/provider-managed/anycast

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.local_address._changed():
        input_yang_obj.local_address = input_yang_obj.local_address
        
    if input_yang_obj.rp_set_address._changed():
        input_yang_obj.rp_set_address = input_yang_obj.rp_set_address
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_multicast_rp_rp_group_mappings_rp_group_mapping_provider_managed(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/multicast/rp/rp-group-mappings/rp-group-mapping/provider-managed

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enabled._changed():
        input_yang_obj.enabled = input_yang_obj.enabled
        
    if input_yang_obj.rp_redundancy._changed():
        input_yang_obj.rp_redundancy = input_yang_obj.rp_redundancy
        
    if input_yang_obj.optimal_traffic_delivery._changed():
        input_yang_obj.optimal_traffic_delivery = input_yang_obj.optimal_traffic_delivery
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_multicast_rp_rp_group_mappings_rp_group_mapping_provider_managed_anycast(input_yang_obj.anycast, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_multicast_rp_rp_group_mappings_rp_group_mapping_groups_group(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/multicast/rp/rp-group-mappings/rp-group-mapping/groups/group

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.group_address._changed():
        input_yang_obj.group_address = input_yang_obj.group_address
        
    if input_yang_obj.group_start._changed():
        input_yang_obj.group_start = input_yang_obj.group_start
        
    if input_yang_obj.group_end._changed():
        input_yang_obj.group_end = input_yang_obj.group_end
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_multicast_rp_rp_group_mappings_rp_group_mapping_groups(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/multicast/rp/rp-group-mappings/rp-group-mapping/groups

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.group.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_multicast_rp_rp_group_mappings_rp_group_mapping_groups_group(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_multicast_rp_rp_group_mappings_rp_group_mapping(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/multicast/rp/rp-group-mappings/rp-group-mapping

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_multicast_rp_rp_group_mappings_rp_group_mapping_provider_managed(input_yang_obj.provider_managed, translated_yang_obj)
        
    if input_yang_obj.rp_address._changed():
        input_yang_obj.rp_address = input_yang_obj.rp_address
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_multicast_rp_rp_group_mappings_rp_group_mapping_groups(input_yang_obj.groups, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_multicast_rp_rp_group_mappings(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/multicast/rp/rp-group-mappings

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.rp_group_mapping.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_multicast_rp_rp_group_mappings_rp_group_mapping(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_multicast_rp_rp_discovery_bsr_candidates(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/multicast/rp/rp-discovery/bsr-candidates

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.bsr_candidate_address._changed():
        input_yang_obj.bsr_candidate_address = input_yang_obj.bsr_candidate_address
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_multicast_rp_rp_discovery(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/multicast/rp/rp-discovery

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.rp_discovery_type._changed():
        input_yang_obj.rp_discovery_type = input_yang_obj.rp_discovery_type
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_multicast_rp_rp_discovery_bsr_candidates(input_yang_obj.bsr_candidates, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_multicast_rp(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/multicast/rp

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_multicast_rp_rp_group_mappings(input_yang_obj.rp_group_mappings, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_multicast_rp_rp_discovery(input_yang_obj.rp_discovery, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_multicast_msdp(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/multicast/msdp

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enabled._changed():
        input_yang_obj.enabled = input_yang_obj.enabled
        
    if input_yang_obj.peer._changed():
        input_yang_obj.peer = input_yang_obj.peer
        
    if input_yang_obj.local_address._changed():
        input_yang_obj.local_address = input_yang_obj.local_address
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_multicast(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node/multicast

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enabled._changed():
        input_yang_obj.enabled = input_yang_obj.enabled
        
    if input_yang_obj.tree_flavor._changed():
        input_yang_obj.tree_flavor = input_yang_obj.tree_flavor
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_multicast_rp(input_yang_obj.rp, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_multicast_msdp(input_yang_obj.msdp, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes/vpn-node

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.local_autonomous_system._changed() and hasattr(translated_yang_obj,"bgp"):
        if not hasattr(translated_yang_obj,"afs"):
            translated_yang_obj.bgp.global_.yang_enable = "true"
            translated_yang_obj.bgp.base_process.enable = "true"
            translated_yang_obj.bgp.base_process.as_ = str(input_yang_obj.local_autonomous_system)



    if input_yang_obj.description._changed():
        input_yang_obj.description = input_yang_obj.description
        
    if input_yang_obj.ne_id._changed():
        input_yang_obj.ne_id = input_yang_obj.ne_id
        
    if input_yang_obj.router_id._changed():
        input_yang_obj.router_id = input_yang_obj.router_id
        
    if input_yang_obj.address_family._changed():
        input_yang_obj.address_family = input_yang_obj.address_family
        
    if input_yang_obj.node_role._changed():
        input_yang_obj.node_role = input_yang_obj.node_role
        
    if input_yang_obj.rd._changed() and hasattr(translated_yang_obj,"afs"):
        af_obj = translated_yang_obj.afs.af.add(type="ipv4-unicast")
        af_obj.route_distinguisher = str(input_yang_obj.rd)
        _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_targets(input_yang_obj.vpn_targets, af_obj)
        _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses(input_yang_obj.vpn_network_accesses, translated_yang_obj)

    if  hasattr(translated_yang_obj,"ifm"):
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node_vpn_network_accesses(input_yang_obj.vpn_network_accesses, translated_yang_obj)


    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service/vpn-nodes

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_node.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes_vpn_node(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services_vpn_service(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services/vpn-service

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    # innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_status(input_yang_obj.status, translated_yang_obj)
    interface_obj = translated_yang_obj
        
    if input_yang_obj.vpn_name._changed():
        input_yang_obj.vpn_name = input_yang_obj.vpn_name
        
    if input_yang_obj.vpn_description._changed():
        input_yang_obj.vpn_description = input_yang_obj.vpn_description
        
    if input_yang_obj.customer_name._changed() and hasattr(translated_yang_obj,"network_instance"):
        interface_obj = translated_yang_obj.network_instance.instances.instance.add(name=str(input_yang_obj.customer_name))


    if input_yang_obj.l3sm_vpn_id._changed():
        input_yang_obj.l3sm_vpn_id = input_yang_obj.l3sm_vpn_id
        
    if input_yang_obj.vpn_type._changed():
        input_yang_obj.vpn_type = input_yang_obj.vpn_type
        
    if input_yang_obj.vpn_service_topology._changed():
        input_yang_obj.vpn_service_topology = input_yang_obj.vpn_service_topology



    innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service_vpn_nodes(input_yang_obj.vpn_nodes, interface_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw_vpn_services(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw/vpn-services

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_service.iteritems():
        innerobj = _translate__l3vpn_ntw_vpn_services_vpn_service(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__l3vpn_ntw(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /l3vpn-ntw

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    # innerobj = _translate__l3vpn_ntw_vpn_profiles(input_yang_obj.vpn_profiles, translated_yang_obj)
        
    innerobj = _translate__l3vpn_ntw_vpn_services(input_yang_obj.vpn_services, translated_yang_obj)
        
    return translated_yang_obj

def _translate__ietf_l3vpn_ntw(input_yang_obj , translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /ietf-l3vpn-ntw

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    # print("hello")
    trans_yang_list=[]

    translated_yang_obj = huawei_bgp()
    _translate__l3vpn_ntw(input_yang_obj.l3vpn_ntw,translated_yang_obj)
    trans_yang_list.append(translated_yang_obj.bgp)

    translated_yang_obj1 = huawei_network_instance()
    _translate__l3vpn_ntw(input_yang_obj.l3vpn_ntw, translated_yang_obj1)
    trans_yang_list.append(translated_yang_obj1.network_instance)

    translated_yang_obj2 = huawei_ifm()
    _translate__l3vpn_ntw(input_yang_obj.l3vpn_ntw, translated_yang_obj2)
    trans_yang_list.append(translated_yang_obj2.ifm)
        
    return trans_yang_list
