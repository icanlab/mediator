from mediator_server.yang_bindings.target_yang_bindings.huawei_network_instance_sm_binding import *


def _translate__network_instance_global(input_yang_obj: yc_global__huawei_network_instance__network_instance_global, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/global

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cfg_router_id._changed():
        input_yang_obj.cfg_router_id = input_yang_obj.cfg_router_id
        
    if input_yang_obj.as_notation_plain._changed():
        input_yang_obj.as_notation_plain = input_yang_obj.as_notation_plain
        
    if input_yang_obj.route_distinguisher_auto_ip._changed():
        input_yang_obj.route_distinguisher_auto_ip = input_yang_obj.route_distinguisher_auto_ip
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_parameter(input_yang_obj: yc_parameter_huawei_network_instance__network_instance_instances_instance_parameter, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/parameter

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.identifier._changed():
        input_yang_obj.identifier = input_yang_obj.identifier
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_vpn_targets_vpn_target(input_yang_obj: yc_vpn_target_huawei_network_instance__network_instance_instances_instance_afs_af_vpn_targets_vpn_target, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_vpn_targets(input_yang_obj: yc_vpn_targets_huawei_network_instance__network_instance_instances_instance_afs_af_vpn_targets, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_state(input_yang_obj: yc_state_huawei_network_instance__network_instance_instances_instance_afs_af_state, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/state

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.create_time._changed():
        input_yang_obj.create_time = input_yang_obj.create_time
        
    if input_yang_obj.up_time._changed():
        input_yang_obj.up_time = input_yang_obj.up_time
        
    if input_yang_obj.label._changed():
        input_yang_obj.label = input_yang_obj.label
        
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_tunnel_infos_tunnel_info(input_yang_obj: yc_tunnel_info_huawei_network_instance__network_instance_instances_instance_afs_af_tunnel_infos_tunnel_info, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/tunnel-infos/tunnel-info

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.color._changed():
        input_yang_obj.color = input_yang_obj.color
        
    if input_yang_obj.name._changed():
        input_yang_obj.name = input_yang_obj.name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_tunnel_infos(input_yang_obj: yc_tunnel_infos_huawei_network_instance__network_instance_instances_instance_afs_af_tunnel_infos, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/tunnel-infos

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.tunnel_info.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af_tunnel_infos_tunnel_info(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_ospf_import_rts_ospf_import_rt(input_yang_obj: yc_ospf_import_rt_huawei_network_instance__network_instance_instances_instance_afs_af_ospf_import_rts_ospf_import_rt, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/ospf-import-rts/ospf-import-rt

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.valid_route._changed():
        input_yang_obj.valid_route = input_yang_obj.valid_route
        
    if input_yang_obj.route_policy._changed():
        input_yang_obj.route_policy = input_yang_obj.route_policy
        
    if input_yang_obj.route_filter._changed():
        input_yang_obj.route_filter = input_yang_obj.route_filter
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_ospf_import_rts(input_yang_obj: yc_ospf_import_rts_huawei_network_instance__network_instance_instances_instance_afs_af_ospf_import_rts, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/ospf-import-rts

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ospf_import_rt.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af_ospf_import_rts_ospf_import_rt(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af(input_yang_obj: yc_af_huawei_network_instance__network_instance_instances_instance_afs_af, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.route_distinguisher._changed():
        input_yang_obj.route_distinguisher = input_yang_obj.route_distinguisher
        
    if input_yang_obj.effect_route_distinguisher._changed():
        input_yang_obj.effect_route_distinguisher = input_yang_obj.effect_route_distinguisher
        
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    if input_yang_obj.export_policy_add_ert_first._changed():
        input_yang_obj.export_policy_add_ert_first = input_yang_obj.export_policy_add_ert_first
        
    if input_yang_obj.label_mode._changed():
        input_yang_obj.label_mode = input_yang_obj.label_mode
        
    if input_yang_obj.vpn_frr._changed():
        input_yang_obj.vpn_frr = input_yang_obj.vpn_frr
        
    if input_yang_obj.tunnel_policy._changed():
        input_yang_obj.tunnel_policy = input_yang_obj.tunnel_policy
        
    if input_yang_obj.transit_vpn._changed():
        input_yang_obj.transit_vpn = input_yang_obj.transit_vpn
        
    if input_yang_obj.lsp_operation._changed():
        input_yang_obj.lsp_operation = input_yang_obj.lsp_operation
        
    if input_yang_obj.default_color._changed():
        input_yang_obj.default_color = input_yang_obj.default_color
        
    innerobj = _translate__network_instance_instances_instance_afs_af_vpn_targets(input_yang_obj.vpn_targets, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_afs_af_state(input_yang_obj.state, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_afs_af_tunnel_infos(input_yang_obj.tunnel_infos, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_afs_af_ospf_import_rts(input_yang_obj.ospf_import_rts, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs(input_yang_obj: yc_afs_huawei_network_instance__network_instance_instances_instance_afs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.af.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_gtsm(input_yang_obj: yc_gtsm_huawei_network_instance__network_instance_instances_instance_ospfv2_gtsm, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/gtsm

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hops._changed():
        input_yang_obj.hops = input_yang_obj.hops
        
    if input_yang_obj.nonstandard_multicast._changed():
        input_yang_obj.nonstandard_multicast = input_yang_obj.nonstandard_multicast
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id(input_yang_obj: yc_domain_id_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net/domain-id

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.domain_id._changed():
        input_yang_obj.domain_id = input_yang_obj.domain_id
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    if input_yang_obj.value._changed():
        input_yang_obj.value = input_yang_obj.value
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys_domain_id_secondary(input_yang_obj: yc_domain_id_secondary_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys_domain_id_secondary, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net/domain-id-secondarys/domain-id-secondary

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys(input_yang_obj: yc_domain_id_secondarys_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net/domain-id-secondarys

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.domain_id_secondary.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys_domain_id_secondary(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net(input_yang_obj: yc_private_net_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.eca_route._changed():
        input_yang_obj.eca_route = input_yang_obj.eca_route
        
    if input_yang_obj.disable._changed():
        input_yang_obj.disable = input_yang_obj.disable
        
    if input_yang_obj.value._changed():
        input_yang_obj.value = input_yang_obj.value
        
    if input_yang_obj.vpn_capability._changed():
        input_yang_obj.vpn_capability = input_yang_obj.vpn_capability
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id(input_yang_obj.domain_id, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys(input_yang_obj.domain_id_secondarys, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_host_name(input_yang_obj: yc_host_name_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_host_name, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/host-name

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.value._changed():
        input_yang_obj.value = input_yang_obj.value
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bandwidth(input_yang_obj: yc_bandwidth_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bandwidth, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bandwidth

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.config_bw_enable._changed():
        input_yang_obj.config_bw_enable = input_yang_obj.config_bw_enable
        
    if input_yang_obj.reference_value._changed():
        input_yang_obj.reference_value = input_yang_obj.reference_value
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arrival(input_yang_obj: yc_lsa_arrival_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arrival, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-arrival

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.max_interval._changed():
        input_yang_obj.max_interval = input_yang_obj.max_interval
        
    if input_yang_obj.start_interval._changed():
        input_yang_obj.start_interval = input_yang_obj.start_interval
        
    if input_yang_obj.hold_interval._changed():
        input_yang_obj.hold_interval = input_yang_obj.hold_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arr_supp_flap(input_yang_obj: yc_lsa_arr_supp_flap_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arr_supp_flap, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-arr-supp-flap

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.threshold_count._changed():
        input_yang_obj.threshold_count = input_yang_obj.threshold_count
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_originate(input_yang_obj: yc_lsa_originate_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_originate, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-originate

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.other_type_interval._changed():
        input_yang_obj.other_type_interval = input_yang_obj.other_type_interval
        
    if input_yang_obj.max_interval._changed():
        input_yang_obj.max_interval = input_yang_obj.max_interval
        
    if input_yang_obj.start_interval._changed():
        input_yang_obj.start_interval = input_yang_obj.start_interval
        
    if input_yang_obj.hold_interval._changed():
        input_yang_obj.hold_interval = input_yang_obj.hold_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_org_supp_flap(input_yang_obj: yc_lsa_org_supp_flap_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_org_supp_flap, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-org-supp-flap

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.threshold_count._changed():
        input_yang_obj.threshold_count = input_yang_obj.threshold_count
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_spf_schedule(input_yang_obj: yc_spf_schedule_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_spf_schedule, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/spf-schedule

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.max_interval._changed():
        input_yang_obj.max_interval = input_yang_obj.max_interval
        
    if input_yang_obj.start_interval._changed():
        input_yang_obj.start_interval = input_yang_obj.start_interval
        
    if input_yang_obj.hold_interval._changed():
        input_yang_obj.hold_interval = input_yang_obj.hold_interval
        
    if input_yang_obj.conserv_flag._changed():
        input_yang_obj.conserv_flag = input_yang_obj.conserv_flag
        
    if input_yang_obj.millisecond._changed():
        input_yang_obj.millisecond = input_yang_obj.millisecond
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer(input_yang_obj: yc_timer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arrival(input_yang_obj.lsa_arrival, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arr_supp_flap(input_yang_obj.lsa_arr_supp_flap, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_originate(input_yang_obj.lsa_originate, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_org_supp_flap(input_yang_obj.lsa_org_supp_flap, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_spf_schedule(input_yang_obj.spf_schedule, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bfd(input_yang_obj: yc_bfd_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bfd, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bfd

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.min_rx._changed():
        input_yang_obj.min_rx = input_yang_obj.min_rx
        
    if input_yang_obj.min_tx._changed():
        input_yang_obj.min_tx = input_yang_obj.min_tx
        
    if input_yang_obj.detect_multiplier._changed():
        input_yang_obj.detect_multiplier = input_yang_obj.detect_multiplier
        
    if input_yang_obj.incr_cost._changed():
        input_yang_obj.incr_cost = input_yang_obj.incr_cost
        
    if input_yang_obj.frr_binding._changed():
        input_yang_obj.frr_binding = input_yang_obj.frr_binding
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_metric_delay(input_yang_obj: yc_metric_delay_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_metric_delay, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/metric-delay

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.adv_enable._changed():
        input_yang_obj.adv_enable = input_yang_obj.adv_enable
        
    if input_yang_obj.suppress_timer._changed():
        input_yang_obj.suppress_timer = input_yang_obj.suppress_timer
        
    if input_yang_obj.suppress_percent._changed():
        input_yang_obj.suppress_percent = input_yang_obj.suppress_percent
        
    if input_yang_obj.suppress_absolute._changed():
        input_yang_obj.suppress_absolute = input_yang_obj.suppress_absolute
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bier(input_yang_obj: yc_bier_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bier, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_stub_router(input_yang_obj: yc_stub_router_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_stub_router, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/stub-router

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.flag._changed():
        input_yang_obj.flag = input_yang_obj.flag
        
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.include_stub._changed():
        input_yang_obj.include_stub = input_yang_obj.include_stub
        
    if input_yang_obj.external_lsa._changed():
        input_yang_obj.external_lsa = input_yang_obj.external_lsa
        
    if input_yang_obj.external_cost._changed():
        input_yang_obj.external_cost = input_yang_obj.external_cost
        
    if input_yang_obj.summary_lsa._changed():
        input_yang_obj.summary_lsa = input_yang_obj.summary_lsa
        
    if input_yang_obj.summary_cost._changed():
        input_yang_obj.summary_cost = input_yang_obj.summary_cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bgp_ls(input_yang_obj: yc_bgp_ls_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bgp_ls, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bgp-ls

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.identifier._changed():
        input_yang_obj.identifier = input_yang_obj.identifier
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_import_limit(input_yang_obj: yc_import_limit_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_import_limit, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/import-limit

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.max_number._changed():
        input_yang_obj.max_number = input_yang_obj.max_number
        
    if input_yang_obj.threshold_upper._changed():
        input_yang_obj.threshold_upper = input_yang_obj.threshold_upper
        
    if input_yang_obj.threshold_lower._changed():
        input_yang_obj.threshold_lower = input_yang_obj.threshold_lower
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_spf_control(input_yang_obj: yc_spf_control_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_spf_control, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/spf-control

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.max_load_balancing._changed():
        input_yang_obj.max_load_balancing = input_yang_obj.max_load_balancing
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_default_para(input_yang_obj: yc_default_para_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_default_para, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/default-para

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost_value._changed():
        input_yang_obj.cost_value = input_yang_obj.cost_value
        
    if input_yang_obj.cost_inherit_metric._changed():
        input_yang_obj.cost_inherit_metric = input_yang_obj.cost_inherit_metric
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_avoid_micro_loop(input_yang_obj: yc_avoid_micro_loop_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_avoid_micro_loop, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/avoid-micro-loop

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.frr_enable._changed():
        input_yang_obj.frr_enable = input_yang_obj.frr_enable
        
    if input_yang_obj.frr_rib_update_delay._changed():
        input_yang_obj.frr_rib_update_delay = input_yang_obj.frr_rib_update_delay
        
    if input_yang_obj.te_tunnel_enable._changed():
        input_yang_obj.te_tunnel_enable = input_yang_obj.te_tunnel_enable
        
    if input_yang_obj.te_tunnel_rib_update_delay._changed():
        input_yang_obj.te_tunnel_rib_update_delay = input_yang_obj.te_tunnel_rib_update_delay
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs_asbr_summary_prefix(input_yang_obj: yc_asbr_summary_prefix_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs_asbr_summary_prefix, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/asbr-summary-prefixs/asbr-summary-prefix

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.distribute_delay._changed():
        input_yang_obj.distribute_delay = input_yang_obj.distribute_delay
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.advertise._changed():
        input_yang_obj.advertise = input_yang_obj.advertise
        
    if input_yang_obj.generate_null_zero._changed():
        input_yang_obj.generate_null_zero = input_yang_obj.generate_null_zero
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs(input_yang_obj: yc_asbr_summary_prefixs_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/asbr-summary-prefixs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.asbr_summary_prefix.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs_asbr_summary_prefix(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_summary(input_yang_obj: yc_summary_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_summary, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/summary

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_no_summary(input_yang_obj: yc_no_summary_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_no_summary, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/no-summary

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    if input_yang_obj.distribute_delay._changed():
        input_yang_obj.distribute_delay = input_yang_obj.distribute_delay
        
    if input_yang_obj.permit_calculate_other._changed():
        input_yang_obj.permit_calculate_other = input_yang_obj.permit_calculate_other
        
    if input_yang_obj.permit_ibgp._changed():
        input_yang_obj.permit_ibgp = input_yang_obj.permit_ibgp
        
    if input_yang_obj.always._changed():
        input_yang_obj.always = input_yang_obj.always
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_route_preferences_route_preference(input_yang_obj: yc_route_preference_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_route_preferences_route_preference, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/route-preferences/route-preference

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.preference._changed():
        input_yang_obj.preference = input_yang_obj.preference
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_route_preferences(input_yang_obj: yc_route_preferences_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_route_preferences, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/route-preferences

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_preference.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_route_preferences_route_preference(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights_nexthop_weight(input_yang_obj: yc_nexthop_weight_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights_nexthop_weight, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/nexthop-weights/nexthop-weight

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.weight._changed():
        input_yang_obj.weight = input_yang_obj.weight
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights(input_yang_obj: yc_nexthop_weights_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/nexthop-weights

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.nexthop_weight.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights_nexthop_weight(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys_prefix_priority(input_yang_obj: yc_prefix_priority_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys_prefix_priority, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/prefix-prioritys/prefix-priority

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys(input_yang_obj: yc_prefix_prioritys_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/prefix-prioritys

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.prefix_priority.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys_prefix_priority(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_ecmp_prefer(input_yang_obj: yc_ecmp_prefer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_ecmp_prefer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/ecmp-prefer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.te_tunnel._changed():
        input_yang_obj.te_tunnel = input_yang_obj.te_tunnel
        
    if input_yang_obj.intact._changed():
        input_yang_obj.intact = input_yang_obj.intact
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr_tiebreaker(input_yang_obj: yc_tiebreaker_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr_tiebreaker, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr/tiebreaker

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.node_protect._changed():
        input_yang_obj.node_protect = input_yang_obj.node_protect
        
    if input_yang_obj.lowest_cost._changed():
        input_yang_obj.lowest_cost = input_yang_obj.lowest_cost
        
    if input_yang_obj.ldp_sync._changed():
        input_yang_obj.ldp_sync = input_yang_obj.ldp_sync
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr_route_policy(input_yang_obj: yc_route_policy_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr_route_policy, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr/route-policy

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr_rlfa_tunnel(input_yang_obj: yc_rlfa_tunnel_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr_rlfa_tunnel, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr/rlfa-tunnel

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.ip_prefix_name._changed():
        input_yang_obj.ip_prefix_name = input_yang_obj.ip_prefix_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr(input_yang_obj: yc_frr_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.lfa_enable._changed():
        input_yang_obj.lfa_enable = input_yang_obj.lfa_enable
        
    if input_yang_obj.rlfa_enable._changed():
        input_yang_obj.rlfa_enable = input_yang_obj.rlfa_enable
        
    if input_yang_obj.rlfa_max_cost._changed():
        input_yang_obj.rlfa_max_cost = input_yang_obj.rlfa_max_cost
        
    if input_yang_obj.tilfa_enable._changed():
        input_yang_obj.tilfa_enable = input_yang_obj.tilfa_enable
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_frr_tiebreaker(input_yang_obj.tiebreaker, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_frr_route_policy(input_yang_obj.route_policy, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_frr_rlfa_tunnel(input_yang_obj.rlfa_tunnel, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_local_mt_filter(input_yang_obj: yc_local_mt_filter_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_local_mt_filter, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/local-mt-filter

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.acl_name_or_num._changed():
        input_yang_obj.acl_name_or_num = input_yang_obj.acl_name_or_num
        
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_peers_peer(input_yang_obj: yc_peer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_peers_peer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/peers/peer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.priority._changed():
        input_yang_obj.priority = input_yang_obj.priority
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_peers(input_yang_obj: yc_peers_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_peers, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/peers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.peer.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_peers_peer(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_global(input_yang_obj: yc_global__huawei_network_instance__network_instance_global, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/global

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cfg_router_id._changed():
        input_yang_obj.cfg_router_id = input_yang_obj.cfg_router_id
        
    if input_yang_obj.as_notation_plain._changed():
        input_yang_obj.as_notation_plain = input_yang_obj.as_notation_plain
        
    if input_yang_obj.route_distinguisher_auto_ip._changed():
        input_yang_obj.route_distinguisher_auto_ip = input_yang_obj.route_distinguisher_auto_ip
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_parameter(input_yang_obj: yc_parameter_huawei_network_instance__network_instance_instances_instance_parameter, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/parameter

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.identifier._changed():
        input_yang_obj.identifier = input_yang_obj.identifier
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_vpn_targets_vpn_target(input_yang_obj: yc_vpn_target_huawei_network_instance__network_instance_instances_instance_afs_af_vpn_targets_vpn_target, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_vpn_targets(input_yang_obj: yc_vpn_targets_huawei_network_instance__network_instance_instances_instance_afs_af_vpn_targets, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_state(input_yang_obj: yc_state_huawei_network_instance__network_instance_instances_instance_afs_af_state, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/state

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.create_time._changed():
        input_yang_obj.create_time = input_yang_obj.create_time
        
    if input_yang_obj.up_time._changed():
        input_yang_obj.up_time = input_yang_obj.up_time
        
    if input_yang_obj.label._changed():
        input_yang_obj.label = input_yang_obj.label
        
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_tunnel_infos_tunnel_info(input_yang_obj: yc_tunnel_info_huawei_network_instance__network_instance_instances_instance_afs_af_tunnel_infos_tunnel_info, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/tunnel-infos/tunnel-info

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.color._changed():
        input_yang_obj.color = input_yang_obj.color
        
    if input_yang_obj.name._changed():
        input_yang_obj.name = input_yang_obj.name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_tunnel_infos(input_yang_obj: yc_tunnel_infos_huawei_network_instance__network_instance_instances_instance_afs_af_tunnel_infos, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/tunnel-infos

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.tunnel_info.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af_tunnel_infos_tunnel_info(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_ospf_import_rts_ospf_import_rt(input_yang_obj: yc_ospf_import_rt_huawei_network_instance__network_instance_instances_instance_afs_af_ospf_import_rts_ospf_import_rt, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/ospf-import-rts/ospf-import-rt

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.valid_route._changed():
        input_yang_obj.valid_route = input_yang_obj.valid_route
        
    if input_yang_obj.route_policy._changed():
        input_yang_obj.route_policy = input_yang_obj.route_policy
        
    if input_yang_obj.route_filter._changed():
        input_yang_obj.route_filter = input_yang_obj.route_filter
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_ospf_import_rts(input_yang_obj: yc_ospf_import_rts_huawei_network_instance__network_instance_instances_instance_afs_af_ospf_import_rts, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/ospf-import-rts

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ospf_import_rt.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af_ospf_import_rts_ospf_import_rt(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af(input_yang_obj: yc_af_huawei_network_instance__network_instance_instances_instance_afs_af, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.route_distinguisher._changed():
        input_yang_obj.route_distinguisher = input_yang_obj.route_distinguisher
        
    if input_yang_obj.effect_route_distinguisher._changed():
        input_yang_obj.effect_route_distinguisher = input_yang_obj.effect_route_distinguisher
        
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    if input_yang_obj.export_policy_add_ert_first._changed():
        input_yang_obj.export_policy_add_ert_first = input_yang_obj.export_policy_add_ert_first
        
    if input_yang_obj.label_mode._changed():
        input_yang_obj.label_mode = input_yang_obj.label_mode
        
    if input_yang_obj.vpn_frr._changed():
        input_yang_obj.vpn_frr = input_yang_obj.vpn_frr
        
    if input_yang_obj.tunnel_policy._changed():
        input_yang_obj.tunnel_policy = input_yang_obj.tunnel_policy
        
    if input_yang_obj.transit_vpn._changed():
        input_yang_obj.transit_vpn = input_yang_obj.transit_vpn
        
    if input_yang_obj.lsp_operation._changed():
        input_yang_obj.lsp_operation = input_yang_obj.lsp_operation
        
    if input_yang_obj.default_color._changed():
        input_yang_obj.default_color = input_yang_obj.default_color
        
    innerobj = _translate__network_instance_instances_instance_afs_af_vpn_targets(input_yang_obj.vpn_targets, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_afs_af_state(input_yang_obj.state, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_afs_af_tunnel_infos(input_yang_obj.tunnel_infos, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_afs_af_ospf_import_rts(input_yang_obj.ospf_import_rts, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs(input_yang_obj: yc_afs_huawei_network_instance__network_instance_instances_instance_afs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.af.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_gtsm(input_yang_obj: yc_gtsm_huawei_network_instance__network_instance_instances_instance_ospfv2_gtsm, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/gtsm

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hops._changed():
        input_yang_obj.hops = input_yang_obj.hops
        
    if input_yang_obj.nonstandard_multicast._changed():
        input_yang_obj.nonstandard_multicast = input_yang_obj.nonstandard_multicast
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id(input_yang_obj: yc_domain_id_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net/domain-id

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.domain_id._changed():
        input_yang_obj.domain_id = input_yang_obj.domain_id
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    if input_yang_obj.value._changed():
        input_yang_obj.value = input_yang_obj.value
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys_domain_id_secondary(input_yang_obj: yc_domain_id_secondary_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys_domain_id_secondary, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net/domain-id-secondarys/domain-id-secondary

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys(input_yang_obj: yc_domain_id_secondarys_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net/domain-id-secondarys

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.domain_id_secondary.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys_domain_id_secondary(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net(input_yang_obj: yc_private_net_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.eca_route._changed():
        input_yang_obj.eca_route = input_yang_obj.eca_route
        
    if input_yang_obj.disable._changed():
        input_yang_obj.disable = input_yang_obj.disable
        
    if input_yang_obj.value._changed():
        input_yang_obj.value = input_yang_obj.value
        
    if input_yang_obj.vpn_capability._changed():
        input_yang_obj.vpn_capability = input_yang_obj.vpn_capability
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id(input_yang_obj.domain_id, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys(input_yang_obj.domain_id_secondarys, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_host_name(input_yang_obj: yc_host_name_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_host_name, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/host-name

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.value._changed():
        input_yang_obj.value = input_yang_obj.value
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bandwidth(input_yang_obj: yc_bandwidth_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bandwidth, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bandwidth

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.config_bw_enable._changed():
        input_yang_obj.config_bw_enable = input_yang_obj.config_bw_enable
        
    if input_yang_obj.reference_value._changed():
        input_yang_obj.reference_value = input_yang_obj.reference_value
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arrival(input_yang_obj: yc_lsa_arrival_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arrival, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-arrival

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.max_interval._changed():
        input_yang_obj.max_interval = input_yang_obj.max_interval
        
    if input_yang_obj.start_interval._changed():
        input_yang_obj.start_interval = input_yang_obj.start_interval
        
    if input_yang_obj.hold_interval._changed():
        input_yang_obj.hold_interval = input_yang_obj.hold_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arr_supp_flap(input_yang_obj: yc_lsa_arr_supp_flap_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arr_supp_flap, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-arr-supp-flap

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.threshold_count._changed():
        input_yang_obj.threshold_count = input_yang_obj.threshold_count
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_originate(input_yang_obj: yc_lsa_originate_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_originate, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-originate

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.other_type_interval._changed():
        input_yang_obj.other_type_interval = input_yang_obj.other_type_interval
        
    if input_yang_obj.max_interval._changed():
        input_yang_obj.max_interval = input_yang_obj.max_interval
        
    if input_yang_obj.start_interval._changed():
        input_yang_obj.start_interval = input_yang_obj.start_interval
        
    if input_yang_obj.hold_interval._changed():
        input_yang_obj.hold_interval = input_yang_obj.hold_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_org_supp_flap(input_yang_obj: yc_lsa_org_supp_flap_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_org_supp_flap, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-org-supp-flap

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.threshold_count._changed():
        input_yang_obj.threshold_count = input_yang_obj.threshold_count
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_spf_schedule(input_yang_obj: yc_spf_schedule_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_spf_schedule, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/spf-schedule

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.max_interval._changed():
        input_yang_obj.max_interval = input_yang_obj.max_interval
        
    if input_yang_obj.start_interval._changed():
        input_yang_obj.start_interval = input_yang_obj.start_interval
        
    if input_yang_obj.hold_interval._changed():
        input_yang_obj.hold_interval = input_yang_obj.hold_interval
        
    if input_yang_obj.conserv_flag._changed():
        input_yang_obj.conserv_flag = input_yang_obj.conserv_flag
        
    if input_yang_obj.millisecond._changed():
        input_yang_obj.millisecond = input_yang_obj.millisecond
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer(input_yang_obj: yc_timer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arrival(input_yang_obj.lsa_arrival, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arr_supp_flap(input_yang_obj.lsa_arr_supp_flap, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_originate(input_yang_obj.lsa_originate, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_org_supp_flap(input_yang_obj.lsa_org_supp_flap, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_spf_schedule(input_yang_obj.spf_schedule, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bfd(input_yang_obj: yc_bfd_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bfd, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bfd

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.min_rx._changed():
        input_yang_obj.min_rx = input_yang_obj.min_rx
        
    if input_yang_obj.min_tx._changed():
        input_yang_obj.min_tx = input_yang_obj.min_tx
        
    if input_yang_obj.detect_multiplier._changed():
        input_yang_obj.detect_multiplier = input_yang_obj.detect_multiplier
        
    if input_yang_obj.incr_cost._changed():
        input_yang_obj.incr_cost = input_yang_obj.incr_cost
        
    if input_yang_obj.frr_binding._changed():
        input_yang_obj.frr_binding = input_yang_obj.frr_binding
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_metric_delay(input_yang_obj: yc_metric_delay_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_metric_delay, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/metric-delay

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.adv_enable._changed():
        input_yang_obj.adv_enable = input_yang_obj.adv_enable
        
    if input_yang_obj.suppress_timer._changed():
        input_yang_obj.suppress_timer = input_yang_obj.suppress_timer
        
    if input_yang_obj.suppress_percent._changed():
        input_yang_obj.suppress_percent = input_yang_obj.suppress_percent
        
    if input_yang_obj.suppress_absolute._changed():
        input_yang_obj.suppress_absolute = input_yang_obj.suppress_absolute
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bier(input_yang_obj: yc_bier_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bier, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_stub_router(input_yang_obj: yc_stub_router_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_stub_router, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/stub-router

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.flag._changed():
        input_yang_obj.flag = input_yang_obj.flag
        
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.include_stub._changed():
        input_yang_obj.include_stub = input_yang_obj.include_stub
        
    if input_yang_obj.external_lsa._changed():
        input_yang_obj.external_lsa = input_yang_obj.external_lsa
        
    if input_yang_obj.external_cost._changed():
        input_yang_obj.external_cost = input_yang_obj.external_cost
        
    if input_yang_obj.summary_lsa._changed():
        input_yang_obj.summary_lsa = input_yang_obj.summary_lsa
        
    if input_yang_obj.summary_cost._changed():
        input_yang_obj.summary_cost = input_yang_obj.summary_cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bgp_ls(input_yang_obj: yc_bgp_ls_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bgp_ls, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bgp-ls

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.identifier._changed():
        input_yang_obj.identifier = input_yang_obj.identifier
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_import_limit(input_yang_obj: yc_import_limit_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_import_limit, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/import-limit

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.max_number._changed():
        input_yang_obj.max_number = input_yang_obj.max_number
        
    if input_yang_obj.threshold_upper._changed():
        input_yang_obj.threshold_upper = input_yang_obj.threshold_upper
        
    if input_yang_obj.threshold_lower._changed():
        input_yang_obj.threshold_lower = input_yang_obj.threshold_lower
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_spf_control(input_yang_obj: yc_spf_control_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_spf_control, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/spf-control

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.max_load_balancing._changed():
        input_yang_obj.max_load_balancing = input_yang_obj.max_load_balancing
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_default_para(input_yang_obj: yc_default_para_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_default_para, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/default-para

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost_value._changed():
        input_yang_obj.cost_value = input_yang_obj.cost_value
        
    if input_yang_obj.cost_inherit_metric._changed():
        input_yang_obj.cost_inherit_metric = input_yang_obj.cost_inherit_metric
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_avoid_micro_loop(input_yang_obj: yc_avoid_micro_loop_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_avoid_micro_loop, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/avoid-micro-loop

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.frr_enable._changed():
        input_yang_obj.frr_enable = input_yang_obj.frr_enable
        
    if input_yang_obj.frr_rib_update_delay._changed():
        input_yang_obj.frr_rib_update_delay = input_yang_obj.frr_rib_update_delay
        
    if input_yang_obj.te_tunnel_enable._changed():
        input_yang_obj.te_tunnel_enable = input_yang_obj.te_tunnel_enable
        
    if input_yang_obj.te_tunnel_rib_update_delay._changed():
        input_yang_obj.te_tunnel_rib_update_delay = input_yang_obj.te_tunnel_rib_update_delay
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs_asbr_summary_prefix(input_yang_obj: yc_asbr_summary_prefix_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs_asbr_summary_prefix, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/asbr-summary-prefixs/asbr-summary-prefix

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.distribute_delay._changed():
        input_yang_obj.distribute_delay = input_yang_obj.distribute_delay
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.advertise._changed():
        input_yang_obj.advertise = input_yang_obj.advertise
        
    if input_yang_obj.generate_null_zero._changed():
        input_yang_obj.generate_null_zero = input_yang_obj.generate_null_zero
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs(input_yang_obj: yc_asbr_summary_prefixs_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/asbr-summary-prefixs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.asbr_summary_prefix.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs_asbr_summary_prefix(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_summary(input_yang_obj: yc_summary_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_summary, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/summary

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_no_summary(input_yang_obj: yc_no_summary_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_no_summary, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/no-summary

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    if input_yang_obj.distribute_delay._changed():
        input_yang_obj.distribute_delay = input_yang_obj.distribute_delay
        
    if input_yang_obj.permit_calculate_other._changed():
        input_yang_obj.permit_calculate_other = input_yang_obj.permit_calculate_other
        
    if input_yang_obj.permit_ibgp._changed():
        input_yang_obj.permit_ibgp = input_yang_obj.permit_ibgp
        
    if input_yang_obj.always._changed():
        input_yang_obj.always = input_yang_obj.always
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_route_preferences_route_preference(input_yang_obj: yc_route_preference_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_route_preferences_route_preference, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/route-preferences/route-preference

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.preference._changed():
        input_yang_obj.preference = input_yang_obj.preference
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_route_preferences(input_yang_obj: yc_route_preferences_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_route_preferences, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/route-preferences

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_preference.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_route_preferences_route_preference(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights_nexthop_weight(input_yang_obj: yc_nexthop_weight_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights_nexthop_weight, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/nexthop-weights/nexthop-weight

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.weight._changed():
        input_yang_obj.weight = input_yang_obj.weight
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights(input_yang_obj: yc_nexthop_weights_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/nexthop-weights

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.nexthop_weight.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights_nexthop_weight(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys_prefix_priority(input_yang_obj: yc_prefix_priority_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys_prefix_priority, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/prefix-prioritys/prefix-priority

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys(input_yang_obj: yc_prefix_prioritys_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/prefix-prioritys

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.prefix_priority.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys_prefix_priority(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_ecmp_prefer(input_yang_obj: yc_ecmp_prefer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_ecmp_prefer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/ecmp-prefer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.te_tunnel._changed():
        input_yang_obj.te_tunnel = input_yang_obj.te_tunnel
        
    if input_yang_obj.intact._changed():
        input_yang_obj.intact = input_yang_obj.intact
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr_tiebreaker(input_yang_obj: yc_tiebreaker_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr_tiebreaker, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr/tiebreaker

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.node_protect._changed():
        input_yang_obj.node_protect = input_yang_obj.node_protect
        
    if input_yang_obj.lowest_cost._changed():
        input_yang_obj.lowest_cost = input_yang_obj.lowest_cost
        
    if input_yang_obj.ldp_sync._changed():
        input_yang_obj.ldp_sync = input_yang_obj.ldp_sync
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr_route_policy(input_yang_obj: yc_route_policy_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr_route_policy, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr/route-policy

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr_rlfa_tunnel(input_yang_obj: yc_rlfa_tunnel_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr_rlfa_tunnel, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr/rlfa-tunnel

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.ip_prefix_name._changed():
        input_yang_obj.ip_prefix_name = input_yang_obj.ip_prefix_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr(input_yang_obj: yc_frr_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.lfa_enable._changed():
        input_yang_obj.lfa_enable = input_yang_obj.lfa_enable
        
    if input_yang_obj.rlfa_enable._changed():
        input_yang_obj.rlfa_enable = input_yang_obj.rlfa_enable
        
    if input_yang_obj.rlfa_max_cost._changed():
        input_yang_obj.rlfa_max_cost = input_yang_obj.rlfa_max_cost
        
    if input_yang_obj.tilfa_enable._changed():
        input_yang_obj.tilfa_enable = input_yang_obj.tilfa_enable
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_frr_tiebreaker(input_yang_obj.tiebreaker, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_frr_route_policy(input_yang_obj.route_policy, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_frr_rlfa_tunnel(input_yang_obj.rlfa_tunnel, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_local_mt_filter(input_yang_obj: yc_local_mt_filter_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_local_mt_filter, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/local-mt-filter

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.acl_name_or_num._changed():
        input_yang_obj.acl_name_or_num = input_yang_obj.acl_name_or_num
        
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_peers_peer(input_yang_obj: yc_peer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_peers_peer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/peers/peer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.priority._changed():
        input_yang_obj.priority = input_yang_obj.priority
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_peers(input_yang_obj: yc_peers_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_peers, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/peers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.peer.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_peers_peer(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_global(input_yang_obj: yc_global__huawei_network_instance__network_instance_global, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/global

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cfg_router_id._changed():
        input_yang_obj.cfg_router_id = input_yang_obj.cfg_router_id
        
    if input_yang_obj.as_notation_plain._changed():
        input_yang_obj.as_notation_plain = input_yang_obj.as_notation_plain
        
    if input_yang_obj.route_distinguisher_auto_ip._changed():
        input_yang_obj.route_distinguisher_auto_ip = input_yang_obj.route_distinguisher_auto_ip
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_parameter(input_yang_obj: yc_parameter_huawei_network_instance__network_instance_instances_instance_parameter, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/parameter

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.identifier._changed():
        input_yang_obj.identifier = input_yang_obj.identifier
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_vpn_targets_vpn_target(input_yang_obj: yc_vpn_target_huawei_network_instance__network_instance_instances_instance_afs_af_vpn_targets_vpn_target, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_vpn_targets(input_yang_obj: yc_vpn_targets_huawei_network_instance__network_instance_instances_instance_afs_af_vpn_targets, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_state(input_yang_obj: yc_state_huawei_network_instance__network_instance_instances_instance_afs_af_state, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/state

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.create_time._changed():
        input_yang_obj.create_time = input_yang_obj.create_time
        
    if input_yang_obj.up_time._changed():
        input_yang_obj.up_time = input_yang_obj.up_time
        
    if input_yang_obj.label._changed():
        input_yang_obj.label = input_yang_obj.label
        
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_tunnel_infos_tunnel_info(input_yang_obj: yc_tunnel_info_huawei_network_instance__network_instance_instances_instance_afs_af_tunnel_infos_tunnel_info, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/tunnel-infos/tunnel-info

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.color._changed():
        input_yang_obj.color = input_yang_obj.color
        
    if input_yang_obj.name._changed():
        input_yang_obj.name = input_yang_obj.name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_tunnel_infos(input_yang_obj: yc_tunnel_infos_huawei_network_instance__network_instance_instances_instance_afs_af_tunnel_infos, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/tunnel-infos

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.tunnel_info.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af_tunnel_infos_tunnel_info(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_ospf_import_rts_ospf_import_rt(input_yang_obj: yc_ospf_import_rt_huawei_network_instance__network_instance_instances_instance_afs_af_ospf_import_rts_ospf_import_rt, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/ospf-import-rts/ospf-import-rt

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.valid_route._changed():
        input_yang_obj.valid_route = input_yang_obj.valid_route
        
    if input_yang_obj.route_policy._changed():
        input_yang_obj.route_policy = input_yang_obj.route_policy
        
    if input_yang_obj.route_filter._changed():
        input_yang_obj.route_filter = input_yang_obj.route_filter
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_ospf_import_rts(input_yang_obj: yc_ospf_import_rts_huawei_network_instance__network_instance_instances_instance_afs_af_ospf_import_rts, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/ospf-import-rts

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ospf_import_rt.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af_ospf_import_rts_ospf_import_rt(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af(input_yang_obj: yc_af_huawei_network_instance__network_instance_instances_instance_afs_af, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.route_distinguisher._changed():
        input_yang_obj.route_distinguisher = input_yang_obj.route_distinguisher
        
    if input_yang_obj.effect_route_distinguisher._changed():
        input_yang_obj.effect_route_distinguisher = input_yang_obj.effect_route_distinguisher
        
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    if input_yang_obj.export_policy_add_ert_first._changed():
        input_yang_obj.export_policy_add_ert_first = input_yang_obj.export_policy_add_ert_first
        
    if input_yang_obj.label_mode._changed():
        input_yang_obj.label_mode = input_yang_obj.label_mode
        
    if input_yang_obj.vpn_frr._changed():
        input_yang_obj.vpn_frr = input_yang_obj.vpn_frr
        
    if input_yang_obj.tunnel_policy._changed():
        input_yang_obj.tunnel_policy = input_yang_obj.tunnel_policy
        
    if input_yang_obj.transit_vpn._changed():
        input_yang_obj.transit_vpn = input_yang_obj.transit_vpn
        
    if input_yang_obj.lsp_operation._changed():
        input_yang_obj.lsp_operation = input_yang_obj.lsp_operation
        
    if input_yang_obj.default_color._changed():
        input_yang_obj.default_color = input_yang_obj.default_color
        
    innerobj = _translate__network_instance_instances_instance_afs_af_vpn_targets(input_yang_obj.vpn_targets, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_afs_af_state(input_yang_obj.state, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_afs_af_tunnel_infos(input_yang_obj.tunnel_infos, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_afs_af_ospf_import_rts(input_yang_obj.ospf_import_rts, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs(input_yang_obj: yc_afs_huawei_network_instance__network_instance_instances_instance_afs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.af.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_gtsm(input_yang_obj: yc_gtsm_huawei_network_instance__network_instance_instances_instance_ospfv2_gtsm, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/gtsm

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hops._changed():
        input_yang_obj.hops = input_yang_obj.hops
        
    if input_yang_obj.nonstandard_multicast._changed():
        input_yang_obj.nonstandard_multicast = input_yang_obj.nonstandard_multicast
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id(input_yang_obj: yc_domain_id_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net/domain-id

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.domain_id._changed():
        input_yang_obj.domain_id = input_yang_obj.domain_id
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    if input_yang_obj.value._changed():
        input_yang_obj.value = input_yang_obj.value
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys_domain_id_secondary(input_yang_obj: yc_domain_id_secondary_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys_domain_id_secondary, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net/domain-id-secondarys/domain-id-secondary

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys(input_yang_obj: yc_domain_id_secondarys_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net/domain-id-secondarys

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.domain_id_secondary.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys_domain_id_secondary(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net(input_yang_obj: yc_private_net_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.eca_route._changed():
        input_yang_obj.eca_route = input_yang_obj.eca_route
        
    if input_yang_obj.disable._changed():
        input_yang_obj.disable = input_yang_obj.disable
        
    if input_yang_obj.value._changed():
        input_yang_obj.value = input_yang_obj.value
        
    if input_yang_obj.vpn_capability._changed():
        input_yang_obj.vpn_capability = input_yang_obj.vpn_capability
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id(input_yang_obj.domain_id, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys(input_yang_obj.domain_id_secondarys, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_host_name(input_yang_obj: yc_host_name_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_host_name, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/host-name

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.value._changed():
        input_yang_obj.value = input_yang_obj.value
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bandwidth(input_yang_obj: yc_bandwidth_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bandwidth, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bandwidth

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.config_bw_enable._changed():
        input_yang_obj.config_bw_enable = input_yang_obj.config_bw_enable
        
    if input_yang_obj.reference_value._changed():
        input_yang_obj.reference_value = input_yang_obj.reference_value
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arrival(input_yang_obj: yc_lsa_arrival_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arrival, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-arrival

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.max_interval._changed():
        input_yang_obj.max_interval = input_yang_obj.max_interval
        
    if input_yang_obj.start_interval._changed():
        input_yang_obj.start_interval = input_yang_obj.start_interval
        
    if input_yang_obj.hold_interval._changed():
        input_yang_obj.hold_interval = input_yang_obj.hold_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arr_supp_flap(input_yang_obj: yc_lsa_arr_supp_flap_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arr_supp_flap, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-arr-supp-flap

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.threshold_count._changed():
        input_yang_obj.threshold_count = input_yang_obj.threshold_count
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_originate(input_yang_obj: yc_lsa_originate_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_originate, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-originate

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.other_type_interval._changed():
        input_yang_obj.other_type_interval = input_yang_obj.other_type_interval
        
    if input_yang_obj.max_interval._changed():
        input_yang_obj.max_interval = input_yang_obj.max_interval
        
    if input_yang_obj.start_interval._changed():
        input_yang_obj.start_interval = input_yang_obj.start_interval
        
    if input_yang_obj.hold_interval._changed():
        input_yang_obj.hold_interval = input_yang_obj.hold_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_org_supp_flap(input_yang_obj: yc_lsa_org_supp_flap_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_org_supp_flap, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-org-supp-flap

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.threshold_count._changed():
        input_yang_obj.threshold_count = input_yang_obj.threshold_count
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_spf_schedule(input_yang_obj: yc_spf_schedule_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_spf_schedule, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/spf-schedule

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.max_interval._changed():
        input_yang_obj.max_interval = input_yang_obj.max_interval
        
    if input_yang_obj.start_interval._changed():
        input_yang_obj.start_interval = input_yang_obj.start_interval
        
    if input_yang_obj.hold_interval._changed():
        input_yang_obj.hold_interval = input_yang_obj.hold_interval
        
    if input_yang_obj.conserv_flag._changed():
        input_yang_obj.conserv_flag = input_yang_obj.conserv_flag
        
    if input_yang_obj.millisecond._changed():
        input_yang_obj.millisecond = input_yang_obj.millisecond
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer(input_yang_obj: yc_timer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arrival(input_yang_obj.lsa_arrival, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arr_supp_flap(input_yang_obj.lsa_arr_supp_flap, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_originate(input_yang_obj.lsa_originate, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_org_supp_flap(input_yang_obj.lsa_org_supp_flap, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_spf_schedule(input_yang_obj.spf_schedule, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bfd(input_yang_obj: yc_bfd_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bfd, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bfd

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.min_rx._changed():
        input_yang_obj.min_rx = input_yang_obj.min_rx
        
    if input_yang_obj.min_tx._changed():
        input_yang_obj.min_tx = input_yang_obj.min_tx
        
    if input_yang_obj.detect_multiplier._changed():
        input_yang_obj.detect_multiplier = input_yang_obj.detect_multiplier
        
    if input_yang_obj.incr_cost._changed():
        input_yang_obj.incr_cost = input_yang_obj.incr_cost
        
    if input_yang_obj.frr_binding._changed():
        input_yang_obj.frr_binding = input_yang_obj.frr_binding
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_metric_delay(input_yang_obj: yc_metric_delay_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_metric_delay, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/metric-delay

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.adv_enable._changed():
        input_yang_obj.adv_enable = input_yang_obj.adv_enable
        
    if input_yang_obj.suppress_timer._changed():
        input_yang_obj.suppress_timer = input_yang_obj.suppress_timer
        
    if input_yang_obj.suppress_percent._changed():
        input_yang_obj.suppress_percent = input_yang_obj.suppress_percent
        
    if input_yang_obj.suppress_absolute._changed():
        input_yang_obj.suppress_absolute = input_yang_obj.suppress_absolute
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bier(input_yang_obj: yc_bier_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bier, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_stub_router(input_yang_obj: yc_stub_router_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_stub_router, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/stub-router

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.flag._changed():
        input_yang_obj.flag = input_yang_obj.flag
        
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.include_stub._changed():
        input_yang_obj.include_stub = input_yang_obj.include_stub
        
    if input_yang_obj.external_lsa._changed():
        input_yang_obj.external_lsa = input_yang_obj.external_lsa
        
    if input_yang_obj.external_cost._changed():
        input_yang_obj.external_cost = input_yang_obj.external_cost
        
    if input_yang_obj.summary_lsa._changed():
        input_yang_obj.summary_lsa = input_yang_obj.summary_lsa
        
    if input_yang_obj.summary_cost._changed():
        input_yang_obj.summary_cost = input_yang_obj.summary_cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bgp_ls(input_yang_obj: yc_bgp_ls_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bgp_ls, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bgp-ls

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.identifier._changed():
        input_yang_obj.identifier = input_yang_obj.identifier
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_import_limit(input_yang_obj: yc_import_limit_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_import_limit, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/import-limit

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.max_number._changed():
        input_yang_obj.max_number = input_yang_obj.max_number
        
    if input_yang_obj.threshold_upper._changed():
        input_yang_obj.threshold_upper = input_yang_obj.threshold_upper
        
    if input_yang_obj.threshold_lower._changed():
        input_yang_obj.threshold_lower = input_yang_obj.threshold_lower
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_spf_control(input_yang_obj: yc_spf_control_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_spf_control, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/spf-control

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.max_load_balancing._changed():
        input_yang_obj.max_load_balancing = input_yang_obj.max_load_balancing
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_default_para(input_yang_obj: yc_default_para_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_default_para, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/default-para

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost_value._changed():
        input_yang_obj.cost_value = input_yang_obj.cost_value
        
    if input_yang_obj.cost_inherit_metric._changed():
        input_yang_obj.cost_inherit_metric = input_yang_obj.cost_inherit_metric
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_avoid_micro_loop(input_yang_obj: yc_avoid_micro_loop_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_avoid_micro_loop, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/avoid-micro-loop

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.frr_enable._changed():
        input_yang_obj.frr_enable = input_yang_obj.frr_enable
        
    if input_yang_obj.frr_rib_update_delay._changed():
        input_yang_obj.frr_rib_update_delay = input_yang_obj.frr_rib_update_delay
        
    if input_yang_obj.te_tunnel_enable._changed():
        input_yang_obj.te_tunnel_enable = input_yang_obj.te_tunnel_enable
        
    if input_yang_obj.te_tunnel_rib_update_delay._changed():
        input_yang_obj.te_tunnel_rib_update_delay = input_yang_obj.te_tunnel_rib_update_delay
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs_asbr_summary_prefix(input_yang_obj: yc_asbr_summary_prefix_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs_asbr_summary_prefix, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/asbr-summary-prefixs/asbr-summary-prefix

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.distribute_delay._changed():
        input_yang_obj.distribute_delay = input_yang_obj.distribute_delay
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.advertise._changed():
        input_yang_obj.advertise = input_yang_obj.advertise
        
    if input_yang_obj.generate_null_zero._changed():
        input_yang_obj.generate_null_zero = input_yang_obj.generate_null_zero
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs(input_yang_obj: yc_asbr_summary_prefixs_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/asbr-summary-prefixs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.asbr_summary_prefix.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs_asbr_summary_prefix(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_summary(input_yang_obj: yc_summary_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_summary, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/summary

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_no_summary(input_yang_obj: yc_no_summary_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_no_summary, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/no-summary

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    if input_yang_obj.distribute_delay._changed():
        input_yang_obj.distribute_delay = input_yang_obj.distribute_delay
        
    if input_yang_obj.permit_calculate_other._changed():
        input_yang_obj.permit_calculate_other = input_yang_obj.permit_calculate_other
        
    if input_yang_obj.permit_ibgp._changed():
        input_yang_obj.permit_ibgp = input_yang_obj.permit_ibgp
        
    if input_yang_obj.always._changed():
        input_yang_obj.always = input_yang_obj.always
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_route_preferences_route_preference(input_yang_obj: yc_route_preference_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_route_preferences_route_preference, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/route-preferences/route-preference

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.preference._changed():
        input_yang_obj.preference = input_yang_obj.preference
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_route_preferences(input_yang_obj: yc_route_preferences_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_route_preferences, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/route-preferences

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_preference.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_route_preferences_route_preference(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights_nexthop_weight(input_yang_obj: yc_nexthop_weight_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights_nexthop_weight, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/nexthop-weights/nexthop-weight

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.weight._changed():
        input_yang_obj.weight = input_yang_obj.weight
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights(input_yang_obj: yc_nexthop_weights_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/nexthop-weights

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.nexthop_weight.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights_nexthop_weight(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys_prefix_priority(input_yang_obj: yc_prefix_priority_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys_prefix_priority, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/prefix-prioritys/prefix-priority

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys(input_yang_obj: yc_prefix_prioritys_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/prefix-prioritys

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.prefix_priority.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys_prefix_priority(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_ecmp_prefer(input_yang_obj: yc_ecmp_prefer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_ecmp_prefer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/ecmp-prefer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.te_tunnel._changed():
        input_yang_obj.te_tunnel = input_yang_obj.te_tunnel
        
    if input_yang_obj.intact._changed():
        input_yang_obj.intact = input_yang_obj.intact
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr_tiebreaker(input_yang_obj: yc_tiebreaker_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr_tiebreaker, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr/tiebreaker

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.node_protect._changed():
        input_yang_obj.node_protect = input_yang_obj.node_protect
        
    if input_yang_obj.lowest_cost._changed():
        input_yang_obj.lowest_cost = input_yang_obj.lowest_cost
        
    if input_yang_obj.ldp_sync._changed():
        input_yang_obj.ldp_sync = input_yang_obj.ldp_sync
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr_route_policy(input_yang_obj: yc_route_policy_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr_route_policy, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr/route-policy

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr_rlfa_tunnel(input_yang_obj: yc_rlfa_tunnel_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr_rlfa_tunnel, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr/rlfa-tunnel

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.ip_prefix_name._changed():
        input_yang_obj.ip_prefix_name = input_yang_obj.ip_prefix_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr(input_yang_obj: yc_frr_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.lfa_enable._changed():
        input_yang_obj.lfa_enable = input_yang_obj.lfa_enable
        
    if input_yang_obj.rlfa_enable._changed():
        input_yang_obj.rlfa_enable = input_yang_obj.rlfa_enable
        
    if input_yang_obj.rlfa_max_cost._changed():
        input_yang_obj.rlfa_max_cost = input_yang_obj.rlfa_max_cost
        
    if input_yang_obj.tilfa_enable._changed():
        input_yang_obj.tilfa_enable = input_yang_obj.tilfa_enable
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_frr_tiebreaker(input_yang_obj.tiebreaker, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_frr_route_policy(input_yang_obj.route_policy, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_frr_rlfa_tunnel(input_yang_obj.rlfa_tunnel, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_local_mt_filter(input_yang_obj: yc_local_mt_filter_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_local_mt_filter, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/local-mt-filter

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.acl_name_or_num._changed():
        input_yang_obj.acl_name_or_num = input_yang_obj.acl_name_or_num
        
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_peers_peer(input_yang_obj: yc_peer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_peers_peer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/peers/peer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.priority._changed():
        input_yang_obj.priority = input_yang_obj.priority
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_peers(input_yang_obj: yc_peers_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_peers, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/peers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.peer.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_peers_peer(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_global(input_yang_obj: yc_global__huawei_network_instance__network_instance_global, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/global

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cfg_router_id._changed():
        input_yang_obj.cfg_router_id = input_yang_obj.cfg_router_id
        
    if input_yang_obj.as_notation_plain._changed():
        input_yang_obj.as_notation_plain = input_yang_obj.as_notation_plain
        
    if input_yang_obj.route_distinguisher_auto_ip._changed():
        input_yang_obj.route_distinguisher_auto_ip = input_yang_obj.route_distinguisher_auto_ip
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_parameter(input_yang_obj: yc_parameter_huawei_network_instance__network_instance_instances_instance_parameter, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/parameter

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.identifier._changed():
        input_yang_obj.identifier = input_yang_obj.identifier
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_vpn_targets_vpn_target(input_yang_obj: yc_vpn_target_huawei_network_instance__network_instance_instances_instance_afs_af_vpn_targets_vpn_target, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_vpn_targets(input_yang_obj: yc_vpn_targets_huawei_network_instance__network_instance_instances_instance_afs_af_vpn_targets, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_state(input_yang_obj: yc_state_huawei_network_instance__network_instance_instances_instance_afs_af_state, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/state

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.create_time._changed():
        input_yang_obj.create_time = input_yang_obj.create_time
        
    if input_yang_obj.up_time._changed():
        input_yang_obj.up_time = input_yang_obj.up_time
        
    if input_yang_obj.label._changed():
        input_yang_obj.label = input_yang_obj.label
        
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_tunnel_infos_tunnel_info(input_yang_obj: yc_tunnel_info_huawei_network_instance__network_instance_instances_instance_afs_af_tunnel_infos_tunnel_info, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/tunnel-infos/tunnel-info

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.color._changed():
        input_yang_obj.color = input_yang_obj.color
        
    if input_yang_obj.name._changed():
        input_yang_obj.name = input_yang_obj.name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_tunnel_infos(input_yang_obj: yc_tunnel_infos_huawei_network_instance__network_instance_instances_instance_afs_af_tunnel_infos, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/tunnel-infos

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.tunnel_info.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af_tunnel_infos_tunnel_info(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_ospf_import_rts_ospf_import_rt(input_yang_obj: yc_ospf_import_rt_huawei_network_instance__network_instance_instances_instance_afs_af_ospf_import_rts_ospf_import_rt, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/ospf-import-rts/ospf-import-rt

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.valid_route._changed():
        input_yang_obj.valid_route = input_yang_obj.valid_route
        
    if input_yang_obj.route_policy._changed():
        input_yang_obj.route_policy = input_yang_obj.route_policy
        
    if input_yang_obj.route_filter._changed():
        input_yang_obj.route_filter = input_yang_obj.route_filter
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_ospf_import_rts(input_yang_obj: yc_ospf_import_rts_huawei_network_instance__network_instance_instances_instance_afs_af_ospf_import_rts, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/ospf-import-rts

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ospf_import_rt.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af_ospf_import_rts_ospf_import_rt(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af(input_yang_obj: yc_af_huawei_network_instance__network_instance_instances_instance_afs_af, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.route_distinguisher._changed():
        input_yang_obj.route_distinguisher = input_yang_obj.route_distinguisher
        
    if input_yang_obj.effect_route_distinguisher._changed():
        input_yang_obj.effect_route_distinguisher = input_yang_obj.effect_route_distinguisher
        
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    if input_yang_obj.export_policy_add_ert_first._changed():
        input_yang_obj.export_policy_add_ert_first = input_yang_obj.export_policy_add_ert_first
        
    if input_yang_obj.label_mode._changed():
        input_yang_obj.label_mode = input_yang_obj.label_mode
        
    if input_yang_obj.vpn_frr._changed():
        input_yang_obj.vpn_frr = input_yang_obj.vpn_frr
        
    if input_yang_obj.tunnel_policy._changed():
        input_yang_obj.tunnel_policy = input_yang_obj.tunnel_policy
        
    if input_yang_obj.transit_vpn._changed():
        input_yang_obj.transit_vpn = input_yang_obj.transit_vpn
        
    if input_yang_obj.lsp_operation._changed():
        input_yang_obj.lsp_operation = input_yang_obj.lsp_operation
        
    if input_yang_obj.default_color._changed():
        input_yang_obj.default_color = input_yang_obj.default_color
        
    innerobj = _translate__network_instance_instances_instance_afs_af_vpn_targets(input_yang_obj.vpn_targets, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_afs_af_state(input_yang_obj.state, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_afs_af_tunnel_infos(input_yang_obj.tunnel_infos, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_afs_af_ospf_import_rts(input_yang_obj.ospf_import_rts, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs(input_yang_obj: yc_afs_huawei_network_instance__network_instance_instances_instance_afs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.af.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_gtsm(input_yang_obj: yc_gtsm_huawei_network_instance__network_instance_instances_instance_ospfv2_gtsm, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/gtsm

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hops._changed():
        input_yang_obj.hops = input_yang_obj.hops
        
    if input_yang_obj.nonstandard_multicast._changed():
        input_yang_obj.nonstandard_multicast = input_yang_obj.nonstandard_multicast
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id(input_yang_obj: yc_domain_id_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net/domain-id

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.domain_id._changed():
        input_yang_obj.domain_id = input_yang_obj.domain_id
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    if input_yang_obj.value._changed():
        input_yang_obj.value = input_yang_obj.value
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys_domain_id_secondary(input_yang_obj: yc_domain_id_secondary_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys_domain_id_secondary, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net/domain-id-secondarys/domain-id-secondary

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys(input_yang_obj: yc_domain_id_secondarys_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net/domain-id-secondarys

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.domain_id_secondary.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys_domain_id_secondary(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net(input_yang_obj: yc_private_net_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.eca_route._changed():
        input_yang_obj.eca_route = input_yang_obj.eca_route
        
    if input_yang_obj.disable._changed():
        input_yang_obj.disable = input_yang_obj.disable
        
    if input_yang_obj.value._changed():
        input_yang_obj.value = input_yang_obj.value
        
    if input_yang_obj.vpn_capability._changed():
        input_yang_obj.vpn_capability = input_yang_obj.vpn_capability
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id(input_yang_obj.domain_id, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys(input_yang_obj.domain_id_secondarys, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_host_name(input_yang_obj: yc_host_name_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_host_name, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/host-name

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.value._changed():
        input_yang_obj.value = input_yang_obj.value
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bandwidth(input_yang_obj: yc_bandwidth_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bandwidth, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bandwidth

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.config_bw_enable._changed():
        input_yang_obj.config_bw_enable = input_yang_obj.config_bw_enable
        
    if input_yang_obj.reference_value._changed():
        input_yang_obj.reference_value = input_yang_obj.reference_value
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arrival(input_yang_obj: yc_lsa_arrival_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arrival, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-arrival

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.max_interval._changed():
        input_yang_obj.max_interval = input_yang_obj.max_interval
        
    if input_yang_obj.start_interval._changed():
        input_yang_obj.start_interval = input_yang_obj.start_interval
        
    if input_yang_obj.hold_interval._changed():
        input_yang_obj.hold_interval = input_yang_obj.hold_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arr_supp_flap(input_yang_obj: yc_lsa_arr_supp_flap_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arr_supp_flap, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-arr-supp-flap

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.threshold_count._changed():
        input_yang_obj.threshold_count = input_yang_obj.threshold_count
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_originate(input_yang_obj: yc_lsa_originate_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_originate, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-originate

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.other_type_interval._changed():
        input_yang_obj.other_type_interval = input_yang_obj.other_type_interval
        
    if input_yang_obj.max_interval._changed():
        input_yang_obj.max_interval = input_yang_obj.max_interval
        
    if input_yang_obj.start_interval._changed():
        input_yang_obj.start_interval = input_yang_obj.start_interval
        
    if input_yang_obj.hold_interval._changed():
        input_yang_obj.hold_interval = input_yang_obj.hold_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_org_supp_flap(input_yang_obj: yc_lsa_org_supp_flap_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_org_supp_flap, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-org-supp-flap

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.threshold_count._changed():
        input_yang_obj.threshold_count = input_yang_obj.threshold_count
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_spf_schedule(input_yang_obj: yc_spf_schedule_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_spf_schedule, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/spf-schedule

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.max_interval._changed():
        input_yang_obj.max_interval = input_yang_obj.max_interval
        
    if input_yang_obj.start_interval._changed():
        input_yang_obj.start_interval = input_yang_obj.start_interval
        
    if input_yang_obj.hold_interval._changed():
        input_yang_obj.hold_interval = input_yang_obj.hold_interval
        
    if input_yang_obj.conserv_flag._changed():
        input_yang_obj.conserv_flag = input_yang_obj.conserv_flag
        
    if input_yang_obj.millisecond._changed():
        input_yang_obj.millisecond = input_yang_obj.millisecond
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer(input_yang_obj: yc_timer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arrival(input_yang_obj.lsa_arrival, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arr_supp_flap(input_yang_obj.lsa_arr_supp_flap, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_originate(input_yang_obj.lsa_originate, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_org_supp_flap(input_yang_obj.lsa_org_supp_flap, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_spf_schedule(input_yang_obj.spf_schedule, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bfd(input_yang_obj: yc_bfd_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bfd, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bfd

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.min_rx._changed():
        input_yang_obj.min_rx = input_yang_obj.min_rx
        
    if input_yang_obj.min_tx._changed():
        input_yang_obj.min_tx = input_yang_obj.min_tx
        
    if input_yang_obj.detect_multiplier._changed():
        input_yang_obj.detect_multiplier = input_yang_obj.detect_multiplier
        
    if input_yang_obj.incr_cost._changed():
        input_yang_obj.incr_cost = input_yang_obj.incr_cost
        
    if input_yang_obj.frr_binding._changed():
        input_yang_obj.frr_binding = input_yang_obj.frr_binding
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_metric_delay(input_yang_obj: yc_metric_delay_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_metric_delay, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/metric-delay

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.adv_enable._changed():
        input_yang_obj.adv_enable = input_yang_obj.adv_enable
        
    if input_yang_obj.suppress_timer._changed():
        input_yang_obj.suppress_timer = input_yang_obj.suppress_timer
        
    if input_yang_obj.suppress_percent._changed():
        input_yang_obj.suppress_percent = input_yang_obj.suppress_percent
        
    if input_yang_obj.suppress_absolute._changed():
        input_yang_obj.suppress_absolute = input_yang_obj.suppress_absolute
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bier(input_yang_obj: yc_bier_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bier, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_stub_router(input_yang_obj: yc_stub_router_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_stub_router, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/stub-router

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.flag._changed():
        input_yang_obj.flag = input_yang_obj.flag
        
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.include_stub._changed():
        input_yang_obj.include_stub = input_yang_obj.include_stub
        
    if input_yang_obj.external_lsa._changed():
        input_yang_obj.external_lsa = input_yang_obj.external_lsa
        
    if input_yang_obj.external_cost._changed():
        input_yang_obj.external_cost = input_yang_obj.external_cost
        
    if input_yang_obj.summary_lsa._changed():
        input_yang_obj.summary_lsa = input_yang_obj.summary_lsa
        
    if input_yang_obj.summary_cost._changed():
        input_yang_obj.summary_cost = input_yang_obj.summary_cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bgp_ls(input_yang_obj: yc_bgp_ls_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bgp_ls, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bgp-ls

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.identifier._changed():
        input_yang_obj.identifier = input_yang_obj.identifier
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_import_limit(input_yang_obj: yc_import_limit_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_import_limit, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/import-limit

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.max_number._changed():
        input_yang_obj.max_number = input_yang_obj.max_number
        
    if input_yang_obj.threshold_upper._changed():
        input_yang_obj.threshold_upper = input_yang_obj.threshold_upper
        
    if input_yang_obj.threshold_lower._changed():
        input_yang_obj.threshold_lower = input_yang_obj.threshold_lower
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_spf_control(input_yang_obj: yc_spf_control_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_spf_control, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/spf-control

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.max_load_balancing._changed():
        input_yang_obj.max_load_balancing = input_yang_obj.max_load_balancing
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_default_para(input_yang_obj: yc_default_para_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_default_para, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/default-para

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost_value._changed():
        input_yang_obj.cost_value = input_yang_obj.cost_value
        
    if input_yang_obj.cost_inherit_metric._changed():
        input_yang_obj.cost_inherit_metric = input_yang_obj.cost_inherit_metric
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_avoid_micro_loop(input_yang_obj: yc_avoid_micro_loop_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_avoid_micro_loop, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/avoid-micro-loop

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.frr_enable._changed():
        input_yang_obj.frr_enable = input_yang_obj.frr_enable
        
    if input_yang_obj.frr_rib_update_delay._changed():
        input_yang_obj.frr_rib_update_delay = input_yang_obj.frr_rib_update_delay
        
    if input_yang_obj.te_tunnel_enable._changed():
        input_yang_obj.te_tunnel_enable = input_yang_obj.te_tunnel_enable
        
    if input_yang_obj.te_tunnel_rib_update_delay._changed():
        input_yang_obj.te_tunnel_rib_update_delay = input_yang_obj.te_tunnel_rib_update_delay
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs_asbr_summary_prefix(input_yang_obj: yc_asbr_summary_prefix_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs_asbr_summary_prefix, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/asbr-summary-prefixs/asbr-summary-prefix

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.distribute_delay._changed():
        input_yang_obj.distribute_delay = input_yang_obj.distribute_delay
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.advertise._changed():
        input_yang_obj.advertise = input_yang_obj.advertise
        
    if input_yang_obj.generate_null_zero._changed():
        input_yang_obj.generate_null_zero = input_yang_obj.generate_null_zero
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs(input_yang_obj: yc_asbr_summary_prefixs_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/asbr-summary-prefixs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.asbr_summary_prefix.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs_asbr_summary_prefix(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_summary(input_yang_obj: yc_summary_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_summary, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/summary

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_no_summary(input_yang_obj: yc_no_summary_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_no_summary, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/no-summary

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    if input_yang_obj.distribute_delay._changed():
        input_yang_obj.distribute_delay = input_yang_obj.distribute_delay
        
    if input_yang_obj.permit_calculate_other._changed():
        input_yang_obj.permit_calculate_other = input_yang_obj.permit_calculate_other
        
    if input_yang_obj.permit_ibgp._changed():
        input_yang_obj.permit_ibgp = input_yang_obj.permit_ibgp
        
    if input_yang_obj.always._changed():
        input_yang_obj.always = input_yang_obj.always
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_route_preferences_route_preference(input_yang_obj: yc_route_preference_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_route_preferences_route_preference, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/route-preferences/route-preference

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.preference._changed():
        input_yang_obj.preference = input_yang_obj.preference
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_route_preferences(input_yang_obj: yc_route_preferences_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_route_preferences, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/route-preferences

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_preference.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_route_preferences_route_preference(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights_nexthop_weight(input_yang_obj: yc_nexthop_weight_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights_nexthop_weight, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/nexthop-weights/nexthop-weight

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.weight._changed():
        input_yang_obj.weight = input_yang_obj.weight
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights(input_yang_obj: yc_nexthop_weights_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/nexthop-weights

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.nexthop_weight.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights_nexthop_weight(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys_prefix_priority(input_yang_obj: yc_prefix_priority_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys_prefix_priority, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/prefix-prioritys/prefix-priority

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys(input_yang_obj: yc_prefix_prioritys_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/prefix-prioritys

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.prefix_priority.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys_prefix_priority(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_ecmp_prefer(input_yang_obj: yc_ecmp_prefer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_ecmp_prefer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/ecmp-prefer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.te_tunnel._changed():
        input_yang_obj.te_tunnel = input_yang_obj.te_tunnel
        
    if input_yang_obj.intact._changed():
        input_yang_obj.intact = input_yang_obj.intact
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr_tiebreaker(input_yang_obj: yc_tiebreaker_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr_tiebreaker, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr/tiebreaker

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.node_protect._changed():
        input_yang_obj.node_protect = input_yang_obj.node_protect
        
    if input_yang_obj.lowest_cost._changed():
        input_yang_obj.lowest_cost = input_yang_obj.lowest_cost
        
    if input_yang_obj.ldp_sync._changed():
        input_yang_obj.ldp_sync = input_yang_obj.ldp_sync
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr_route_policy(input_yang_obj: yc_route_policy_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr_route_policy, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr/route-policy

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr_rlfa_tunnel(input_yang_obj: yc_rlfa_tunnel_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr_rlfa_tunnel, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr/rlfa-tunnel

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.ip_prefix_name._changed():
        input_yang_obj.ip_prefix_name = input_yang_obj.ip_prefix_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr(input_yang_obj: yc_frr_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.lfa_enable._changed():
        input_yang_obj.lfa_enable = input_yang_obj.lfa_enable
        
    if input_yang_obj.rlfa_enable._changed():
        input_yang_obj.rlfa_enable = input_yang_obj.rlfa_enable
        
    if input_yang_obj.rlfa_max_cost._changed():
        input_yang_obj.rlfa_max_cost = input_yang_obj.rlfa_max_cost
        
    if input_yang_obj.tilfa_enable._changed():
        input_yang_obj.tilfa_enable = input_yang_obj.tilfa_enable
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_frr_tiebreaker(input_yang_obj.tiebreaker, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_frr_route_policy(input_yang_obj.route_policy, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_frr_rlfa_tunnel(input_yang_obj.rlfa_tunnel, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_local_mt_filter(input_yang_obj: yc_local_mt_filter_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_local_mt_filter, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/local-mt-filter

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.acl_name_or_num._changed():
        input_yang_obj.acl_name_or_num = input_yang_obj.acl_name_or_num
        
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_peers_peer(input_yang_obj: yc_peer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_peers_peer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/peers/peer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.priority._changed():
        input_yang_obj.priority = input_yang_obj.priority
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_peers(input_yang_obj: yc_peers_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_peers, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/peers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.peer.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_peers_peer(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_global(input_yang_obj: yc_global__huawei_network_instance__network_instance_global, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/global

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cfg_router_id._changed():
        input_yang_obj.cfg_router_id = input_yang_obj.cfg_router_id
        
    if input_yang_obj.as_notation_plain._changed():
        input_yang_obj.as_notation_plain = input_yang_obj.as_notation_plain
        
    if input_yang_obj.route_distinguisher_auto_ip._changed():
        input_yang_obj.route_distinguisher_auto_ip = input_yang_obj.route_distinguisher_auto_ip
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_parameter(input_yang_obj: yc_parameter_huawei_network_instance__network_instance_instances_instance_parameter, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/parameter

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.identifier._changed():
        input_yang_obj.identifier = input_yang_obj.identifier
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_vpn_targets_vpn_target(input_yang_obj: yc_vpn_target_huawei_network_instance__network_instance_instances_instance_afs_af_vpn_targets_vpn_target, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_vpn_targets(input_yang_obj: yc_vpn_targets_huawei_network_instance__network_instance_instances_instance_afs_af_vpn_targets, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_state(input_yang_obj: yc_state_huawei_network_instance__network_instance_instances_instance_afs_af_state, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/state

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.create_time._changed():
        input_yang_obj.create_time = input_yang_obj.create_time
        
    if input_yang_obj.up_time._changed():
        input_yang_obj.up_time = input_yang_obj.up_time
        
    if input_yang_obj.label._changed():
        input_yang_obj.label = input_yang_obj.label
        
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_tunnel_infos_tunnel_info(input_yang_obj: yc_tunnel_info_huawei_network_instance__network_instance_instances_instance_afs_af_tunnel_infos_tunnel_info, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/tunnel-infos/tunnel-info

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.color._changed():
        input_yang_obj.color = input_yang_obj.color
        
    if input_yang_obj.name._changed():
        input_yang_obj.name = input_yang_obj.name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_tunnel_infos(input_yang_obj: yc_tunnel_infos_huawei_network_instance__network_instance_instances_instance_afs_af_tunnel_infos, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/tunnel-infos

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.tunnel_info.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af_tunnel_infos_tunnel_info(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_ospf_import_rts_ospf_import_rt(input_yang_obj: yc_ospf_import_rt_huawei_network_instance__network_instance_instances_instance_afs_af_ospf_import_rts_ospf_import_rt, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/ospf-import-rts/ospf-import-rt

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.valid_route._changed():
        input_yang_obj.valid_route = input_yang_obj.valid_route
        
    if input_yang_obj.route_policy._changed():
        input_yang_obj.route_policy = input_yang_obj.route_policy
        
    if input_yang_obj.route_filter._changed():
        input_yang_obj.route_filter = input_yang_obj.route_filter
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_ospf_import_rts(input_yang_obj: yc_ospf_import_rts_huawei_network_instance__network_instance_instances_instance_afs_af_ospf_import_rts, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/ospf-import-rts

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ospf_import_rt.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af_ospf_import_rts_ospf_import_rt(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af(input_yang_obj: yc_af_huawei_network_instance__network_instance_instances_instance_afs_af, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.route_distinguisher._changed():
        input_yang_obj.route_distinguisher = input_yang_obj.route_distinguisher
        
    if input_yang_obj.effect_route_distinguisher._changed():
        input_yang_obj.effect_route_distinguisher = input_yang_obj.effect_route_distinguisher
        
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    if input_yang_obj.export_policy_add_ert_first._changed():
        input_yang_obj.export_policy_add_ert_first = input_yang_obj.export_policy_add_ert_first
        
    if input_yang_obj.label_mode._changed():
        input_yang_obj.label_mode = input_yang_obj.label_mode
        
    if input_yang_obj.vpn_frr._changed():
        input_yang_obj.vpn_frr = input_yang_obj.vpn_frr
        
    if input_yang_obj.tunnel_policy._changed():
        input_yang_obj.tunnel_policy = input_yang_obj.tunnel_policy
        
    if input_yang_obj.transit_vpn._changed():
        input_yang_obj.transit_vpn = input_yang_obj.transit_vpn
        
    if input_yang_obj.lsp_operation._changed():
        input_yang_obj.lsp_operation = input_yang_obj.lsp_operation
        
    if input_yang_obj.default_color._changed():
        input_yang_obj.default_color = input_yang_obj.default_color
        
    innerobj = _translate__network_instance_instances_instance_afs_af_vpn_targets(input_yang_obj.vpn_targets, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_afs_af_state(input_yang_obj.state, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_afs_af_tunnel_infos(input_yang_obj.tunnel_infos, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_afs_af_ospf_import_rts(input_yang_obj.ospf_import_rts, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs(input_yang_obj: yc_afs_huawei_network_instance__network_instance_instances_instance_afs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.af.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_gtsm(input_yang_obj: yc_gtsm_huawei_network_instance__network_instance_instances_instance_ospfv2_gtsm, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/gtsm

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hops._changed():
        input_yang_obj.hops = input_yang_obj.hops
        
    if input_yang_obj.nonstandard_multicast._changed():
        input_yang_obj.nonstandard_multicast = input_yang_obj.nonstandard_multicast
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id(input_yang_obj: yc_domain_id_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net/domain-id

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.domain_id._changed():
        input_yang_obj.domain_id = input_yang_obj.domain_id
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    if input_yang_obj.value._changed():
        input_yang_obj.value = input_yang_obj.value
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys_domain_id_secondary(input_yang_obj: yc_domain_id_secondary_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys_domain_id_secondary, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net/domain-id-secondarys/domain-id-secondary

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys(input_yang_obj: yc_domain_id_secondarys_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net/domain-id-secondarys

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.domain_id_secondary.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys_domain_id_secondary(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net(input_yang_obj: yc_private_net_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.eca_route._changed():
        input_yang_obj.eca_route = input_yang_obj.eca_route
        
    if input_yang_obj.disable._changed():
        input_yang_obj.disable = input_yang_obj.disable
        
    if input_yang_obj.value._changed():
        input_yang_obj.value = input_yang_obj.value
        
    if input_yang_obj.vpn_capability._changed():
        input_yang_obj.vpn_capability = input_yang_obj.vpn_capability
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id(input_yang_obj.domain_id, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys(input_yang_obj.domain_id_secondarys, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_host_name(input_yang_obj: yc_host_name_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_host_name, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/host-name

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.value._changed():
        input_yang_obj.value = input_yang_obj.value
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bandwidth(input_yang_obj: yc_bandwidth_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bandwidth, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bandwidth

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.config_bw_enable._changed():
        input_yang_obj.config_bw_enable = input_yang_obj.config_bw_enable
        
    if input_yang_obj.reference_value._changed():
        input_yang_obj.reference_value = input_yang_obj.reference_value
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arrival(input_yang_obj: yc_lsa_arrival_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arrival, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-arrival

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.max_interval._changed():
        input_yang_obj.max_interval = input_yang_obj.max_interval
        
    if input_yang_obj.start_interval._changed():
        input_yang_obj.start_interval = input_yang_obj.start_interval
        
    if input_yang_obj.hold_interval._changed():
        input_yang_obj.hold_interval = input_yang_obj.hold_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arr_supp_flap(input_yang_obj: yc_lsa_arr_supp_flap_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arr_supp_flap, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-arr-supp-flap

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.threshold_count._changed():
        input_yang_obj.threshold_count = input_yang_obj.threshold_count
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_originate(input_yang_obj: yc_lsa_originate_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_originate, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-originate

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.other_type_interval._changed():
        input_yang_obj.other_type_interval = input_yang_obj.other_type_interval
        
    if input_yang_obj.max_interval._changed():
        input_yang_obj.max_interval = input_yang_obj.max_interval
        
    if input_yang_obj.start_interval._changed():
        input_yang_obj.start_interval = input_yang_obj.start_interval
        
    if input_yang_obj.hold_interval._changed():
        input_yang_obj.hold_interval = input_yang_obj.hold_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_org_supp_flap(input_yang_obj: yc_lsa_org_supp_flap_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_org_supp_flap, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-org-supp-flap

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.threshold_count._changed():
        input_yang_obj.threshold_count = input_yang_obj.threshold_count
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_spf_schedule(input_yang_obj: yc_spf_schedule_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_spf_schedule, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/spf-schedule

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.max_interval._changed():
        input_yang_obj.max_interval = input_yang_obj.max_interval
        
    if input_yang_obj.start_interval._changed():
        input_yang_obj.start_interval = input_yang_obj.start_interval
        
    if input_yang_obj.hold_interval._changed():
        input_yang_obj.hold_interval = input_yang_obj.hold_interval
        
    if input_yang_obj.conserv_flag._changed():
        input_yang_obj.conserv_flag = input_yang_obj.conserv_flag
        
    if input_yang_obj.millisecond._changed():
        input_yang_obj.millisecond = input_yang_obj.millisecond
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer(input_yang_obj: yc_timer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arrival(input_yang_obj.lsa_arrival, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arr_supp_flap(input_yang_obj.lsa_arr_supp_flap, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_originate(input_yang_obj.lsa_originate, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_org_supp_flap(input_yang_obj.lsa_org_supp_flap, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_spf_schedule(input_yang_obj.spf_schedule, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bfd(input_yang_obj: yc_bfd_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bfd, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bfd

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.min_rx._changed():
        input_yang_obj.min_rx = input_yang_obj.min_rx
        
    if input_yang_obj.min_tx._changed():
        input_yang_obj.min_tx = input_yang_obj.min_tx
        
    if input_yang_obj.detect_multiplier._changed():
        input_yang_obj.detect_multiplier = input_yang_obj.detect_multiplier
        
    if input_yang_obj.incr_cost._changed():
        input_yang_obj.incr_cost = input_yang_obj.incr_cost
        
    if input_yang_obj.frr_binding._changed():
        input_yang_obj.frr_binding = input_yang_obj.frr_binding
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_metric_delay(input_yang_obj: yc_metric_delay_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_metric_delay, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/metric-delay

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.adv_enable._changed():
        input_yang_obj.adv_enable = input_yang_obj.adv_enable
        
    if input_yang_obj.suppress_timer._changed():
        input_yang_obj.suppress_timer = input_yang_obj.suppress_timer
        
    if input_yang_obj.suppress_percent._changed():
        input_yang_obj.suppress_percent = input_yang_obj.suppress_percent
        
    if input_yang_obj.suppress_absolute._changed():
        input_yang_obj.suppress_absolute = input_yang_obj.suppress_absolute
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bier(input_yang_obj: yc_bier_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bier, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_stub_router(input_yang_obj: yc_stub_router_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_stub_router, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/stub-router

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.flag._changed():
        input_yang_obj.flag = input_yang_obj.flag
        
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.include_stub._changed():
        input_yang_obj.include_stub = input_yang_obj.include_stub
        
    if input_yang_obj.external_lsa._changed():
        input_yang_obj.external_lsa = input_yang_obj.external_lsa
        
    if input_yang_obj.external_cost._changed():
        input_yang_obj.external_cost = input_yang_obj.external_cost
        
    if input_yang_obj.summary_lsa._changed():
        input_yang_obj.summary_lsa = input_yang_obj.summary_lsa
        
    if input_yang_obj.summary_cost._changed():
        input_yang_obj.summary_cost = input_yang_obj.summary_cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bgp_ls(input_yang_obj: yc_bgp_ls_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bgp_ls, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bgp-ls

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.identifier._changed():
        input_yang_obj.identifier = input_yang_obj.identifier
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_import_limit(input_yang_obj: yc_import_limit_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_import_limit, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/import-limit

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.max_number._changed():
        input_yang_obj.max_number = input_yang_obj.max_number
        
    if input_yang_obj.threshold_upper._changed():
        input_yang_obj.threshold_upper = input_yang_obj.threshold_upper
        
    if input_yang_obj.threshold_lower._changed():
        input_yang_obj.threshold_lower = input_yang_obj.threshold_lower
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_spf_control(input_yang_obj: yc_spf_control_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_spf_control, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/spf-control

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.max_load_balancing._changed():
        input_yang_obj.max_load_balancing = input_yang_obj.max_load_balancing
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_default_para(input_yang_obj: yc_default_para_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_default_para, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/default-para

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost_value._changed():
        input_yang_obj.cost_value = input_yang_obj.cost_value
        
    if input_yang_obj.cost_inherit_metric._changed():
        input_yang_obj.cost_inherit_metric = input_yang_obj.cost_inherit_metric
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_avoid_micro_loop(input_yang_obj: yc_avoid_micro_loop_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_avoid_micro_loop, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/avoid-micro-loop

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.frr_enable._changed():
        input_yang_obj.frr_enable = input_yang_obj.frr_enable
        
    if input_yang_obj.frr_rib_update_delay._changed():
        input_yang_obj.frr_rib_update_delay = input_yang_obj.frr_rib_update_delay
        
    if input_yang_obj.te_tunnel_enable._changed():
        input_yang_obj.te_tunnel_enable = input_yang_obj.te_tunnel_enable
        
    if input_yang_obj.te_tunnel_rib_update_delay._changed():
        input_yang_obj.te_tunnel_rib_update_delay = input_yang_obj.te_tunnel_rib_update_delay
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs_asbr_summary_prefix(input_yang_obj: yc_asbr_summary_prefix_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs_asbr_summary_prefix, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/asbr-summary-prefixs/asbr-summary-prefix

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.distribute_delay._changed():
        input_yang_obj.distribute_delay = input_yang_obj.distribute_delay
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.advertise._changed():
        input_yang_obj.advertise = input_yang_obj.advertise
        
    if input_yang_obj.generate_null_zero._changed():
        input_yang_obj.generate_null_zero = input_yang_obj.generate_null_zero
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs(input_yang_obj: yc_asbr_summary_prefixs_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/asbr-summary-prefixs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.asbr_summary_prefix.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs_asbr_summary_prefix(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_summary(input_yang_obj: yc_summary_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_summary, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/summary

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_no_summary(input_yang_obj: yc_no_summary_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_no_summary, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/no-summary

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    if input_yang_obj.distribute_delay._changed():
        input_yang_obj.distribute_delay = input_yang_obj.distribute_delay
        
    if input_yang_obj.permit_calculate_other._changed():
        input_yang_obj.permit_calculate_other = input_yang_obj.permit_calculate_other
        
    if input_yang_obj.permit_ibgp._changed():
        input_yang_obj.permit_ibgp = input_yang_obj.permit_ibgp
        
    if input_yang_obj.always._changed():
        input_yang_obj.always = input_yang_obj.always
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_route_preferences_route_preference(input_yang_obj: yc_route_preference_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_route_preferences_route_preference, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/route-preferences/route-preference

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.preference._changed():
        input_yang_obj.preference = input_yang_obj.preference
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_route_preferences(input_yang_obj: yc_route_preferences_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_route_preferences, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/route-preferences

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_preference.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_route_preferences_route_preference(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights_nexthop_weight(input_yang_obj: yc_nexthop_weight_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights_nexthop_weight, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/nexthop-weights/nexthop-weight

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.weight._changed():
        input_yang_obj.weight = input_yang_obj.weight
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights(input_yang_obj: yc_nexthop_weights_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/nexthop-weights

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.nexthop_weight.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights_nexthop_weight(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys_prefix_priority(input_yang_obj: yc_prefix_priority_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys_prefix_priority, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/prefix-prioritys/prefix-priority

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys(input_yang_obj: yc_prefix_prioritys_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/prefix-prioritys

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.prefix_priority.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys_prefix_priority(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_ecmp_prefer(input_yang_obj: yc_ecmp_prefer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_ecmp_prefer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/ecmp-prefer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.te_tunnel._changed():
        input_yang_obj.te_tunnel = input_yang_obj.te_tunnel
        
    if input_yang_obj.intact._changed():
        input_yang_obj.intact = input_yang_obj.intact
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr_tiebreaker(input_yang_obj: yc_tiebreaker_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr_tiebreaker, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr/tiebreaker

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.node_protect._changed():
        input_yang_obj.node_protect = input_yang_obj.node_protect
        
    if input_yang_obj.lowest_cost._changed():
        input_yang_obj.lowest_cost = input_yang_obj.lowest_cost
        
    if input_yang_obj.ldp_sync._changed():
        input_yang_obj.ldp_sync = input_yang_obj.ldp_sync
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr_route_policy(input_yang_obj: yc_route_policy_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr_route_policy, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr/route-policy

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr_rlfa_tunnel(input_yang_obj: yc_rlfa_tunnel_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr_rlfa_tunnel, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr/rlfa-tunnel

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.ip_prefix_name._changed():
        input_yang_obj.ip_prefix_name = input_yang_obj.ip_prefix_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr(input_yang_obj: yc_frr_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.lfa_enable._changed():
        input_yang_obj.lfa_enable = input_yang_obj.lfa_enable
        
    if input_yang_obj.rlfa_enable._changed():
        input_yang_obj.rlfa_enable = input_yang_obj.rlfa_enable
        
    if input_yang_obj.rlfa_max_cost._changed():
        input_yang_obj.rlfa_max_cost = input_yang_obj.rlfa_max_cost
        
    if input_yang_obj.tilfa_enable._changed():
        input_yang_obj.tilfa_enable = input_yang_obj.tilfa_enable
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_frr_tiebreaker(input_yang_obj.tiebreaker, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_frr_route_policy(input_yang_obj.route_policy, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_frr_rlfa_tunnel(input_yang_obj.rlfa_tunnel, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_local_mt_filter(input_yang_obj: yc_local_mt_filter_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_local_mt_filter, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/local-mt-filter

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.acl_name_or_num._changed():
        input_yang_obj.acl_name_or_num = input_yang_obj.acl_name_or_num
        
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_peers_peer(input_yang_obj: yc_peer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_peers_peer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/peers/peer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.priority._changed():
        input_yang_obj.priority = input_yang_obj.priority
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_peers(input_yang_obj: yc_peers_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_peers, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/peers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.peer.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_peers_peer(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs_filter_lsa_out(input_yang_obj: yc_filter_lsa_out_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs_filter_lsa_out, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/filter-lsa-outs/filter-lsa-out

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs(input_yang_obj: yc_filter_lsa_outs_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/filter-lsa-outs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.filter_lsa_out.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs_filter_lsa_out(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_global(input_yang_obj: yc_global__huawei_network_instance__network_instance_global, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/global

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cfg_router_id._changed():
        input_yang_obj.cfg_router_id = input_yang_obj.cfg_router_id
        
    if input_yang_obj.as_notation_plain._changed():
        input_yang_obj.as_notation_plain = input_yang_obj.as_notation_plain
        
    if input_yang_obj.route_distinguisher_auto_ip._changed():
        input_yang_obj.route_distinguisher_auto_ip = input_yang_obj.route_distinguisher_auto_ip
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_parameter(input_yang_obj: yc_parameter_huawei_network_instance__network_instance_instances_instance_parameter, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/parameter

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.identifier._changed():
        input_yang_obj.identifier = input_yang_obj.identifier
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_vpn_targets_vpn_target(input_yang_obj: yc_vpn_target_huawei_network_instance__network_instance_instances_instance_afs_af_vpn_targets_vpn_target, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_vpn_targets(input_yang_obj: yc_vpn_targets_huawei_network_instance__network_instance_instances_instance_afs_af_vpn_targets, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_state(input_yang_obj: yc_state_huawei_network_instance__network_instance_instances_instance_afs_af_state, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/state

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.create_time._changed():
        input_yang_obj.create_time = input_yang_obj.create_time
        
    if input_yang_obj.up_time._changed():
        input_yang_obj.up_time = input_yang_obj.up_time
        
    if input_yang_obj.label._changed():
        input_yang_obj.label = input_yang_obj.label
        
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_tunnel_infos_tunnel_info(input_yang_obj: yc_tunnel_info_huawei_network_instance__network_instance_instances_instance_afs_af_tunnel_infos_tunnel_info, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/tunnel-infos/tunnel-info

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.color._changed():
        input_yang_obj.color = input_yang_obj.color
        
    if input_yang_obj.name._changed():
        input_yang_obj.name = input_yang_obj.name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_tunnel_infos(input_yang_obj: yc_tunnel_infos_huawei_network_instance__network_instance_instances_instance_afs_af_tunnel_infos, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/tunnel-infos

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.tunnel_info.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af_tunnel_infos_tunnel_info(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_ospf_import_rts_ospf_import_rt(input_yang_obj: yc_ospf_import_rt_huawei_network_instance__network_instance_instances_instance_afs_af_ospf_import_rts_ospf_import_rt, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/ospf-import-rts/ospf-import-rt

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.valid_route._changed():
        input_yang_obj.valid_route = input_yang_obj.valid_route
        
    if input_yang_obj.route_policy._changed():
        input_yang_obj.route_policy = input_yang_obj.route_policy
        
    if input_yang_obj.route_filter._changed():
        input_yang_obj.route_filter = input_yang_obj.route_filter
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_ospf_import_rts(input_yang_obj: yc_ospf_import_rts_huawei_network_instance__network_instance_instances_instance_afs_af_ospf_import_rts, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/ospf-import-rts

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ospf_import_rt.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af_ospf_import_rts_ospf_import_rt(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af(input_yang_obj: yc_af_huawei_network_instance__network_instance_instances_instance_afs_af, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.route_distinguisher._changed():
        input_yang_obj.route_distinguisher = input_yang_obj.route_distinguisher
        
    if input_yang_obj.effect_route_distinguisher._changed():
        input_yang_obj.effect_route_distinguisher = input_yang_obj.effect_route_distinguisher
        
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    if input_yang_obj.export_policy_add_ert_first._changed():
        input_yang_obj.export_policy_add_ert_first = input_yang_obj.export_policy_add_ert_first
        
    if input_yang_obj.label_mode._changed():
        input_yang_obj.label_mode = input_yang_obj.label_mode
        
    if input_yang_obj.vpn_frr._changed():
        input_yang_obj.vpn_frr = input_yang_obj.vpn_frr
        
    if input_yang_obj.tunnel_policy._changed():
        input_yang_obj.tunnel_policy = input_yang_obj.tunnel_policy
        
    if input_yang_obj.transit_vpn._changed():
        input_yang_obj.transit_vpn = input_yang_obj.transit_vpn
        
    if input_yang_obj.lsp_operation._changed():
        input_yang_obj.lsp_operation = input_yang_obj.lsp_operation
        
    if input_yang_obj.default_color._changed():
        input_yang_obj.default_color = input_yang_obj.default_color
        
    innerobj = _translate__network_instance_instances_instance_afs_af_vpn_targets(input_yang_obj.vpn_targets, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_afs_af_state(input_yang_obj.state, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_afs_af_tunnel_infos(input_yang_obj.tunnel_infos, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_afs_af_ospf_import_rts(input_yang_obj.ospf_import_rts, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs(input_yang_obj: yc_afs_huawei_network_instance__network_instance_instances_instance_afs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.af.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_gtsm(input_yang_obj: yc_gtsm_huawei_network_instance__network_instance_instances_instance_ospfv2_gtsm, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/gtsm

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hops._changed():
        input_yang_obj.hops = input_yang_obj.hops
        
    if input_yang_obj.nonstandard_multicast._changed():
        input_yang_obj.nonstandard_multicast = input_yang_obj.nonstandard_multicast
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id(input_yang_obj: yc_domain_id_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net/domain-id

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.domain_id._changed():
        input_yang_obj.domain_id = input_yang_obj.domain_id
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    if input_yang_obj.value._changed():
        input_yang_obj.value = input_yang_obj.value
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys_domain_id_secondary(input_yang_obj: yc_domain_id_secondary_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys_domain_id_secondary, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net/domain-id-secondarys/domain-id-secondary

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys(input_yang_obj: yc_domain_id_secondarys_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net/domain-id-secondarys

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.domain_id_secondary.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys_domain_id_secondary(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net(input_yang_obj: yc_private_net_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.eca_route._changed():
        input_yang_obj.eca_route = input_yang_obj.eca_route
        
    if input_yang_obj.disable._changed():
        input_yang_obj.disable = input_yang_obj.disable
        
    if input_yang_obj.value._changed():
        input_yang_obj.value = input_yang_obj.value
        
    if input_yang_obj.vpn_capability._changed():
        input_yang_obj.vpn_capability = input_yang_obj.vpn_capability
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id(input_yang_obj.domain_id, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys(input_yang_obj.domain_id_secondarys, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_host_name(input_yang_obj: yc_host_name_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_host_name, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/host-name

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.value._changed():
        input_yang_obj.value = input_yang_obj.value
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bandwidth(input_yang_obj: yc_bandwidth_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bandwidth, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bandwidth

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.config_bw_enable._changed():
        input_yang_obj.config_bw_enable = input_yang_obj.config_bw_enable
        
    if input_yang_obj.reference_value._changed():
        input_yang_obj.reference_value = input_yang_obj.reference_value
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arrival(input_yang_obj: yc_lsa_arrival_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arrival, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-arrival

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.max_interval._changed():
        input_yang_obj.max_interval = input_yang_obj.max_interval
        
    if input_yang_obj.start_interval._changed():
        input_yang_obj.start_interval = input_yang_obj.start_interval
        
    if input_yang_obj.hold_interval._changed():
        input_yang_obj.hold_interval = input_yang_obj.hold_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arr_supp_flap(input_yang_obj: yc_lsa_arr_supp_flap_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arr_supp_flap, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-arr-supp-flap

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.threshold_count._changed():
        input_yang_obj.threshold_count = input_yang_obj.threshold_count
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_originate(input_yang_obj: yc_lsa_originate_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_originate, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-originate

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.other_type_interval._changed():
        input_yang_obj.other_type_interval = input_yang_obj.other_type_interval
        
    if input_yang_obj.max_interval._changed():
        input_yang_obj.max_interval = input_yang_obj.max_interval
        
    if input_yang_obj.start_interval._changed():
        input_yang_obj.start_interval = input_yang_obj.start_interval
        
    if input_yang_obj.hold_interval._changed():
        input_yang_obj.hold_interval = input_yang_obj.hold_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_org_supp_flap(input_yang_obj: yc_lsa_org_supp_flap_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_org_supp_flap, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-org-supp-flap

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.threshold_count._changed():
        input_yang_obj.threshold_count = input_yang_obj.threshold_count
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_spf_schedule(input_yang_obj: yc_spf_schedule_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_spf_schedule, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/spf-schedule

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.max_interval._changed():
        input_yang_obj.max_interval = input_yang_obj.max_interval
        
    if input_yang_obj.start_interval._changed():
        input_yang_obj.start_interval = input_yang_obj.start_interval
        
    if input_yang_obj.hold_interval._changed():
        input_yang_obj.hold_interval = input_yang_obj.hold_interval
        
    if input_yang_obj.conserv_flag._changed():
        input_yang_obj.conserv_flag = input_yang_obj.conserv_flag
        
    if input_yang_obj.millisecond._changed():
        input_yang_obj.millisecond = input_yang_obj.millisecond
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer(input_yang_obj: yc_timer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arrival(input_yang_obj.lsa_arrival, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arr_supp_flap(input_yang_obj.lsa_arr_supp_flap, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_originate(input_yang_obj.lsa_originate, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_org_supp_flap(input_yang_obj.lsa_org_supp_flap, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_spf_schedule(input_yang_obj.spf_schedule, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bfd(input_yang_obj: yc_bfd_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bfd, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bfd

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.min_rx._changed():
        input_yang_obj.min_rx = input_yang_obj.min_rx
        
    if input_yang_obj.min_tx._changed():
        input_yang_obj.min_tx = input_yang_obj.min_tx
        
    if input_yang_obj.detect_multiplier._changed():
        input_yang_obj.detect_multiplier = input_yang_obj.detect_multiplier
        
    if input_yang_obj.incr_cost._changed():
        input_yang_obj.incr_cost = input_yang_obj.incr_cost
        
    if input_yang_obj.frr_binding._changed():
        input_yang_obj.frr_binding = input_yang_obj.frr_binding
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_metric_delay(input_yang_obj: yc_metric_delay_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_metric_delay, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/metric-delay

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.adv_enable._changed():
        input_yang_obj.adv_enable = input_yang_obj.adv_enable
        
    if input_yang_obj.suppress_timer._changed():
        input_yang_obj.suppress_timer = input_yang_obj.suppress_timer
        
    if input_yang_obj.suppress_percent._changed():
        input_yang_obj.suppress_percent = input_yang_obj.suppress_percent
        
    if input_yang_obj.suppress_absolute._changed():
        input_yang_obj.suppress_absolute = input_yang_obj.suppress_absolute
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bier(input_yang_obj: yc_bier_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bier, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_stub_router(input_yang_obj: yc_stub_router_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_stub_router, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/stub-router

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.flag._changed():
        input_yang_obj.flag = input_yang_obj.flag
        
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.include_stub._changed():
        input_yang_obj.include_stub = input_yang_obj.include_stub
        
    if input_yang_obj.external_lsa._changed():
        input_yang_obj.external_lsa = input_yang_obj.external_lsa
        
    if input_yang_obj.external_cost._changed():
        input_yang_obj.external_cost = input_yang_obj.external_cost
        
    if input_yang_obj.summary_lsa._changed():
        input_yang_obj.summary_lsa = input_yang_obj.summary_lsa
        
    if input_yang_obj.summary_cost._changed():
        input_yang_obj.summary_cost = input_yang_obj.summary_cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bgp_ls(input_yang_obj: yc_bgp_ls_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bgp_ls, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bgp-ls

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.identifier._changed():
        input_yang_obj.identifier = input_yang_obj.identifier
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_import_limit(input_yang_obj: yc_import_limit_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_import_limit, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/import-limit

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.max_number._changed():
        input_yang_obj.max_number = input_yang_obj.max_number
        
    if input_yang_obj.threshold_upper._changed():
        input_yang_obj.threshold_upper = input_yang_obj.threshold_upper
        
    if input_yang_obj.threshold_lower._changed():
        input_yang_obj.threshold_lower = input_yang_obj.threshold_lower
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_spf_control(input_yang_obj: yc_spf_control_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_spf_control, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/spf-control

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.max_load_balancing._changed():
        input_yang_obj.max_load_balancing = input_yang_obj.max_load_balancing
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_default_para(input_yang_obj: yc_default_para_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_default_para, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/default-para

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost_value._changed():
        input_yang_obj.cost_value = input_yang_obj.cost_value
        
    if input_yang_obj.cost_inherit_metric._changed():
        input_yang_obj.cost_inherit_metric = input_yang_obj.cost_inherit_metric
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_avoid_micro_loop(input_yang_obj: yc_avoid_micro_loop_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_avoid_micro_loop, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/avoid-micro-loop

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.frr_enable._changed():
        input_yang_obj.frr_enable = input_yang_obj.frr_enable
        
    if input_yang_obj.frr_rib_update_delay._changed():
        input_yang_obj.frr_rib_update_delay = input_yang_obj.frr_rib_update_delay
        
    if input_yang_obj.te_tunnel_enable._changed():
        input_yang_obj.te_tunnel_enable = input_yang_obj.te_tunnel_enable
        
    if input_yang_obj.te_tunnel_rib_update_delay._changed():
        input_yang_obj.te_tunnel_rib_update_delay = input_yang_obj.te_tunnel_rib_update_delay
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs_asbr_summary_prefix(input_yang_obj: yc_asbr_summary_prefix_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs_asbr_summary_prefix, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/asbr-summary-prefixs/asbr-summary-prefix

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.distribute_delay._changed():
        input_yang_obj.distribute_delay = input_yang_obj.distribute_delay
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.advertise._changed():
        input_yang_obj.advertise = input_yang_obj.advertise
        
    if input_yang_obj.generate_null_zero._changed():
        input_yang_obj.generate_null_zero = input_yang_obj.generate_null_zero
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs(input_yang_obj: yc_asbr_summary_prefixs_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/asbr-summary-prefixs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.asbr_summary_prefix.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs_asbr_summary_prefix(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_summary(input_yang_obj: yc_summary_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_summary, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/summary

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_no_summary(input_yang_obj: yc_no_summary_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_no_summary, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/no-summary

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    if input_yang_obj.distribute_delay._changed():
        input_yang_obj.distribute_delay = input_yang_obj.distribute_delay
        
    if input_yang_obj.permit_calculate_other._changed():
        input_yang_obj.permit_calculate_other = input_yang_obj.permit_calculate_other
        
    if input_yang_obj.permit_ibgp._changed():
        input_yang_obj.permit_ibgp = input_yang_obj.permit_ibgp
        
    if input_yang_obj.always._changed():
        input_yang_obj.always = input_yang_obj.always
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_route_preferences_route_preference(input_yang_obj: yc_route_preference_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_route_preferences_route_preference, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/route-preferences/route-preference

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.preference._changed():
        input_yang_obj.preference = input_yang_obj.preference
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_route_preferences(input_yang_obj: yc_route_preferences_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_route_preferences, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/route-preferences

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_preference.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_route_preferences_route_preference(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights_nexthop_weight(input_yang_obj: yc_nexthop_weight_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights_nexthop_weight, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/nexthop-weights/nexthop-weight

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.weight._changed():
        input_yang_obj.weight = input_yang_obj.weight
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights(input_yang_obj: yc_nexthop_weights_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/nexthop-weights

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.nexthop_weight.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights_nexthop_weight(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys_prefix_priority(input_yang_obj: yc_prefix_priority_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys_prefix_priority, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/prefix-prioritys/prefix-priority

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys(input_yang_obj: yc_prefix_prioritys_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/prefix-prioritys

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.prefix_priority.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys_prefix_priority(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_ecmp_prefer(input_yang_obj: yc_ecmp_prefer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_ecmp_prefer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/ecmp-prefer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.te_tunnel._changed():
        input_yang_obj.te_tunnel = input_yang_obj.te_tunnel
        
    if input_yang_obj.intact._changed():
        input_yang_obj.intact = input_yang_obj.intact
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr_tiebreaker(input_yang_obj: yc_tiebreaker_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr_tiebreaker, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr/tiebreaker

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.node_protect._changed():
        input_yang_obj.node_protect = input_yang_obj.node_protect
        
    if input_yang_obj.lowest_cost._changed():
        input_yang_obj.lowest_cost = input_yang_obj.lowest_cost
        
    if input_yang_obj.ldp_sync._changed():
        input_yang_obj.ldp_sync = input_yang_obj.ldp_sync
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr_route_policy(input_yang_obj: yc_route_policy_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr_route_policy, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr/route-policy

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr_rlfa_tunnel(input_yang_obj: yc_rlfa_tunnel_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr_rlfa_tunnel, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr/rlfa-tunnel

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.ip_prefix_name._changed():
        input_yang_obj.ip_prefix_name = input_yang_obj.ip_prefix_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr(input_yang_obj: yc_frr_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.lfa_enable._changed():
        input_yang_obj.lfa_enable = input_yang_obj.lfa_enable
        
    if input_yang_obj.rlfa_enable._changed():
        input_yang_obj.rlfa_enable = input_yang_obj.rlfa_enable
        
    if input_yang_obj.rlfa_max_cost._changed():
        input_yang_obj.rlfa_max_cost = input_yang_obj.rlfa_max_cost
        
    if input_yang_obj.tilfa_enable._changed():
        input_yang_obj.tilfa_enable = input_yang_obj.tilfa_enable
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_frr_tiebreaker(input_yang_obj.tiebreaker, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_frr_route_policy(input_yang_obj.route_policy, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_frr_rlfa_tunnel(input_yang_obj.rlfa_tunnel, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_local_mt_filter(input_yang_obj: yc_local_mt_filter_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_local_mt_filter, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/local-mt-filter

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.acl_name_or_num._changed():
        input_yang_obj.acl_name_or_num = input_yang_obj.acl_name_or_num
        
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_peers_peer(input_yang_obj: yc_peer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_peers_peer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/peers/peer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.priority._changed():
        input_yang_obj.priority = input_yang_obj.priority
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_peers(input_yang_obj: yc_peers_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_peers, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/peers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.peer.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_peers_peer(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs_filter_lsa_out(input_yang_obj: yc_filter_lsa_out_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs_filter_lsa_out, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/filter-lsa-outs/filter-lsa-out

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs(input_yang_obj: yc_filter_lsa_outs_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/filter-lsa-outs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.filter_lsa_out.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs_filter_lsa_out(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_gr_ietf(input_yang_obj: yc_gr_ietf_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_gr_ietf, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/gr-ietf

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.never._changed():
        input_yang_obj.never = input_yang_obj.never
        
    if input_yang_obj.planned_only._changed():
        input_yang_obj.planned_only = input_yang_obj.planned_only
        
    if input_yang_obj.ignore_external_lsa._changed():
        input_yang_obj.ignore_external_lsa = input_yang_obj.ignore_external_lsa
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_flood_control(input_yang_obj: yc_flood_control_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_flood_control, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/flood-control

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.number._changed():
        input_yang_obj.number = input_yang_obj.number
        
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids_summary_router_id(input_yang_obj: yc_summary_router_id_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids_summary_router_id, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/dn-bit/summary-router-ids/summary-router-id

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids(input_yang_obj: yc_summary_router_ids_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/dn-bit/summary-router-ids

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.summary_router_id.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids_summary_router_id(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_dn_bit(input_yang_obj: yc_dn_bit_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_dn_bit, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/dn-bit

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.set_ase._changed():
        input_yang_obj.set_ase = input_yang_obj.set_ase
        
    if input_yang_obj.set_nssa._changed():
        input_yang_obj.set_nssa = input_yang_obj.set_nssa
        
    if input_yang_obj.set_summary._changed():
        input_yang_obj.set_summary = input_yang_obj.set_summary
        
    if input_yang_obj.check_ase._changed():
        input_yang_obj.check_ase = input_yang_obj.check_ase
        
    if input_yang_obj.check_nssa._changed():
        input_yang_obj.check_nssa = input_yang_obj.check_nssa
        
    if input_yang_obj.check_summary._changed():
        input_yang_obj.check_summary = input_yang_obj.check_summary
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids(input_yang_obj.summary_router_ids, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_filter_import(input_yang_obj: yc_filter_import_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_filter_import, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/filter-import

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.name_or_num._changed():
        input_yang_obj.name_or_num = input_yang_obj.name_or_num
        
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    if input_yang_obj.route_policy._changed():
        input_yang_obj.route_policy = input_yang_obj.route_policy
        
    if input_yang_obj.route_filter._changed():
        input_yang_obj.route_filter = input_yang_obj.route_filter
        
    if input_yang_obj.secondary._changed():
        input_yang_obj.secondary = input_yang_obj.secondary
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_filter_exports_filter_export(input_yang_obj: yc_filter_export_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_filter_exports_filter_export, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/filter-exports/filter-export

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.name_or_num._changed():
        input_yang_obj.name_or_num = input_yang_obj.name_or_num
        
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    if input_yang_obj.route_policy._changed():
        input_yang_obj.route_policy = input_yang_obj.route_policy
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_filter_exports(input_yang_obj: yc_filter_exports_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_filter_exports, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/filter-exports

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.filter_export.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_filter_exports_filter_export(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_import_routes_import_route(input_yang_obj: yc_import_route_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_import_routes_import_route, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/import-routes/import-route

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    if input_yang_obj.permit_ibgp._changed():
        input_yang_obj.permit_ibgp = input_yang_obj.permit_ibgp
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_import_routes(input_yang_obj: yc_import_routes_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_import_routes, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/import-routes

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.import_route.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_import_routes_import_route(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_silent_interfaces_silent_interface(input_yang_obj: yc_silent_interface_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_silent_interfaces_silent_interface, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/silent-interfaces/silent-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_silent_interfaces(input_yang_obj: yc_silent_interfaces_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_silent_interfaces, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/silent-interfaces

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.silent_interface.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_silent_interfaces_silent_interface(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_undo_silent_interfaces_undo_silent_interface(input_yang_obj: yc_undo_silent_interface_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_undo_silent_interfaces_undo_silent_interface, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/undo-silent-interfaces/undo-silent-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_undo_silent_interfaces(input_yang_obj: yc_undo_silent_interfaces_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_undo_silent_interfaces, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/undo-silent-interfaces

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.undo_silent_interface.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_undo_silent_interfaces_undo_silent_interface(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_cost_bindings_cost_binding(input_yang_obj: yc_cost_binding_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_cost_bindings_cost_binding, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/cost-bindings/cost-binding

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_cost_bindings(input_yang_obj: yc_cost_bindings_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_cost_bindings, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/cost-bindings

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.cost_binding.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_cost_bindings_cost_binding(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_networks_network(input_yang_obj: yc_network_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_networks_network, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/networks/network

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.description._changed():
        input_yang_obj.description = input_yang_obj.description
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_networks(input_yang_obj: yc_networks_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_networks, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/networks

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.network.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_networks_network(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_stub(input_yang_obj: yc_stub_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_stub, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/stub

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.backbone_peer_ignore._changed():
        input_yang_obj.backbone_peer_ignore = input_yang_obj.backbone_peer_ignore
        
    if input_yang_obj.no_summary._changed():
        input_yang_obj.no_summary = input_yang_obj.no_summary
        
    if input_yang_obj.default_cost._changed():
        input_yang_obj.default_cost = input_yang_obj.default_cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_nssa(input_yang_obj: yc_nssa_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_nssa, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/nssa

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.no_summary._changed():
        input_yang_obj.no_summary = input_yang_obj.no_summary
        
    if input_yang_obj.translator_always._changed():
        input_yang_obj.translator_always = input_yang_obj.translator_always
        
    if input_yang_obj.default_route_advertise._changed():
        input_yang_obj.default_route_advertise = input_yang_obj.default_route_advertise
        
    if input_yang_obj.backbone_peer_ignore._changed():
        input_yang_obj.backbone_peer_ignore = input_yang_obj.backbone_peer_ignore
        
    if input_yang_obj.no_import_route._changed():
        input_yang_obj.no_import_route = input_yang_obj.no_import_route
        
    if input_yang_obj.set_n_bit._changed():
        input_yang_obj.set_n_bit = input_yang_obj.set_n_bit
        
    if input_yang_obj.suppress_fa._changed():
        input_yang_obj.suppress_fa = input_yang_obj.suppress_fa
        
    if input_yang_obj.zero_address_forwarding._changed():
        input_yang_obj.zero_address_forwarding = input_yang_obj.zero_address_forwarding
        
    if input_yang_obj.translator_interval._changed():
        input_yang_obj.translator_interval = input_yang_obj.translator_interval
        
    if input_yang_obj.default_cost._changed():
        input_yang_obj.default_cost = input_yang_obj.default_cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_ldp_sync(input_yang_obj: yc_ldp_sync_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_ldp_sync, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/ldp-sync

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.timer._changed():
        input_yang_obj.timer = input_yang_obj.timer
        
    if input_yang_obj.infinite._changed():
        input_yang_obj.infinite = input_yang_obj.infinite
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_mpls_te(input_yang_obj: yc_mpls_te_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_mpls_te, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/mpls-te

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.standard_complying._changed():
        input_yang_obj.standard_complying = input_yang_obj.standard_complying
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_authentication(input_yang_obj: yc_authentication_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_authentication, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/authentication

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    if input_yang_obj.auth_text_simple._changed():
        input_yang_obj.auth_text_simple = input_yang_obj.auth_text_simple
        
    if input_yang_obj.key_id._changed():
        input_yang_obj.key_id = input_yang_obj.key_id
        
    if input_yang_obj.auth_text_md5._changed():
        input_yang_obj.auth_text_md5 = input_yang_obj.auth_text_md5
        
    if input_yang_obj.key_chain_name._changed():
        input_yang_obj.key_chain_name = input_yang_obj.key_chain_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_abr_summary_prefixs_abr_summary_prefix(input_yang_obj: yc_abr_summary_prefix_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_abr_summary_prefixs_abr_summary_prefix, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/abr-summary-prefixs/abr-summary-prefix

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost_value._changed():
        input_yang_obj.cost_value = input_yang_obj.cost_value
        
    if input_yang_obj.cost_inherit_min._changed():
        input_yang_obj.cost_inherit_min = input_yang_obj.cost_inherit_min
        
    if input_yang_obj.hold_max_cost._changed():
        input_yang_obj.hold_max_cost = input_yang_obj.hold_max_cost
        
    if input_yang_obj.advertise._changed():
        input_yang_obj.advertise = input_yang_obj.advertise
        
    if input_yang_obj.generate_null_zero._changed():
        input_yang_obj.generate_null_zero = input_yang_obj.generate_null_zero
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_abr_summary_prefixs(input_yang_obj: yc_abr_summary_prefixs_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_abr_summary_prefixs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/abr-summary-prefixs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.abr_summary_prefix.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_abr_summary_prefixs_abr_summary_prefix(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_timer(input_yang_obj: yc_timer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_timer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/vlink-peers/vlink-peer/timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hello_interval._changed():
        input_yang_obj.hello_interval = input_yang_obj.hello_interval
        
    if input_yang_obj.dead_interval._changed():
        input_yang_obj.dead_interval = input_yang_obj.dead_interval
        
    if input_yang_obj.trans_delay_interval._changed():
        input_yang_obj.trans_delay_interval = input_yang_obj.trans_delay_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_authentication(input_yang_obj: yc_authentication_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_authentication, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/vlink-peers/vlink-peer/authentication

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    if input_yang_obj.auth_text_simple._changed():
        input_yang_obj.auth_text_simple = input_yang_obj.auth_text_simple
        
    if input_yang_obj.key_id._changed():
        input_yang_obj.key_id = input_yang_obj.key_id
        
    if input_yang_obj.auth_text_md5._changed():
        input_yang_obj.auth_text_md5 = input_yang_obj.auth_text_md5
        
    if input_yang_obj.key_chain_name._changed():
        input_yang_obj.key_chain_name = input_yang_obj.key_chain_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer(input_yang_obj: yc_vlink_peer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/vlink-peers/vlink-peer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.retransmit_interval._changed():
        input_yang_obj.retransmit_interval = input_yang_obj.retransmit_interval
        
    if input_yang_obj.smart_discover._changed():
        input_yang_obj.smart_discover = input_yang_obj.smart_discover
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_timer(input_yang_obj.timer, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_authentication(input_yang_obj.authentication, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers(input_yang_obj: yc_vlink_peers_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/vlink-peers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vlink_peer.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_timer(input_yang_obj: yc_timer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_timer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/sham-links/sham-link/timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hello_interval._changed():
        input_yang_obj.hello_interval = input_yang_obj.hello_interval
        
    if input_yang_obj.dead_interval._changed():
        input_yang_obj.dead_interval = input_yang_obj.dead_interval
        
    if input_yang_obj.trans_delay_interval._changed():
        input_yang_obj.trans_delay_interval = input_yang_obj.trans_delay_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_authentication(input_yang_obj: yc_authentication_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_authentication, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/sham-links/sham-link/authentication

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    if input_yang_obj.auth_text_simple._changed():
        input_yang_obj.auth_text_simple = input_yang_obj.auth_text_simple
        
    if input_yang_obj.key_id._changed():
        input_yang_obj.key_id = input_yang_obj.key_id
        
    if input_yang_obj.auth_text_md5._changed():
        input_yang_obj.auth_text_md5 = input_yang_obj.auth_text_md5
        
    if input_yang_obj.key_chain_name._changed():
        input_yang_obj.key_chain_name = input_yang_obj.key_chain_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link(input_yang_obj: yc_sham_link_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/sham-links/sham-link

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.retransmit_interval._changed():
        input_yang_obj.retransmit_interval = input_yang_obj.retransmit_interval
        
    if input_yang_obj.smart_discover._changed():
        input_yang_obj.smart_discover = input_yang_obj.smart_discover
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_timer(input_yang_obj.timer, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_authentication(input_yang_obj.authentication, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links(input_yang_obj: yc_sham_links_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/sham-links

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.sham_link.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_filters_filter(input_yang_obj: yc_filter_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_filters_filter, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/filters/filter

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.name_or_num._changed():
        input_yang_obj.name_or_num = input_yang_obj.name_or_num
        
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    if input_yang_obj.route_policy._changed():
        input_yang_obj.route_policy = input_yang_obj.route_policy
        
    if input_yang_obj.route_filter._changed():
        input_yang_obj.route_filter = input_yang_obj.route_filter
        
    if input_yang_obj.include_abr_summary._changed():
        input_yang_obj.include_abr_summary = input_yang_obj.include_abr_summary
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_filters(input_yang_obj: yc_filters_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_filters, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/filters

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.filter.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_filters_filter(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_frr_ti_lfa(input_yang_obj: yc_ti_lfa_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_frr_ti_lfa, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/frr/ti-lfa

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.disable._changed():
        input_yang_obj.disable = input_yang_obj.disable
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_frr(input_yang_obj: yc_frr_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_frr, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/frr

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.frr_disable._changed():
        input_yang_obj.frr_disable = input_yang_obj.frr_disable
        
    if input_yang_obj.rlfa_disable._changed():
        input_yang_obj.rlfa_disable = input_yang_obj.rlfa_disable
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_frr_ti_lfa(input_yang_obj.ti_lfa, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_timer(input_yang_obj: yc_timer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_timer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hello_interval._changed():
        input_yang_obj.hello_interval = input_yang_obj.hello_interval
        
    if input_yang_obj.hello_conser._changed():
        input_yang_obj.hello_conser = input_yang_obj.hello_conser
        
    if input_yang_obj.dead_interval._changed():
        input_yang_obj.dead_interval = input_yang_obj.dead_interval
        
    if input_yang_obj.wait_interval._changed():
        input_yang_obj.wait_interval = input_yang_obj.wait_interval
        
    if input_yang_obj.poll_interval._changed():
        input_yang_obj.poll_interval = input_yang_obj.poll_interval
        
    if input_yang_obj.retransmit_interval._changed():
        input_yang_obj.retransmit_interval = input_yang_obj.retransmit_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_ldp_sync(input_yang_obj: yc_ldp_sync_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_ldp_sync, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/ldp-sync

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hold_down_timer._changed():
        input_yang_obj.hold_down_timer = input_yang_obj.hold_down_timer
        
    if input_yang_obj.timer._changed():
        input_yang_obj.timer = input_yang_obj.timer
        
    if input_yang_obj.infinite._changed():
        input_yang_obj.infinite = input_yang_obj.infinite
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_bfd(input_yang_obj: yc_bfd_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_bfd, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/bfd

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.block._changed():
        input_yang_obj.block = input_yang_obj.block
        
    if input_yang_obj.detect_multiplier._changed():
        input_yang_obj.detect_multiplier = input_yang_obj.detect_multiplier
        
    if input_yang_obj.min_tx._changed():
        input_yang_obj.min_tx = input_yang_obj.min_tx
        
    if input_yang_obj.min_rx._changed():
        input_yang_obj.min_rx = input_yang_obj.min_rx
        
    if input_yang_obj.frr_binding._changed():
        input_yang_obj.frr_binding = input_yang_obj.frr_binding
        
    if input_yang_obj.incr_cost_block._changed():
        input_yang_obj.incr_cost_block = input_yang_obj.incr_cost_block
        
    if input_yang_obj.incr_cost_value._changed():
        input_yang_obj.incr_cost_value = input_yang_obj.incr_cost_value
        
    if input_yang_obj.per_link_flag._changed():
        input_yang_obj.per_link_flag = input_yang_obj.per_link_flag
        
    if input_yang_obj.one_arm_echo_flag._changed():
        input_yang_obj.one_arm_echo_flag = input_yang_obj.one_arm_echo_flag
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_authentication(input_yang_obj: yc_authentication_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_authentication, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/authentication

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    if input_yang_obj.auth_text_simple._changed():
        input_yang_obj.auth_text_simple = input_yang_obj.auth_text_simple
        
    if input_yang_obj.key_id._changed():
        input_yang_obj.key_id = input_yang_obj.key_id
        
    if input_yang_obj.auth_text_md5._changed():
        input_yang_obj.auth_text_md5 = input_yang_obj.auth_text_md5
        
    if input_yang_obj.key_chain_name._changed():
        input_yang_obj.key_chain_name = input_yang_obj.key_chain_name
        
    return translated_yang_obj

def _translate__network_instance_global(input_yang_obj: yc_global__huawei_network_instance__network_instance_global, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/global

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cfg_router_id._changed():
        input_yang_obj.cfg_router_id = input_yang_obj.cfg_router_id
        
    if input_yang_obj.as_notation_plain._changed():
        input_yang_obj.as_notation_plain = input_yang_obj.as_notation_plain
        
    if input_yang_obj.route_distinguisher_auto_ip._changed():
        input_yang_obj.route_distinguisher_auto_ip = input_yang_obj.route_distinguisher_auto_ip
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_parameter(input_yang_obj: yc_parameter_huawei_network_instance__network_instance_instances_instance_parameter, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/parameter

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.identifier._changed():
        input_yang_obj.identifier = input_yang_obj.identifier
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_vpn_targets_vpn_target(input_yang_obj: yc_vpn_target_huawei_network_instance__network_instance_instances_instance_afs_af_vpn_targets_vpn_target, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_vpn_targets(input_yang_obj: yc_vpn_targets_huawei_network_instance__network_instance_instances_instance_afs_af_vpn_targets, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_state(input_yang_obj: yc_state_huawei_network_instance__network_instance_instances_instance_afs_af_state, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/state

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.create_time._changed():
        input_yang_obj.create_time = input_yang_obj.create_time
        
    if input_yang_obj.up_time._changed():
        input_yang_obj.up_time = input_yang_obj.up_time
        
    if input_yang_obj.label._changed():
        input_yang_obj.label = input_yang_obj.label
        
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_tunnel_infos_tunnel_info(input_yang_obj: yc_tunnel_info_huawei_network_instance__network_instance_instances_instance_afs_af_tunnel_infos_tunnel_info, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/tunnel-infos/tunnel-info

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.color._changed():
        input_yang_obj.color = input_yang_obj.color
        
    if input_yang_obj.name._changed():
        input_yang_obj.name = input_yang_obj.name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_tunnel_infos(input_yang_obj: yc_tunnel_infos_huawei_network_instance__network_instance_instances_instance_afs_af_tunnel_infos, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/tunnel-infos

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.tunnel_info.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af_tunnel_infos_tunnel_info(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_ospf_import_rts_ospf_import_rt(input_yang_obj: yc_ospf_import_rt_huawei_network_instance__network_instance_instances_instance_afs_af_ospf_import_rts_ospf_import_rt, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/ospf-import-rts/ospf-import-rt

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.valid_route._changed():
        input_yang_obj.valid_route = input_yang_obj.valid_route
        
    if input_yang_obj.route_policy._changed():
        input_yang_obj.route_policy = input_yang_obj.route_policy
        
    if input_yang_obj.route_filter._changed():
        input_yang_obj.route_filter = input_yang_obj.route_filter
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_ospf_import_rts(input_yang_obj: yc_ospf_import_rts_huawei_network_instance__network_instance_instances_instance_afs_af_ospf_import_rts, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/ospf-import-rts

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ospf_import_rt.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af_ospf_import_rts_ospf_import_rt(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af(input_yang_obj: yc_af_huawei_network_instance__network_instance_instances_instance_afs_af, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.route_distinguisher._changed():
        input_yang_obj.route_distinguisher = input_yang_obj.route_distinguisher
        
    if input_yang_obj.effect_route_distinguisher._changed():
        input_yang_obj.effect_route_distinguisher = input_yang_obj.effect_route_distinguisher
        
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    if input_yang_obj.export_policy_add_ert_first._changed():
        input_yang_obj.export_policy_add_ert_first = input_yang_obj.export_policy_add_ert_first
        
    if input_yang_obj.label_mode._changed():
        input_yang_obj.label_mode = input_yang_obj.label_mode
        
    if input_yang_obj.vpn_frr._changed():
        input_yang_obj.vpn_frr = input_yang_obj.vpn_frr
        
    if input_yang_obj.tunnel_policy._changed():
        input_yang_obj.tunnel_policy = input_yang_obj.tunnel_policy
        
    if input_yang_obj.transit_vpn._changed():
        input_yang_obj.transit_vpn = input_yang_obj.transit_vpn
        
    if input_yang_obj.lsp_operation._changed():
        input_yang_obj.lsp_operation = input_yang_obj.lsp_operation
        
    if input_yang_obj.default_color._changed():
        input_yang_obj.default_color = input_yang_obj.default_color
        
    innerobj = _translate__network_instance_instances_instance_afs_af_vpn_targets(input_yang_obj.vpn_targets, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_afs_af_state(input_yang_obj.state, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_afs_af_tunnel_infos(input_yang_obj.tunnel_infos, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_afs_af_ospf_import_rts(input_yang_obj.ospf_import_rts, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs(input_yang_obj: yc_afs_huawei_network_instance__network_instance_instances_instance_afs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.af.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_gtsm(input_yang_obj: yc_gtsm_huawei_network_instance__network_instance_instances_instance_ospfv2_gtsm, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/gtsm

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hops._changed():
        input_yang_obj.hops = input_yang_obj.hops
        
    if input_yang_obj.nonstandard_multicast._changed():
        input_yang_obj.nonstandard_multicast = input_yang_obj.nonstandard_multicast
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id(input_yang_obj: yc_domain_id_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net/domain-id

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.domain_id._changed():
        input_yang_obj.domain_id = input_yang_obj.domain_id
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    if input_yang_obj.value._changed():
        input_yang_obj.value = input_yang_obj.value
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys_domain_id_secondary(input_yang_obj: yc_domain_id_secondary_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys_domain_id_secondary, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net/domain-id-secondarys/domain-id-secondary

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys(input_yang_obj: yc_domain_id_secondarys_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net/domain-id-secondarys

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.domain_id_secondary.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys_domain_id_secondary(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net(input_yang_obj: yc_private_net_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.eca_route._changed():
        input_yang_obj.eca_route = input_yang_obj.eca_route
        
    if input_yang_obj.disable._changed():
        input_yang_obj.disable = input_yang_obj.disable
        
    if input_yang_obj.value._changed():
        input_yang_obj.value = input_yang_obj.value
        
    if input_yang_obj.vpn_capability._changed():
        input_yang_obj.vpn_capability = input_yang_obj.vpn_capability
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id(input_yang_obj.domain_id, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys(input_yang_obj.domain_id_secondarys, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_host_name(input_yang_obj: yc_host_name_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_host_name, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/host-name

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.value._changed():
        input_yang_obj.value = input_yang_obj.value
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bandwidth(input_yang_obj: yc_bandwidth_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bandwidth, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bandwidth

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.config_bw_enable._changed():
        input_yang_obj.config_bw_enable = input_yang_obj.config_bw_enable
        
    if input_yang_obj.reference_value._changed():
        input_yang_obj.reference_value = input_yang_obj.reference_value
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arrival(input_yang_obj: yc_lsa_arrival_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arrival, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-arrival

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.max_interval._changed():
        input_yang_obj.max_interval = input_yang_obj.max_interval
        
    if input_yang_obj.start_interval._changed():
        input_yang_obj.start_interval = input_yang_obj.start_interval
        
    if input_yang_obj.hold_interval._changed():
        input_yang_obj.hold_interval = input_yang_obj.hold_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arr_supp_flap(input_yang_obj: yc_lsa_arr_supp_flap_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arr_supp_flap, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-arr-supp-flap

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.threshold_count._changed():
        input_yang_obj.threshold_count = input_yang_obj.threshold_count
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_originate(input_yang_obj: yc_lsa_originate_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_originate, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-originate

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.other_type_interval._changed():
        input_yang_obj.other_type_interval = input_yang_obj.other_type_interval
        
    if input_yang_obj.max_interval._changed():
        input_yang_obj.max_interval = input_yang_obj.max_interval
        
    if input_yang_obj.start_interval._changed():
        input_yang_obj.start_interval = input_yang_obj.start_interval
        
    if input_yang_obj.hold_interval._changed():
        input_yang_obj.hold_interval = input_yang_obj.hold_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_org_supp_flap(input_yang_obj: yc_lsa_org_supp_flap_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_org_supp_flap, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-org-supp-flap

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.threshold_count._changed():
        input_yang_obj.threshold_count = input_yang_obj.threshold_count
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_spf_schedule(input_yang_obj: yc_spf_schedule_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_spf_schedule, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/spf-schedule

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.max_interval._changed():
        input_yang_obj.max_interval = input_yang_obj.max_interval
        
    if input_yang_obj.start_interval._changed():
        input_yang_obj.start_interval = input_yang_obj.start_interval
        
    if input_yang_obj.hold_interval._changed():
        input_yang_obj.hold_interval = input_yang_obj.hold_interval
        
    if input_yang_obj.conserv_flag._changed():
        input_yang_obj.conserv_flag = input_yang_obj.conserv_flag
        
    if input_yang_obj.millisecond._changed():
        input_yang_obj.millisecond = input_yang_obj.millisecond
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer(input_yang_obj: yc_timer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arrival(input_yang_obj.lsa_arrival, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arr_supp_flap(input_yang_obj.lsa_arr_supp_flap, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_originate(input_yang_obj.lsa_originate, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_org_supp_flap(input_yang_obj.lsa_org_supp_flap, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_spf_schedule(input_yang_obj.spf_schedule, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bfd(input_yang_obj: yc_bfd_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bfd, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bfd

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.min_rx._changed():
        input_yang_obj.min_rx = input_yang_obj.min_rx
        
    if input_yang_obj.min_tx._changed():
        input_yang_obj.min_tx = input_yang_obj.min_tx
        
    if input_yang_obj.detect_multiplier._changed():
        input_yang_obj.detect_multiplier = input_yang_obj.detect_multiplier
        
    if input_yang_obj.incr_cost._changed():
        input_yang_obj.incr_cost = input_yang_obj.incr_cost
        
    if input_yang_obj.frr_binding._changed():
        input_yang_obj.frr_binding = input_yang_obj.frr_binding
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_metric_delay(input_yang_obj: yc_metric_delay_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_metric_delay, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/metric-delay

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.adv_enable._changed():
        input_yang_obj.adv_enable = input_yang_obj.adv_enable
        
    if input_yang_obj.suppress_timer._changed():
        input_yang_obj.suppress_timer = input_yang_obj.suppress_timer
        
    if input_yang_obj.suppress_percent._changed():
        input_yang_obj.suppress_percent = input_yang_obj.suppress_percent
        
    if input_yang_obj.suppress_absolute._changed():
        input_yang_obj.suppress_absolute = input_yang_obj.suppress_absolute
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bier(input_yang_obj: yc_bier_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bier, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_stub_router(input_yang_obj: yc_stub_router_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_stub_router, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/stub-router

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.flag._changed():
        input_yang_obj.flag = input_yang_obj.flag
        
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.include_stub._changed():
        input_yang_obj.include_stub = input_yang_obj.include_stub
        
    if input_yang_obj.external_lsa._changed():
        input_yang_obj.external_lsa = input_yang_obj.external_lsa
        
    if input_yang_obj.external_cost._changed():
        input_yang_obj.external_cost = input_yang_obj.external_cost
        
    if input_yang_obj.summary_lsa._changed():
        input_yang_obj.summary_lsa = input_yang_obj.summary_lsa
        
    if input_yang_obj.summary_cost._changed():
        input_yang_obj.summary_cost = input_yang_obj.summary_cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bgp_ls(input_yang_obj: yc_bgp_ls_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bgp_ls, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bgp-ls

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.identifier._changed():
        input_yang_obj.identifier = input_yang_obj.identifier
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_import_limit(input_yang_obj: yc_import_limit_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_import_limit, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/import-limit

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.max_number._changed():
        input_yang_obj.max_number = input_yang_obj.max_number
        
    if input_yang_obj.threshold_upper._changed():
        input_yang_obj.threshold_upper = input_yang_obj.threshold_upper
        
    if input_yang_obj.threshold_lower._changed():
        input_yang_obj.threshold_lower = input_yang_obj.threshold_lower
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_spf_control(input_yang_obj: yc_spf_control_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_spf_control, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/spf-control

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.max_load_balancing._changed():
        input_yang_obj.max_load_balancing = input_yang_obj.max_load_balancing
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_default_para(input_yang_obj: yc_default_para_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_default_para, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/default-para

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost_value._changed():
        input_yang_obj.cost_value = input_yang_obj.cost_value
        
    if input_yang_obj.cost_inherit_metric._changed():
        input_yang_obj.cost_inherit_metric = input_yang_obj.cost_inherit_metric
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_avoid_micro_loop(input_yang_obj: yc_avoid_micro_loop_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_avoid_micro_loop, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/avoid-micro-loop

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.frr_enable._changed():
        input_yang_obj.frr_enable = input_yang_obj.frr_enable
        
    if input_yang_obj.frr_rib_update_delay._changed():
        input_yang_obj.frr_rib_update_delay = input_yang_obj.frr_rib_update_delay
        
    if input_yang_obj.te_tunnel_enable._changed():
        input_yang_obj.te_tunnel_enable = input_yang_obj.te_tunnel_enable
        
    if input_yang_obj.te_tunnel_rib_update_delay._changed():
        input_yang_obj.te_tunnel_rib_update_delay = input_yang_obj.te_tunnel_rib_update_delay
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs_asbr_summary_prefix(input_yang_obj: yc_asbr_summary_prefix_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs_asbr_summary_prefix, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/asbr-summary-prefixs/asbr-summary-prefix

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.distribute_delay._changed():
        input_yang_obj.distribute_delay = input_yang_obj.distribute_delay
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.advertise._changed():
        input_yang_obj.advertise = input_yang_obj.advertise
        
    if input_yang_obj.generate_null_zero._changed():
        input_yang_obj.generate_null_zero = input_yang_obj.generate_null_zero
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs(input_yang_obj: yc_asbr_summary_prefixs_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/asbr-summary-prefixs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.asbr_summary_prefix.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs_asbr_summary_prefix(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_summary(input_yang_obj: yc_summary_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_summary, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/summary

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_no_summary(input_yang_obj: yc_no_summary_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_no_summary, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/no-summary

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    if input_yang_obj.distribute_delay._changed():
        input_yang_obj.distribute_delay = input_yang_obj.distribute_delay
        
    if input_yang_obj.permit_calculate_other._changed():
        input_yang_obj.permit_calculate_other = input_yang_obj.permit_calculate_other
        
    if input_yang_obj.permit_ibgp._changed():
        input_yang_obj.permit_ibgp = input_yang_obj.permit_ibgp
        
    if input_yang_obj.always._changed():
        input_yang_obj.always = input_yang_obj.always
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_route_preferences_route_preference(input_yang_obj: yc_route_preference_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_route_preferences_route_preference, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/route-preferences/route-preference

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.preference._changed():
        input_yang_obj.preference = input_yang_obj.preference
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_route_preferences(input_yang_obj: yc_route_preferences_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_route_preferences, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/route-preferences

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_preference.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_route_preferences_route_preference(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights_nexthop_weight(input_yang_obj: yc_nexthop_weight_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights_nexthop_weight, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/nexthop-weights/nexthop-weight

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.weight._changed():
        input_yang_obj.weight = input_yang_obj.weight
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights(input_yang_obj: yc_nexthop_weights_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/nexthop-weights

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.nexthop_weight.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights_nexthop_weight(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys_prefix_priority(input_yang_obj: yc_prefix_priority_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys_prefix_priority, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/prefix-prioritys/prefix-priority

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys(input_yang_obj: yc_prefix_prioritys_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/prefix-prioritys

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.prefix_priority.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys_prefix_priority(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_ecmp_prefer(input_yang_obj: yc_ecmp_prefer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_ecmp_prefer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/ecmp-prefer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.te_tunnel._changed():
        input_yang_obj.te_tunnel = input_yang_obj.te_tunnel
        
    if input_yang_obj.intact._changed():
        input_yang_obj.intact = input_yang_obj.intact
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr_tiebreaker(input_yang_obj: yc_tiebreaker_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr_tiebreaker, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr/tiebreaker

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.node_protect._changed():
        input_yang_obj.node_protect = input_yang_obj.node_protect
        
    if input_yang_obj.lowest_cost._changed():
        input_yang_obj.lowest_cost = input_yang_obj.lowest_cost
        
    if input_yang_obj.ldp_sync._changed():
        input_yang_obj.ldp_sync = input_yang_obj.ldp_sync
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr_route_policy(input_yang_obj: yc_route_policy_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr_route_policy, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr/route-policy

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr_rlfa_tunnel(input_yang_obj: yc_rlfa_tunnel_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr_rlfa_tunnel, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr/rlfa-tunnel

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.ip_prefix_name._changed():
        input_yang_obj.ip_prefix_name = input_yang_obj.ip_prefix_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr(input_yang_obj: yc_frr_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.lfa_enable._changed():
        input_yang_obj.lfa_enable = input_yang_obj.lfa_enable
        
    if input_yang_obj.rlfa_enable._changed():
        input_yang_obj.rlfa_enable = input_yang_obj.rlfa_enable
        
    if input_yang_obj.rlfa_max_cost._changed():
        input_yang_obj.rlfa_max_cost = input_yang_obj.rlfa_max_cost
        
    if input_yang_obj.tilfa_enable._changed():
        input_yang_obj.tilfa_enable = input_yang_obj.tilfa_enable
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_frr_tiebreaker(input_yang_obj.tiebreaker, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_frr_route_policy(input_yang_obj.route_policy, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_frr_rlfa_tunnel(input_yang_obj.rlfa_tunnel, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_local_mt_filter(input_yang_obj: yc_local_mt_filter_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_local_mt_filter, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/local-mt-filter

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.acl_name_or_num._changed():
        input_yang_obj.acl_name_or_num = input_yang_obj.acl_name_or_num
        
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_peers_peer(input_yang_obj: yc_peer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_peers_peer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/peers/peer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.priority._changed():
        input_yang_obj.priority = input_yang_obj.priority
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_peers(input_yang_obj: yc_peers_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_peers, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/peers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.peer.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_peers_peer(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs_filter_lsa_out(input_yang_obj: yc_filter_lsa_out_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs_filter_lsa_out, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/filter-lsa-outs/filter-lsa-out

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs(input_yang_obj: yc_filter_lsa_outs_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/filter-lsa-outs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.filter_lsa_out.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs_filter_lsa_out(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_gr_ietf(input_yang_obj: yc_gr_ietf_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_gr_ietf, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/gr-ietf

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.never._changed():
        input_yang_obj.never = input_yang_obj.never
        
    if input_yang_obj.planned_only._changed():
        input_yang_obj.planned_only = input_yang_obj.planned_only
        
    if input_yang_obj.ignore_external_lsa._changed():
        input_yang_obj.ignore_external_lsa = input_yang_obj.ignore_external_lsa
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_flood_control(input_yang_obj: yc_flood_control_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_flood_control, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/flood-control

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.number._changed():
        input_yang_obj.number = input_yang_obj.number
        
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids_summary_router_id(input_yang_obj: yc_summary_router_id_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids_summary_router_id, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/dn-bit/summary-router-ids/summary-router-id

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids(input_yang_obj: yc_summary_router_ids_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/dn-bit/summary-router-ids

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.summary_router_id.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids_summary_router_id(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_dn_bit(input_yang_obj: yc_dn_bit_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_dn_bit, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/dn-bit

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.set_ase._changed():
        input_yang_obj.set_ase = input_yang_obj.set_ase
        
    if input_yang_obj.set_nssa._changed():
        input_yang_obj.set_nssa = input_yang_obj.set_nssa
        
    if input_yang_obj.set_summary._changed():
        input_yang_obj.set_summary = input_yang_obj.set_summary
        
    if input_yang_obj.check_ase._changed():
        input_yang_obj.check_ase = input_yang_obj.check_ase
        
    if input_yang_obj.check_nssa._changed():
        input_yang_obj.check_nssa = input_yang_obj.check_nssa
        
    if input_yang_obj.check_summary._changed():
        input_yang_obj.check_summary = input_yang_obj.check_summary
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids(input_yang_obj.summary_router_ids, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_filter_import(input_yang_obj: yc_filter_import_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_filter_import, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/filter-import

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.name_or_num._changed():
        input_yang_obj.name_or_num = input_yang_obj.name_or_num
        
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    if input_yang_obj.route_policy._changed():
        input_yang_obj.route_policy = input_yang_obj.route_policy
        
    if input_yang_obj.route_filter._changed():
        input_yang_obj.route_filter = input_yang_obj.route_filter
        
    if input_yang_obj.secondary._changed():
        input_yang_obj.secondary = input_yang_obj.secondary
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_filter_exports_filter_export(input_yang_obj: yc_filter_export_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_filter_exports_filter_export, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/filter-exports/filter-export

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.name_or_num._changed():
        input_yang_obj.name_or_num = input_yang_obj.name_or_num
        
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    if input_yang_obj.route_policy._changed():
        input_yang_obj.route_policy = input_yang_obj.route_policy
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_filter_exports(input_yang_obj: yc_filter_exports_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_filter_exports, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/filter-exports

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.filter_export.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_filter_exports_filter_export(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_import_routes_import_route(input_yang_obj: yc_import_route_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_import_routes_import_route, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/import-routes/import-route

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    if input_yang_obj.permit_ibgp._changed():
        input_yang_obj.permit_ibgp = input_yang_obj.permit_ibgp
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_import_routes(input_yang_obj: yc_import_routes_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_import_routes, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/import-routes

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.import_route.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_import_routes_import_route(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_silent_interfaces_silent_interface(input_yang_obj: yc_silent_interface_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_silent_interfaces_silent_interface, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/silent-interfaces/silent-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_silent_interfaces(input_yang_obj: yc_silent_interfaces_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_silent_interfaces, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/silent-interfaces

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.silent_interface.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_silent_interfaces_silent_interface(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_undo_silent_interfaces_undo_silent_interface(input_yang_obj: yc_undo_silent_interface_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_undo_silent_interfaces_undo_silent_interface, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/undo-silent-interfaces/undo-silent-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_undo_silent_interfaces(input_yang_obj: yc_undo_silent_interfaces_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_undo_silent_interfaces, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/undo-silent-interfaces

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.undo_silent_interface.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_undo_silent_interfaces_undo_silent_interface(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_cost_bindings_cost_binding(input_yang_obj: yc_cost_binding_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_cost_bindings_cost_binding, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/cost-bindings/cost-binding

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_cost_bindings(input_yang_obj: yc_cost_bindings_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_cost_bindings, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/cost-bindings

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.cost_binding.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_cost_bindings_cost_binding(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_networks_network(input_yang_obj: yc_network_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_networks_network, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/networks/network

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.description._changed():
        input_yang_obj.description = input_yang_obj.description
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_networks(input_yang_obj: yc_networks_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_networks, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/networks

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.network.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_networks_network(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_stub(input_yang_obj: yc_stub_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_stub, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/stub

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.backbone_peer_ignore._changed():
        input_yang_obj.backbone_peer_ignore = input_yang_obj.backbone_peer_ignore
        
    if input_yang_obj.no_summary._changed():
        input_yang_obj.no_summary = input_yang_obj.no_summary
        
    if input_yang_obj.default_cost._changed():
        input_yang_obj.default_cost = input_yang_obj.default_cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_nssa(input_yang_obj: yc_nssa_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_nssa, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/nssa

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.no_summary._changed():
        input_yang_obj.no_summary = input_yang_obj.no_summary
        
    if input_yang_obj.translator_always._changed():
        input_yang_obj.translator_always = input_yang_obj.translator_always
        
    if input_yang_obj.default_route_advertise._changed():
        input_yang_obj.default_route_advertise = input_yang_obj.default_route_advertise
        
    if input_yang_obj.backbone_peer_ignore._changed():
        input_yang_obj.backbone_peer_ignore = input_yang_obj.backbone_peer_ignore
        
    if input_yang_obj.no_import_route._changed():
        input_yang_obj.no_import_route = input_yang_obj.no_import_route
        
    if input_yang_obj.set_n_bit._changed():
        input_yang_obj.set_n_bit = input_yang_obj.set_n_bit
        
    if input_yang_obj.suppress_fa._changed():
        input_yang_obj.suppress_fa = input_yang_obj.suppress_fa
        
    if input_yang_obj.zero_address_forwarding._changed():
        input_yang_obj.zero_address_forwarding = input_yang_obj.zero_address_forwarding
        
    if input_yang_obj.translator_interval._changed():
        input_yang_obj.translator_interval = input_yang_obj.translator_interval
        
    if input_yang_obj.default_cost._changed():
        input_yang_obj.default_cost = input_yang_obj.default_cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_ldp_sync(input_yang_obj: yc_ldp_sync_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_ldp_sync, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/ldp-sync

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.timer._changed():
        input_yang_obj.timer = input_yang_obj.timer
        
    if input_yang_obj.infinite._changed():
        input_yang_obj.infinite = input_yang_obj.infinite
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_mpls_te(input_yang_obj: yc_mpls_te_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_mpls_te, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/mpls-te

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.standard_complying._changed():
        input_yang_obj.standard_complying = input_yang_obj.standard_complying
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_authentication(input_yang_obj: yc_authentication_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_authentication, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/authentication

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    if input_yang_obj.auth_text_simple._changed():
        input_yang_obj.auth_text_simple = input_yang_obj.auth_text_simple
        
    if input_yang_obj.key_id._changed():
        input_yang_obj.key_id = input_yang_obj.key_id
        
    if input_yang_obj.auth_text_md5._changed():
        input_yang_obj.auth_text_md5 = input_yang_obj.auth_text_md5
        
    if input_yang_obj.key_chain_name._changed():
        input_yang_obj.key_chain_name = input_yang_obj.key_chain_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_abr_summary_prefixs_abr_summary_prefix(input_yang_obj: yc_abr_summary_prefix_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_abr_summary_prefixs_abr_summary_prefix, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/abr-summary-prefixs/abr-summary-prefix

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost_value._changed():
        input_yang_obj.cost_value = input_yang_obj.cost_value
        
    if input_yang_obj.cost_inherit_min._changed():
        input_yang_obj.cost_inherit_min = input_yang_obj.cost_inherit_min
        
    if input_yang_obj.hold_max_cost._changed():
        input_yang_obj.hold_max_cost = input_yang_obj.hold_max_cost
        
    if input_yang_obj.advertise._changed():
        input_yang_obj.advertise = input_yang_obj.advertise
        
    if input_yang_obj.generate_null_zero._changed():
        input_yang_obj.generate_null_zero = input_yang_obj.generate_null_zero
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_abr_summary_prefixs(input_yang_obj: yc_abr_summary_prefixs_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_abr_summary_prefixs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/abr-summary-prefixs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.abr_summary_prefix.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_abr_summary_prefixs_abr_summary_prefix(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_timer(input_yang_obj: yc_timer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_timer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/vlink-peers/vlink-peer/timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hello_interval._changed():
        input_yang_obj.hello_interval = input_yang_obj.hello_interval
        
    if input_yang_obj.dead_interval._changed():
        input_yang_obj.dead_interval = input_yang_obj.dead_interval
        
    if input_yang_obj.trans_delay_interval._changed():
        input_yang_obj.trans_delay_interval = input_yang_obj.trans_delay_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_authentication(input_yang_obj: yc_authentication_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_authentication, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/vlink-peers/vlink-peer/authentication

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    if input_yang_obj.auth_text_simple._changed():
        input_yang_obj.auth_text_simple = input_yang_obj.auth_text_simple
        
    if input_yang_obj.key_id._changed():
        input_yang_obj.key_id = input_yang_obj.key_id
        
    if input_yang_obj.auth_text_md5._changed():
        input_yang_obj.auth_text_md5 = input_yang_obj.auth_text_md5
        
    if input_yang_obj.key_chain_name._changed():
        input_yang_obj.key_chain_name = input_yang_obj.key_chain_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer(input_yang_obj: yc_vlink_peer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/vlink-peers/vlink-peer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.retransmit_interval._changed():
        input_yang_obj.retransmit_interval = input_yang_obj.retransmit_interval
        
    if input_yang_obj.smart_discover._changed():
        input_yang_obj.smart_discover = input_yang_obj.smart_discover
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_timer(input_yang_obj.timer, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_authentication(input_yang_obj.authentication, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers(input_yang_obj: yc_vlink_peers_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/vlink-peers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vlink_peer.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_timer(input_yang_obj: yc_timer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_timer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/sham-links/sham-link/timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hello_interval._changed():
        input_yang_obj.hello_interval = input_yang_obj.hello_interval
        
    if input_yang_obj.dead_interval._changed():
        input_yang_obj.dead_interval = input_yang_obj.dead_interval
        
    if input_yang_obj.trans_delay_interval._changed():
        input_yang_obj.trans_delay_interval = input_yang_obj.trans_delay_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_authentication(input_yang_obj: yc_authentication_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_authentication, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/sham-links/sham-link/authentication

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    if input_yang_obj.auth_text_simple._changed():
        input_yang_obj.auth_text_simple = input_yang_obj.auth_text_simple
        
    if input_yang_obj.key_id._changed():
        input_yang_obj.key_id = input_yang_obj.key_id
        
    if input_yang_obj.auth_text_md5._changed():
        input_yang_obj.auth_text_md5 = input_yang_obj.auth_text_md5
        
    if input_yang_obj.key_chain_name._changed():
        input_yang_obj.key_chain_name = input_yang_obj.key_chain_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link(input_yang_obj: yc_sham_link_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/sham-links/sham-link

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.retransmit_interval._changed():
        input_yang_obj.retransmit_interval = input_yang_obj.retransmit_interval
        
    if input_yang_obj.smart_discover._changed():
        input_yang_obj.smart_discover = input_yang_obj.smart_discover
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_timer(input_yang_obj.timer, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_authentication(input_yang_obj.authentication, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links(input_yang_obj: yc_sham_links_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/sham-links

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.sham_link.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_filters_filter(input_yang_obj: yc_filter_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_filters_filter, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/filters/filter

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.name_or_num._changed():
        input_yang_obj.name_or_num = input_yang_obj.name_or_num
        
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    if input_yang_obj.route_policy._changed():
        input_yang_obj.route_policy = input_yang_obj.route_policy
        
    if input_yang_obj.route_filter._changed():
        input_yang_obj.route_filter = input_yang_obj.route_filter
        
    if input_yang_obj.include_abr_summary._changed():
        input_yang_obj.include_abr_summary = input_yang_obj.include_abr_summary
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_filters(input_yang_obj: yc_filters_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_filters, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/filters

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.filter.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_filters_filter(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_frr_ti_lfa(input_yang_obj: yc_ti_lfa_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_frr_ti_lfa, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/frr/ti-lfa

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.disable._changed():
        input_yang_obj.disable = input_yang_obj.disable
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_frr(input_yang_obj: yc_frr_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_frr, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/frr

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.frr_disable._changed():
        input_yang_obj.frr_disable = input_yang_obj.frr_disable
        
    if input_yang_obj.rlfa_disable._changed():
        input_yang_obj.rlfa_disable = input_yang_obj.rlfa_disable
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_frr_ti_lfa(input_yang_obj.ti_lfa, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_timer(input_yang_obj: yc_timer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_timer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hello_interval._changed():
        input_yang_obj.hello_interval = input_yang_obj.hello_interval
        
    if input_yang_obj.hello_conser._changed():
        input_yang_obj.hello_conser = input_yang_obj.hello_conser
        
    if input_yang_obj.dead_interval._changed():
        input_yang_obj.dead_interval = input_yang_obj.dead_interval
        
    if input_yang_obj.wait_interval._changed():
        input_yang_obj.wait_interval = input_yang_obj.wait_interval
        
    if input_yang_obj.poll_interval._changed():
        input_yang_obj.poll_interval = input_yang_obj.poll_interval
        
    if input_yang_obj.retransmit_interval._changed():
        input_yang_obj.retransmit_interval = input_yang_obj.retransmit_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_ldp_sync(input_yang_obj: yc_ldp_sync_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_ldp_sync, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/ldp-sync

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hold_down_timer._changed():
        input_yang_obj.hold_down_timer = input_yang_obj.hold_down_timer
        
    if input_yang_obj.timer._changed():
        input_yang_obj.timer = input_yang_obj.timer
        
    if input_yang_obj.infinite._changed():
        input_yang_obj.infinite = input_yang_obj.infinite
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_bfd(input_yang_obj: yc_bfd_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_bfd, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/bfd

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.block._changed():
        input_yang_obj.block = input_yang_obj.block
        
    if input_yang_obj.detect_multiplier._changed():
        input_yang_obj.detect_multiplier = input_yang_obj.detect_multiplier
        
    if input_yang_obj.min_tx._changed():
        input_yang_obj.min_tx = input_yang_obj.min_tx
        
    if input_yang_obj.min_rx._changed():
        input_yang_obj.min_rx = input_yang_obj.min_rx
        
    if input_yang_obj.frr_binding._changed():
        input_yang_obj.frr_binding = input_yang_obj.frr_binding
        
    if input_yang_obj.incr_cost_block._changed():
        input_yang_obj.incr_cost_block = input_yang_obj.incr_cost_block
        
    if input_yang_obj.incr_cost_value._changed():
        input_yang_obj.incr_cost_value = input_yang_obj.incr_cost_value
        
    if input_yang_obj.per_link_flag._changed():
        input_yang_obj.per_link_flag = input_yang_obj.per_link_flag
        
    if input_yang_obj.one_arm_echo_flag._changed():
        input_yang_obj.one_arm_echo_flag = input_yang_obj.one_arm_echo_flag
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_authentication(input_yang_obj: yc_authentication_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_authentication, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/authentication

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    if input_yang_obj.auth_text_simple._changed():
        input_yang_obj.auth_text_simple = input_yang_obj.auth_text_simple
        
    if input_yang_obj.key_id._changed():
        input_yang_obj.key_id = input_yang_obj.key_id
        
    if input_yang_obj.auth_text_md5._changed():
        input_yang_obj.auth_text_md5 = input_yang_obj.auth_text_md5
        
    if input_yang_obj.key_chain_name._changed():
        input_yang_obj.key_chain_name = input_yang_obj.key_chain_name
        
    return translated_yang_obj

def _translate__network_instance_global(input_yang_obj: yc_global__huawei_network_instance__network_instance_global, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/global

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cfg_router_id._changed():
        input_yang_obj.cfg_router_id = input_yang_obj.cfg_router_id
        
    if input_yang_obj.as_notation_plain._changed():
        input_yang_obj.as_notation_plain = input_yang_obj.as_notation_plain
        
    if input_yang_obj.route_distinguisher_auto_ip._changed():
        input_yang_obj.route_distinguisher_auto_ip = input_yang_obj.route_distinguisher_auto_ip
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_parameter(input_yang_obj: yc_parameter_huawei_network_instance__network_instance_instances_instance_parameter, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/parameter

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.identifier._changed():
        input_yang_obj.identifier = input_yang_obj.identifier
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_vpn_targets_vpn_target(input_yang_obj: yc_vpn_target_huawei_network_instance__network_instance_instances_instance_afs_af_vpn_targets_vpn_target, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_vpn_targets(input_yang_obj: yc_vpn_targets_huawei_network_instance__network_instance_instances_instance_afs_af_vpn_targets, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_state(input_yang_obj: yc_state_huawei_network_instance__network_instance_instances_instance_afs_af_state, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/state

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.create_time._changed():
        input_yang_obj.create_time = input_yang_obj.create_time
        
    if input_yang_obj.up_time._changed():
        input_yang_obj.up_time = input_yang_obj.up_time
        
    if input_yang_obj.label._changed():
        input_yang_obj.label = input_yang_obj.label
        
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_tunnel_infos_tunnel_info(input_yang_obj: yc_tunnel_info_huawei_network_instance__network_instance_instances_instance_afs_af_tunnel_infos_tunnel_info, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/tunnel-infos/tunnel-info

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.color._changed():
        input_yang_obj.color = input_yang_obj.color
        
    if input_yang_obj.name._changed():
        input_yang_obj.name = input_yang_obj.name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_tunnel_infos(input_yang_obj: yc_tunnel_infos_huawei_network_instance__network_instance_instances_instance_afs_af_tunnel_infos, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/tunnel-infos

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.tunnel_info.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af_tunnel_infos_tunnel_info(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_ospf_import_rts_ospf_import_rt(input_yang_obj: yc_ospf_import_rt_huawei_network_instance__network_instance_instances_instance_afs_af_ospf_import_rts_ospf_import_rt, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/ospf-import-rts/ospf-import-rt

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.valid_route._changed():
        input_yang_obj.valid_route = input_yang_obj.valid_route
        
    if input_yang_obj.route_policy._changed():
        input_yang_obj.route_policy = input_yang_obj.route_policy
        
    if input_yang_obj.route_filter._changed():
        input_yang_obj.route_filter = input_yang_obj.route_filter
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_ospf_import_rts(input_yang_obj: yc_ospf_import_rts_huawei_network_instance__network_instance_instances_instance_afs_af_ospf_import_rts, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/ospf-import-rts

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ospf_import_rt.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af_ospf_import_rts_ospf_import_rt(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af(input_yang_obj: yc_af_huawei_network_instance__network_instance_instances_instance_afs_af, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.route_distinguisher._changed():
        input_yang_obj.route_distinguisher = input_yang_obj.route_distinguisher
        
    if input_yang_obj.effect_route_distinguisher._changed():
        input_yang_obj.effect_route_distinguisher = input_yang_obj.effect_route_distinguisher
        
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    if input_yang_obj.export_policy_add_ert_first._changed():
        input_yang_obj.export_policy_add_ert_first = input_yang_obj.export_policy_add_ert_first
        
    if input_yang_obj.label_mode._changed():
        input_yang_obj.label_mode = input_yang_obj.label_mode
        
    if input_yang_obj.vpn_frr._changed():
        input_yang_obj.vpn_frr = input_yang_obj.vpn_frr
        
    if input_yang_obj.tunnel_policy._changed():
        input_yang_obj.tunnel_policy = input_yang_obj.tunnel_policy
        
    if input_yang_obj.transit_vpn._changed():
        input_yang_obj.transit_vpn = input_yang_obj.transit_vpn
        
    if input_yang_obj.lsp_operation._changed():
        input_yang_obj.lsp_operation = input_yang_obj.lsp_operation
        
    if input_yang_obj.default_color._changed():
        input_yang_obj.default_color = input_yang_obj.default_color
        
    innerobj = _translate__network_instance_instances_instance_afs_af_vpn_targets(input_yang_obj.vpn_targets, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_afs_af_state(input_yang_obj.state, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_afs_af_tunnel_infos(input_yang_obj.tunnel_infos, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_afs_af_ospf_import_rts(input_yang_obj.ospf_import_rts, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs(input_yang_obj: yc_afs_huawei_network_instance__network_instance_instances_instance_afs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.af.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_gtsm(input_yang_obj: yc_gtsm_huawei_network_instance__network_instance_instances_instance_ospfv2_gtsm, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/gtsm

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hops._changed():
        input_yang_obj.hops = input_yang_obj.hops
        
    if input_yang_obj.nonstandard_multicast._changed():
        input_yang_obj.nonstandard_multicast = input_yang_obj.nonstandard_multicast
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id(input_yang_obj: yc_domain_id_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net/domain-id

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.domain_id._changed():
        input_yang_obj.domain_id = input_yang_obj.domain_id
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    if input_yang_obj.value._changed():
        input_yang_obj.value = input_yang_obj.value
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys_domain_id_secondary(input_yang_obj: yc_domain_id_secondary_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys_domain_id_secondary, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net/domain-id-secondarys/domain-id-secondary

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys(input_yang_obj: yc_domain_id_secondarys_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net/domain-id-secondarys

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.domain_id_secondary.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys_domain_id_secondary(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net(input_yang_obj: yc_private_net_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.eca_route._changed():
        input_yang_obj.eca_route = input_yang_obj.eca_route
        
    if input_yang_obj.disable._changed():
        input_yang_obj.disable = input_yang_obj.disable
        
    if input_yang_obj.value._changed():
        input_yang_obj.value = input_yang_obj.value
        
    if input_yang_obj.vpn_capability._changed():
        input_yang_obj.vpn_capability = input_yang_obj.vpn_capability
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id(input_yang_obj.domain_id, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys(input_yang_obj.domain_id_secondarys, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_host_name(input_yang_obj: yc_host_name_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_host_name, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/host-name

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.value._changed():
        input_yang_obj.value = input_yang_obj.value
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bandwidth(input_yang_obj: yc_bandwidth_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bandwidth, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bandwidth

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.config_bw_enable._changed():
        input_yang_obj.config_bw_enable = input_yang_obj.config_bw_enable
        
    if input_yang_obj.reference_value._changed():
        input_yang_obj.reference_value = input_yang_obj.reference_value
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arrival(input_yang_obj: yc_lsa_arrival_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arrival, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-arrival

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.max_interval._changed():
        input_yang_obj.max_interval = input_yang_obj.max_interval
        
    if input_yang_obj.start_interval._changed():
        input_yang_obj.start_interval = input_yang_obj.start_interval
        
    if input_yang_obj.hold_interval._changed():
        input_yang_obj.hold_interval = input_yang_obj.hold_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arr_supp_flap(input_yang_obj: yc_lsa_arr_supp_flap_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arr_supp_flap, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-arr-supp-flap

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.threshold_count._changed():
        input_yang_obj.threshold_count = input_yang_obj.threshold_count
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_originate(input_yang_obj: yc_lsa_originate_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_originate, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-originate

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.other_type_interval._changed():
        input_yang_obj.other_type_interval = input_yang_obj.other_type_interval
        
    if input_yang_obj.max_interval._changed():
        input_yang_obj.max_interval = input_yang_obj.max_interval
        
    if input_yang_obj.start_interval._changed():
        input_yang_obj.start_interval = input_yang_obj.start_interval
        
    if input_yang_obj.hold_interval._changed():
        input_yang_obj.hold_interval = input_yang_obj.hold_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_org_supp_flap(input_yang_obj: yc_lsa_org_supp_flap_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_org_supp_flap, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-org-supp-flap

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.threshold_count._changed():
        input_yang_obj.threshold_count = input_yang_obj.threshold_count
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_spf_schedule(input_yang_obj: yc_spf_schedule_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_spf_schedule, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/spf-schedule

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.max_interval._changed():
        input_yang_obj.max_interval = input_yang_obj.max_interval
        
    if input_yang_obj.start_interval._changed():
        input_yang_obj.start_interval = input_yang_obj.start_interval
        
    if input_yang_obj.hold_interval._changed():
        input_yang_obj.hold_interval = input_yang_obj.hold_interval
        
    if input_yang_obj.conserv_flag._changed():
        input_yang_obj.conserv_flag = input_yang_obj.conserv_flag
        
    if input_yang_obj.millisecond._changed():
        input_yang_obj.millisecond = input_yang_obj.millisecond
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer(input_yang_obj: yc_timer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arrival(input_yang_obj.lsa_arrival, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arr_supp_flap(input_yang_obj.lsa_arr_supp_flap, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_originate(input_yang_obj.lsa_originate, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_org_supp_flap(input_yang_obj.lsa_org_supp_flap, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_spf_schedule(input_yang_obj.spf_schedule, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bfd(input_yang_obj: yc_bfd_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bfd, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bfd

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.min_rx._changed():
        input_yang_obj.min_rx = input_yang_obj.min_rx
        
    if input_yang_obj.min_tx._changed():
        input_yang_obj.min_tx = input_yang_obj.min_tx
        
    if input_yang_obj.detect_multiplier._changed():
        input_yang_obj.detect_multiplier = input_yang_obj.detect_multiplier
        
    if input_yang_obj.incr_cost._changed():
        input_yang_obj.incr_cost = input_yang_obj.incr_cost
        
    if input_yang_obj.frr_binding._changed():
        input_yang_obj.frr_binding = input_yang_obj.frr_binding
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_metric_delay(input_yang_obj: yc_metric_delay_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_metric_delay, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/metric-delay

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.adv_enable._changed():
        input_yang_obj.adv_enable = input_yang_obj.adv_enable
        
    if input_yang_obj.suppress_timer._changed():
        input_yang_obj.suppress_timer = input_yang_obj.suppress_timer
        
    if input_yang_obj.suppress_percent._changed():
        input_yang_obj.suppress_percent = input_yang_obj.suppress_percent
        
    if input_yang_obj.suppress_absolute._changed():
        input_yang_obj.suppress_absolute = input_yang_obj.suppress_absolute
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bier(input_yang_obj: yc_bier_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bier, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_stub_router(input_yang_obj: yc_stub_router_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_stub_router, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/stub-router

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.flag._changed():
        input_yang_obj.flag = input_yang_obj.flag
        
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.include_stub._changed():
        input_yang_obj.include_stub = input_yang_obj.include_stub
        
    if input_yang_obj.external_lsa._changed():
        input_yang_obj.external_lsa = input_yang_obj.external_lsa
        
    if input_yang_obj.external_cost._changed():
        input_yang_obj.external_cost = input_yang_obj.external_cost
        
    if input_yang_obj.summary_lsa._changed():
        input_yang_obj.summary_lsa = input_yang_obj.summary_lsa
        
    if input_yang_obj.summary_cost._changed():
        input_yang_obj.summary_cost = input_yang_obj.summary_cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bgp_ls(input_yang_obj: yc_bgp_ls_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bgp_ls, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bgp-ls

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.identifier._changed():
        input_yang_obj.identifier = input_yang_obj.identifier
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_import_limit(input_yang_obj: yc_import_limit_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_import_limit, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/import-limit

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.max_number._changed():
        input_yang_obj.max_number = input_yang_obj.max_number
        
    if input_yang_obj.threshold_upper._changed():
        input_yang_obj.threshold_upper = input_yang_obj.threshold_upper
        
    if input_yang_obj.threshold_lower._changed():
        input_yang_obj.threshold_lower = input_yang_obj.threshold_lower
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_spf_control(input_yang_obj: yc_spf_control_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_spf_control, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/spf-control

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.max_load_balancing._changed():
        input_yang_obj.max_load_balancing = input_yang_obj.max_load_balancing
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_default_para(input_yang_obj: yc_default_para_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_default_para, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/default-para

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost_value._changed():
        input_yang_obj.cost_value = input_yang_obj.cost_value
        
    if input_yang_obj.cost_inherit_metric._changed():
        input_yang_obj.cost_inherit_metric = input_yang_obj.cost_inherit_metric
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_avoid_micro_loop(input_yang_obj: yc_avoid_micro_loop_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_avoid_micro_loop, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/avoid-micro-loop

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.frr_enable._changed():
        input_yang_obj.frr_enable = input_yang_obj.frr_enable
        
    if input_yang_obj.frr_rib_update_delay._changed():
        input_yang_obj.frr_rib_update_delay = input_yang_obj.frr_rib_update_delay
        
    if input_yang_obj.te_tunnel_enable._changed():
        input_yang_obj.te_tunnel_enable = input_yang_obj.te_tunnel_enable
        
    if input_yang_obj.te_tunnel_rib_update_delay._changed():
        input_yang_obj.te_tunnel_rib_update_delay = input_yang_obj.te_tunnel_rib_update_delay
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs_asbr_summary_prefix(input_yang_obj: yc_asbr_summary_prefix_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs_asbr_summary_prefix, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/asbr-summary-prefixs/asbr-summary-prefix

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.distribute_delay._changed():
        input_yang_obj.distribute_delay = input_yang_obj.distribute_delay
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.advertise._changed():
        input_yang_obj.advertise = input_yang_obj.advertise
        
    if input_yang_obj.generate_null_zero._changed():
        input_yang_obj.generate_null_zero = input_yang_obj.generate_null_zero
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs(input_yang_obj: yc_asbr_summary_prefixs_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/asbr-summary-prefixs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.asbr_summary_prefix.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs_asbr_summary_prefix(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_summary(input_yang_obj: yc_summary_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_summary, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/summary

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_no_summary(input_yang_obj: yc_no_summary_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_no_summary, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/no-summary

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    if input_yang_obj.distribute_delay._changed():
        input_yang_obj.distribute_delay = input_yang_obj.distribute_delay
        
    if input_yang_obj.permit_calculate_other._changed():
        input_yang_obj.permit_calculate_other = input_yang_obj.permit_calculate_other
        
    if input_yang_obj.permit_ibgp._changed():
        input_yang_obj.permit_ibgp = input_yang_obj.permit_ibgp
        
    if input_yang_obj.always._changed():
        input_yang_obj.always = input_yang_obj.always
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_route_preferences_route_preference(input_yang_obj: yc_route_preference_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_route_preferences_route_preference, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/route-preferences/route-preference

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.preference._changed():
        input_yang_obj.preference = input_yang_obj.preference
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_route_preferences(input_yang_obj: yc_route_preferences_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_route_preferences, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/route-preferences

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_preference.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_route_preferences_route_preference(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights_nexthop_weight(input_yang_obj: yc_nexthop_weight_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights_nexthop_weight, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/nexthop-weights/nexthop-weight

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.weight._changed():
        input_yang_obj.weight = input_yang_obj.weight
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights(input_yang_obj: yc_nexthop_weights_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/nexthop-weights

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.nexthop_weight.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights_nexthop_weight(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys_prefix_priority(input_yang_obj: yc_prefix_priority_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys_prefix_priority, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/prefix-prioritys/prefix-priority

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys(input_yang_obj: yc_prefix_prioritys_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/prefix-prioritys

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.prefix_priority.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys_prefix_priority(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_ecmp_prefer(input_yang_obj: yc_ecmp_prefer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_ecmp_prefer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/ecmp-prefer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.te_tunnel._changed():
        input_yang_obj.te_tunnel = input_yang_obj.te_tunnel
        
    if input_yang_obj.intact._changed():
        input_yang_obj.intact = input_yang_obj.intact
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr_tiebreaker(input_yang_obj: yc_tiebreaker_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr_tiebreaker, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr/tiebreaker

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.node_protect._changed():
        input_yang_obj.node_protect = input_yang_obj.node_protect
        
    if input_yang_obj.lowest_cost._changed():
        input_yang_obj.lowest_cost = input_yang_obj.lowest_cost
        
    if input_yang_obj.ldp_sync._changed():
        input_yang_obj.ldp_sync = input_yang_obj.ldp_sync
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr_route_policy(input_yang_obj: yc_route_policy_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr_route_policy, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr/route-policy

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr_rlfa_tunnel(input_yang_obj: yc_rlfa_tunnel_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr_rlfa_tunnel, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr/rlfa-tunnel

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.ip_prefix_name._changed():
        input_yang_obj.ip_prefix_name = input_yang_obj.ip_prefix_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr(input_yang_obj: yc_frr_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.lfa_enable._changed():
        input_yang_obj.lfa_enable = input_yang_obj.lfa_enable
        
    if input_yang_obj.rlfa_enable._changed():
        input_yang_obj.rlfa_enable = input_yang_obj.rlfa_enable
        
    if input_yang_obj.rlfa_max_cost._changed():
        input_yang_obj.rlfa_max_cost = input_yang_obj.rlfa_max_cost
        
    if input_yang_obj.tilfa_enable._changed():
        input_yang_obj.tilfa_enable = input_yang_obj.tilfa_enable
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_frr_tiebreaker(input_yang_obj.tiebreaker, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_frr_route_policy(input_yang_obj.route_policy, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_frr_rlfa_tunnel(input_yang_obj.rlfa_tunnel, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_local_mt_filter(input_yang_obj: yc_local_mt_filter_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_local_mt_filter, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/local-mt-filter

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.acl_name_or_num._changed():
        input_yang_obj.acl_name_or_num = input_yang_obj.acl_name_or_num
        
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_peers_peer(input_yang_obj: yc_peer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_peers_peer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/peers/peer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.priority._changed():
        input_yang_obj.priority = input_yang_obj.priority
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_peers(input_yang_obj: yc_peers_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_peers, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/peers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.peer.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_peers_peer(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs_filter_lsa_out(input_yang_obj: yc_filter_lsa_out_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs_filter_lsa_out, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/filter-lsa-outs/filter-lsa-out

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs(input_yang_obj: yc_filter_lsa_outs_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/filter-lsa-outs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.filter_lsa_out.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs_filter_lsa_out(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_gr_ietf(input_yang_obj: yc_gr_ietf_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_gr_ietf, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/gr-ietf

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.never._changed():
        input_yang_obj.never = input_yang_obj.never
        
    if input_yang_obj.planned_only._changed():
        input_yang_obj.planned_only = input_yang_obj.planned_only
        
    if input_yang_obj.ignore_external_lsa._changed():
        input_yang_obj.ignore_external_lsa = input_yang_obj.ignore_external_lsa
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_flood_control(input_yang_obj: yc_flood_control_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_flood_control, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/flood-control

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.number._changed():
        input_yang_obj.number = input_yang_obj.number
        
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids_summary_router_id(input_yang_obj: yc_summary_router_id_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids_summary_router_id, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/dn-bit/summary-router-ids/summary-router-id

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids(input_yang_obj: yc_summary_router_ids_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/dn-bit/summary-router-ids

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.summary_router_id.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids_summary_router_id(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_dn_bit(input_yang_obj: yc_dn_bit_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_dn_bit, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/dn-bit

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.set_ase._changed():
        input_yang_obj.set_ase = input_yang_obj.set_ase
        
    if input_yang_obj.set_nssa._changed():
        input_yang_obj.set_nssa = input_yang_obj.set_nssa
        
    if input_yang_obj.set_summary._changed():
        input_yang_obj.set_summary = input_yang_obj.set_summary
        
    if input_yang_obj.check_ase._changed():
        input_yang_obj.check_ase = input_yang_obj.check_ase
        
    if input_yang_obj.check_nssa._changed():
        input_yang_obj.check_nssa = input_yang_obj.check_nssa
        
    if input_yang_obj.check_summary._changed():
        input_yang_obj.check_summary = input_yang_obj.check_summary
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids(input_yang_obj.summary_router_ids, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_filter_import(input_yang_obj: yc_filter_import_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_filter_import, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/filter-import

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.name_or_num._changed():
        input_yang_obj.name_or_num = input_yang_obj.name_or_num
        
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    if input_yang_obj.route_policy._changed():
        input_yang_obj.route_policy = input_yang_obj.route_policy
        
    if input_yang_obj.route_filter._changed():
        input_yang_obj.route_filter = input_yang_obj.route_filter
        
    if input_yang_obj.secondary._changed():
        input_yang_obj.secondary = input_yang_obj.secondary
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_filter_exports_filter_export(input_yang_obj: yc_filter_export_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_filter_exports_filter_export, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/filter-exports/filter-export

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.name_or_num._changed():
        input_yang_obj.name_or_num = input_yang_obj.name_or_num
        
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    if input_yang_obj.route_policy._changed():
        input_yang_obj.route_policy = input_yang_obj.route_policy
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_filter_exports(input_yang_obj: yc_filter_exports_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_filter_exports, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/filter-exports

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.filter_export.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_filter_exports_filter_export(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_import_routes_import_route(input_yang_obj: yc_import_route_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_import_routes_import_route, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/import-routes/import-route

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    if input_yang_obj.permit_ibgp._changed():
        input_yang_obj.permit_ibgp = input_yang_obj.permit_ibgp
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_import_routes(input_yang_obj: yc_import_routes_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_import_routes, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/import-routes

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.import_route.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_import_routes_import_route(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_silent_interfaces_silent_interface(input_yang_obj: yc_silent_interface_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_silent_interfaces_silent_interface, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/silent-interfaces/silent-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_silent_interfaces(input_yang_obj: yc_silent_interfaces_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_silent_interfaces, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/silent-interfaces

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.silent_interface.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_silent_interfaces_silent_interface(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_undo_silent_interfaces_undo_silent_interface(input_yang_obj: yc_undo_silent_interface_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_undo_silent_interfaces_undo_silent_interface, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/undo-silent-interfaces/undo-silent-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_undo_silent_interfaces(input_yang_obj: yc_undo_silent_interfaces_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_undo_silent_interfaces, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/undo-silent-interfaces

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.undo_silent_interface.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_undo_silent_interfaces_undo_silent_interface(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_cost_bindings_cost_binding(input_yang_obj: yc_cost_binding_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_cost_bindings_cost_binding, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/cost-bindings/cost-binding

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_cost_bindings(input_yang_obj: yc_cost_bindings_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_cost_bindings, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/cost-bindings

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.cost_binding.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_cost_bindings_cost_binding(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_networks_network(input_yang_obj: yc_network_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_networks_network, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/networks/network

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.description._changed():
        input_yang_obj.description = input_yang_obj.description
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_networks(input_yang_obj: yc_networks_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_networks, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/networks

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.network.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_networks_network(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_stub(input_yang_obj: yc_stub_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_stub, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/stub

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.backbone_peer_ignore._changed():
        input_yang_obj.backbone_peer_ignore = input_yang_obj.backbone_peer_ignore
        
    if input_yang_obj.no_summary._changed():
        input_yang_obj.no_summary = input_yang_obj.no_summary
        
    if input_yang_obj.default_cost._changed():
        input_yang_obj.default_cost = input_yang_obj.default_cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_nssa(input_yang_obj: yc_nssa_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_nssa, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/nssa

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.no_summary._changed():
        input_yang_obj.no_summary = input_yang_obj.no_summary
        
    if input_yang_obj.translator_always._changed():
        input_yang_obj.translator_always = input_yang_obj.translator_always
        
    if input_yang_obj.default_route_advertise._changed():
        input_yang_obj.default_route_advertise = input_yang_obj.default_route_advertise
        
    if input_yang_obj.backbone_peer_ignore._changed():
        input_yang_obj.backbone_peer_ignore = input_yang_obj.backbone_peer_ignore
        
    if input_yang_obj.no_import_route._changed():
        input_yang_obj.no_import_route = input_yang_obj.no_import_route
        
    if input_yang_obj.set_n_bit._changed():
        input_yang_obj.set_n_bit = input_yang_obj.set_n_bit
        
    if input_yang_obj.suppress_fa._changed():
        input_yang_obj.suppress_fa = input_yang_obj.suppress_fa
        
    if input_yang_obj.zero_address_forwarding._changed():
        input_yang_obj.zero_address_forwarding = input_yang_obj.zero_address_forwarding
        
    if input_yang_obj.translator_interval._changed():
        input_yang_obj.translator_interval = input_yang_obj.translator_interval
        
    if input_yang_obj.default_cost._changed():
        input_yang_obj.default_cost = input_yang_obj.default_cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_ldp_sync(input_yang_obj: yc_ldp_sync_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_ldp_sync, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/ldp-sync

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.timer._changed():
        input_yang_obj.timer = input_yang_obj.timer
        
    if input_yang_obj.infinite._changed():
        input_yang_obj.infinite = input_yang_obj.infinite
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_mpls_te(input_yang_obj: yc_mpls_te_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_mpls_te, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/mpls-te

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.standard_complying._changed():
        input_yang_obj.standard_complying = input_yang_obj.standard_complying
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_authentication(input_yang_obj: yc_authentication_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_authentication, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/authentication

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    if input_yang_obj.auth_text_simple._changed():
        input_yang_obj.auth_text_simple = input_yang_obj.auth_text_simple
        
    if input_yang_obj.key_id._changed():
        input_yang_obj.key_id = input_yang_obj.key_id
        
    if input_yang_obj.auth_text_md5._changed():
        input_yang_obj.auth_text_md5 = input_yang_obj.auth_text_md5
        
    if input_yang_obj.key_chain_name._changed():
        input_yang_obj.key_chain_name = input_yang_obj.key_chain_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_abr_summary_prefixs_abr_summary_prefix(input_yang_obj: yc_abr_summary_prefix_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_abr_summary_prefixs_abr_summary_prefix, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/abr-summary-prefixs/abr-summary-prefix

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost_value._changed():
        input_yang_obj.cost_value = input_yang_obj.cost_value
        
    if input_yang_obj.cost_inherit_min._changed():
        input_yang_obj.cost_inherit_min = input_yang_obj.cost_inherit_min
        
    if input_yang_obj.hold_max_cost._changed():
        input_yang_obj.hold_max_cost = input_yang_obj.hold_max_cost
        
    if input_yang_obj.advertise._changed():
        input_yang_obj.advertise = input_yang_obj.advertise
        
    if input_yang_obj.generate_null_zero._changed():
        input_yang_obj.generate_null_zero = input_yang_obj.generate_null_zero
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_abr_summary_prefixs(input_yang_obj: yc_abr_summary_prefixs_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_abr_summary_prefixs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/abr-summary-prefixs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.abr_summary_prefix.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_abr_summary_prefixs_abr_summary_prefix(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_timer(input_yang_obj: yc_timer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_timer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/vlink-peers/vlink-peer/timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hello_interval._changed():
        input_yang_obj.hello_interval = input_yang_obj.hello_interval
        
    if input_yang_obj.dead_interval._changed():
        input_yang_obj.dead_interval = input_yang_obj.dead_interval
        
    if input_yang_obj.trans_delay_interval._changed():
        input_yang_obj.trans_delay_interval = input_yang_obj.trans_delay_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_authentication(input_yang_obj: yc_authentication_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_authentication, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/vlink-peers/vlink-peer/authentication

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    if input_yang_obj.auth_text_simple._changed():
        input_yang_obj.auth_text_simple = input_yang_obj.auth_text_simple
        
    if input_yang_obj.key_id._changed():
        input_yang_obj.key_id = input_yang_obj.key_id
        
    if input_yang_obj.auth_text_md5._changed():
        input_yang_obj.auth_text_md5 = input_yang_obj.auth_text_md5
        
    if input_yang_obj.key_chain_name._changed():
        input_yang_obj.key_chain_name = input_yang_obj.key_chain_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer(input_yang_obj: yc_vlink_peer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/vlink-peers/vlink-peer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.retransmit_interval._changed():
        input_yang_obj.retransmit_interval = input_yang_obj.retransmit_interval
        
    if input_yang_obj.smart_discover._changed():
        input_yang_obj.smart_discover = input_yang_obj.smart_discover
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_timer(input_yang_obj.timer, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_authentication(input_yang_obj.authentication, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers(input_yang_obj: yc_vlink_peers_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/vlink-peers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vlink_peer.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_timer(input_yang_obj: yc_timer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_timer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/sham-links/sham-link/timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hello_interval._changed():
        input_yang_obj.hello_interval = input_yang_obj.hello_interval
        
    if input_yang_obj.dead_interval._changed():
        input_yang_obj.dead_interval = input_yang_obj.dead_interval
        
    if input_yang_obj.trans_delay_interval._changed():
        input_yang_obj.trans_delay_interval = input_yang_obj.trans_delay_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_authentication(input_yang_obj: yc_authentication_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_authentication, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/sham-links/sham-link/authentication

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    if input_yang_obj.auth_text_simple._changed():
        input_yang_obj.auth_text_simple = input_yang_obj.auth_text_simple
        
    if input_yang_obj.key_id._changed():
        input_yang_obj.key_id = input_yang_obj.key_id
        
    if input_yang_obj.auth_text_md5._changed():
        input_yang_obj.auth_text_md5 = input_yang_obj.auth_text_md5
        
    if input_yang_obj.key_chain_name._changed():
        input_yang_obj.key_chain_name = input_yang_obj.key_chain_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link(input_yang_obj: yc_sham_link_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/sham-links/sham-link

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.retransmit_interval._changed():
        input_yang_obj.retransmit_interval = input_yang_obj.retransmit_interval
        
    if input_yang_obj.smart_discover._changed():
        input_yang_obj.smart_discover = input_yang_obj.smart_discover
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_timer(input_yang_obj.timer, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_authentication(input_yang_obj.authentication, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links(input_yang_obj: yc_sham_links_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/sham-links

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.sham_link.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_filters_filter(input_yang_obj: yc_filter_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_filters_filter, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/filters/filter

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.name_or_num._changed():
        input_yang_obj.name_or_num = input_yang_obj.name_or_num
        
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    if input_yang_obj.route_policy._changed():
        input_yang_obj.route_policy = input_yang_obj.route_policy
        
    if input_yang_obj.route_filter._changed():
        input_yang_obj.route_filter = input_yang_obj.route_filter
        
    if input_yang_obj.include_abr_summary._changed():
        input_yang_obj.include_abr_summary = input_yang_obj.include_abr_summary
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_filters(input_yang_obj: yc_filters_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_filters, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/filters

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.filter.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_filters_filter(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_frr_ti_lfa(input_yang_obj: yc_ti_lfa_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_frr_ti_lfa, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/frr/ti-lfa

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.disable._changed():
        input_yang_obj.disable = input_yang_obj.disable
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_frr(input_yang_obj: yc_frr_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_frr, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/frr

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.frr_disable._changed():
        input_yang_obj.frr_disable = input_yang_obj.frr_disable
        
    if input_yang_obj.rlfa_disable._changed():
        input_yang_obj.rlfa_disable = input_yang_obj.rlfa_disable
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_frr_ti_lfa(input_yang_obj.ti_lfa, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_timer(input_yang_obj: yc_timer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_timer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hello_interval._changed():
        input_yang_obj.hello_interval = input_yang_obj.hello_interval
        
    if input_yang_obj.hello_conser._changed():
        input_yang_obj.hello_conser = input_yang_obj.hello_conser
        
    if input_yang_obj.dead_interval._changed():
        input_yang_obj.dead_interval = input_yang_obj.dead_interval
        
    if input_yang_obj.wait_interval._changed():
        input_yang_obj.wait_interval = input_yang_obj.wait_interval
        
    if input_yang_obj.poll_interval._changed():
        input_yang_obj.poll_interval = input_yang_obj.poll_interval
        
    if input_yang_obj.retransmit_interval._changed():
        input_yang_obj.retransmit_interval = input_yang_obj.retransmit_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_ldp_sync(input_yang_obj: yc_ldp_sync_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_ldp_sync, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/ldp-sync

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hold_down_timer._changed():
        input_yang_obj.hold_down_timer = input_yang_obj.hold_down_timer
        
    if input_yang_obj.timer._changed():
        input_yang_obj.timer = input_yang_obj.timer
        
    if input_yang_obj.infinite._changed():
        input_yang_obj.infinite = input_yang_obj.infinite
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_bfd(input_yang_obj: yc_bfd_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_bfd, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/bfd

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.block._changed():
        input_yang_obj.block = input_yang_obj.block
        
    if input_yang_obj.detect_multiplier._changed():
        input_yang_obj.detect_multiplier = input_yang_obj.detect_multiplier
        
    if input_yang_obj.min_tx._changed():
        input_yang_obj.min_tx = input_yang_obj.min_tx
        
    if input_yang_obj.min_rx._changed():
        input_yang_obj.min_rx = input_yang_obj.min_rx
        
    if input_yang_obj.frr_binding._changed():
        input_yang_obj.frr_binding = input_yang_obj.frr_binding
        
    if input_yang_obj.incr_cost_block._changed():
        input_yang_obj.incr_cost_block = input_yang_obj.incr_cost_block
        
    if input_yang_obj.incr_cost_value._changed():
        input_yang_obj.incr_cost_value = input_yang_obj.incr_cost_value
        
    if input_yang_obj.per_link_flag._changed():
        input_yang_obj.per_link_flag = input_yang_obj.per_link_flag
        
    if input_yang_obj.one_arm_echo_flag._changed():
        input_yang_obj.one_arm_echo_flag = input_yang_obj.one_arm_echo_flag
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_authentication(input_yang_obj: yc_authentication_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_authentication, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/authentication

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    if input_yang_obj.auth_text_simple._changed():
        input_yang_obj.auth_text_simple = input_yang_obj.auth_text_simple
        
    if input_yang_obj.key_id._changed():
        input_yang_obj.key_id = input_yang_obj.key_id
        
    if input_yang_obj.auth_text_md5._changed():
        input_yang_obj.auth_text_md5 = input_yang_obj.auth_text_md5
        
    if input_yang_obj.key_chain_name._changed():
        input_yang_obj.key_chain_name = input_yang_obj.key_chain_name
        
    return translated_yang_obj

def _translate__network_instance_global(input_yang_obj: yc_global__huawei_network_instance__network_instance_global, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/global

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cfg_router_id._changed():
        input_yang_obj.cfg_router_id = input_yang_obj.cfg_router_id
        
    if input_yang_obj.as_notation_plain._changed():
        input_yang_obj.as_notation_plain = input_yang_obj.as_notation_plain
        
    if input_yang_obj.route_distinguisher_auto_ip._changed():
        input_yang_obj.route_distinguisher_auto_ip = input_yang_obj.route_distinguisher_auto_ip
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_parameter(input_yang_obj: yc_parameter_huawei_network_instance__network_instance_instances_instance_parameter, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/parameter

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.identifier._changed():
        input_yang_obj.identifier = input_yang_obj.identifier
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_vpn_targets_vpn_target(input_yang_obj: yc_vpn_target_huawei_network_instance__network_instance_instances_instance_afs_af_vpn_targets_vpn_target, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_vpn_targets(input_yang_obj: yc_vpn_targets_huawei_network_instance__network_instance_instances_instance_afs_af_vpn_targets, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_state(input_yang_obj: yc_state_huawei_network_instance__network_instance_instances_instance_afs_af_state, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/state

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.create_time._changed():
        input_yang_obj.create_time = input_yang_obj.create_time
        
    if input_yang_obj.up_time._changed():
        input_yang_obj.up_time = input_yang_obj.up_time
        
    if input_yang_obj.label._changed():
        input_yang_obj.label = input_yang_obj.label
        
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_tunnel_infos_tunnel_info(input_yang_obj: yc_tunnel_info_huawei_network_instance__network_instance_instances_instance_afs_af_tunnel_infos_tunnel_info, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/tunnel-infos/tunnel-info

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.color._changed():
        input_yang_obj.color = input_yang_obj.color
        
    if input_yang_obj.name._changed():
        input_yang_obj.name = input_yang_obj.name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_tunnel_infos(input_yang_obj: yc_tunnel_infos_huawei_network_instance__network_instance_instances_instance_afs_af_tunnel_infos, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/tunnel-infos

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.tunnel_info.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af_tunnel_infos_tunnel_info(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_ospf_import_rts_ospf_import_rt(input_yang_obj: yc_ospf_import_rt_huawei_network_instance__network_instance_instances_instance_afs_af_ospf_import_rts_ospf_import_rt, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/ospf-import-rts/ospf-import-rt

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.valid_route._changed():
        input_yang_obj.valid_route = input_yang_obj.valid_route
        
    if input_yang_obj.route_policy._changed():
        input_yang_obj.route_policy = input_yang_obj.route_policy
        
    if input_yang_obj.route_filter._changed():
        input_yang_obj.route_filter = input_yang_obj.route_filter
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_ospf_import_rts(input_yang_obj: yc_ospf_import_rts_huawei_network_instance__network_instance_instances_instance_afs_af_ospf_import_rts, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/ospf-import-rts

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ospf_import_rt.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af_ospf_import_rts_ospf_import_rt(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af(input_yang_obj: yc_af_huawei_network_instance__network_instance_instances_instance_afs_af, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.route_distinguisher._changed():
        input_yang_obj.route_distinguisher = input_yang_obj.route_distinguisher
        
    if input_yang_obj.effect_route_distinguisher._changed():
        input_yang_obj.effect_route_distinguisher = input_yang_obj.effect_route_distinguisher
        
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    if input_yang_obj.export_policy_add_ert_first._changed():
        input_yang_obj.export_policy_add_ert_first = input_yang_obj.export_policy_add_ert_first
        
    if input_yang_obj.label_mode._changed():
        input_yang_obj.label_mode = input_yang_obj.label_mode
        
    if input_yang_obj.vpn_frr._changed():
        input_yang_obj.vpn_frr = input_yang_obj.vpn_frr
        
    if input_yang_obj.tunnel_policy._changed():
        input_yang_obj.tunnel_policy = input_yang_obj.tunnel_policy
        
    if input_yang_obj.transit_vpn._changed():
        input_yang_obj.transit_vpn = input_yang_obj.transit_vpn
        
    if input_yang_obj.lsp_operation._changed():
        input_yang_obj.lsp_operation = input_yang_obj.lsp_operation
        
    if input_yang_obj.default_color._changed():
        input_yang_obj.default_color = input_yang_obj.default_color
        
    innerobj = _translate__network_instance_instances_instance_afs_af_vpn_targets(input_yang_obj.vpn_targets, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_afs_af_state(input_yang_obj.state, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_afs_af_tunnel_infos(input_yang_obj.tunnel_infos, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_afs_af_ospf_import_rts(input_yang_obj.ospf_import_rts, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs(input_yang_obj: yc_afs_huawei_network_instance__network_instance_instances_instance_afs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.af.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_gtsm(input_yang_obj: yc_gtsm_huawei_network_instance__network_instance_instances_instance_ospfv2_gtsm, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/gtsm

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hops._changed():
        input_yang_obj.hops = input_yang_obj.hops
        
    if input_yang_obj.nonstandard_multicast._changed():
        input_yang_obj.nonstandard_multicast = input_yang_obj.nonstandard_multicast
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id(input_yang_obj: yc_domain_id_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net/domain-id

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.domain_id._changed():
        input_yang_obj.domain_id = input_yang_obj.domain_id
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    if input_yang_obj.value._changed():
        input_yang_obj.value = input_yang_obj.value
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys_domain_id_secondary(input_yang_obj: yc_domain_id_secondary_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys_domain_id_secondary, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net/domain-id-secondarys/domain-id-secondary

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys(input_yang_obj: yc_domain_id_secondarys_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net/domain-id-secondarys

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.domain_id_secondary.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys_domain_id_secondary(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net(input_yang_obj: yc_private_net_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.eca_route._changed():
        input_yang_obj.eca_route = input_yang_obj.eca_route
        
    if input_yang_obj.disable._changed():
        input_yang_obj.disable = input_yang_obj.disable
        
    if input_yang_obj.value._changed():
        input_yang_obj.value = input_yang_obj.value
        
    if input_yang_obj.vpn_capability._changed():
        input_yang_obj.vpn_capability = input_yang_obj.vpn_capability
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id(input_yang_obj.domain_id, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys(input_yang_obj.domain_id_secondarys, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_host_name(input_yang_obj: yc_host_name_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_host_name, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/host-name

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.value._changed():
        input_yang_obj.value = input_yang_obj.value
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bandwidth(input_yang_obj: yc_bandwidth_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bandwidth, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bandwidth

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.config_bw_enable._changed():
        input_yang_obj.config_bw_enable = input_yang_obj.config_bw_enable
        
    if input_yang_obj.reference_value._changed():
        input_yang_obj.reference_value = input_yang_obj.reference_value
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arrival(input_yang_obj: yc_lsa_arrival_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arrival, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-arrival

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.max_interval._changed():
        input_yang_obj.max_interval = input_yang_obj.max_interval
        
    if input_yang_obj.start_interval._changed():
        input_yang_obj.start_interval = input_yang_obj.start_interval
        
    if input_yang_obj.hold_interval._changed():
        input_yang_obj.hold_interval = input_yang_obj.hold_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arr_supp_flap(input_yang_obj: yc_lsa_arr_supp_flap_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arr_supp_flap, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-arr-supp-flap

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.threshold_count._changed():
        input_yang_obj.threshold_count = input_yang_obj.threshold_count
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_originate(input_yang_obj: yc_lsa_originate_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_originate, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-originate

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.other_type_interval._changed():
        input_yang_obj.other_type_interval = input_yang_obj.other_type_interval
        
    if input_yang_obj.max_interval._changed():
        input_yang_obj.max_interval = input_yang_obj.max_interval
        
    if input_yang_obj.start_interval._changed():
        input_yang_obj.start_interval = input_yang_obj.start_interval
        
    if input_yang_obj.hold_interval._changed():
        input_yang_obj.hold_interval = input_yang_obj.hold_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_org_supp_flap(input_yang_obj: yc_lsa_org_supp_flap_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_org_supp_flap, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-org-supp-flap

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.threshold_count._changed():
        input_yang_obj.threshold_count = input_yang_obj.threshold_count
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_spf_schedule(input_yang_obj: yc_spf_schedule_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_spf_schedule, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/spf-schedule

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.max_interval._changed():
        input_yang_obj.max_interval = input_yang_obj.max_interval
        
    if input_yang_obj.start_interval._changed():
        input_yang_obj.start_interval = input_yang_obj.start_interval
        
    if input_yang_obj.hold_interval._changed():
        input_yang_obj.hold_interval = input_yang_obj.hold_interval
        
    if input_yang_obj.conserv_flag._changed():
        input_yang_obj.conserv_flag = input_yang_obj.conserv_flag
        
    if input_yang_obj.millisecond._changed():
        input_yang_obj.millisecond = input_yang_obj.millisecond
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer(input_yang_obj: yc_timer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arrival(input_yang_obj.lsa_arrival, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arr_supp_flap(input_yang_obj.lsa_arr_supp_flap, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_originate(input_yang_obj.lsa_originate, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_org_supp_flap(input_yang_obj.lsa_org_supp_flap, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_spf_schedule(input_yang_obj.spf_schedule, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bfd(input_yang_obj: yc_bfd_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bfd, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bfd

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.min_rx._changed():
        input_yang_obj.min_rx = input_yang_obj.min_rx
        
    if input_yang_obj.min_tx._changed():
        input_yang_obj.min_tx = input_yang_obj.min_tx
        
    if input_yang_obj.detect_multiplier._changed():
        input_yang_obj.detect_multiplier = input_yang_obj.detect_multiplier
        
    if input_yang_obj.incr_cost._changed():
        input_yang_obj.incr_cost = input_yang_obj.incr_cost
        
    if input_yang_obj.frr_binding._changed():
        input_yang_obj.frr_binding = input_yang_obj.frr_binding
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_metric_delay(input_yang_obj: yc_metric_delay_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_metric_delay, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/metric-delay

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.adv_enable._changed():
        input_yang_obj.adv_enable = input_yang_obj.adv_enable
        
    if input_yang_obj.suppress_timer._changed():
        input_yang_obj.suppress_timer = input_yang_obj.suppress_timer
        
    if input_yang_obj.suppress_percent._changed():
        input_yang_obj.suppress_percent = input_yang_obj.suppress_percent
        
    if input_yang_obj.suppress_absolute._changed():
        input_yang_obj.suppress_absolute = input_yang_obj.suppress_absolute
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bier(input_yang_obj: yc_bier_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bier, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_stub_router(input_yang_obj: yc_stub_router_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_stub_router, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/stub-router

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.flag._changed():
        input_yang_obj.flag = input_yang_obj.flag
        
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.include_stub._changed():
        input_yang_obj.include_stub = input_yang_obj.include_stub
        
    if input_yang_obj.external_lsa._changed():
        input_yang_obj.external_lsa = input_yang_obj.external_lsa
        
    if input_yang_obj.external_cost._changed():
        input_yang_obj.external_cost = input_yang_obj.external_cost
        
    if input_yang_obj.summary_lsa._changed():
        input_yang_obj.summary_lsa = input_yang_obj.summary_lsa
        
    if input_yang_obj.summary_cost._changed():
        input_yang_obj.summary_cost = input_yang_obj.summary_cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bgp_ls(input_yang_obj: yc_bgp_ls_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bgp_ls, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bgp-ls

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.identifier._changed():
        input_yang_obj.identifier = input_yang_obj.identifier
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_import_limit(input_yang_obj: yc_import_limit_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_import_limit, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/import-limit

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.max_number._changed():
        input_yang_obj.max_number = input_yang_obj.max_number
        
    if input_yang_obj.threshold_upper._changed():
        input_yang_obj.threshold_upper = input_yang_obj.threshold_upper
        
    if input_yang_obj.threshold_lower._changed():
        input_yang_obj.threshold_lower = input_yang_obj.threshold_lower
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_spf_control(input_yang_obj: yc_spf_control_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_spf_control, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/spf-control

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.max_load_balancing._changed():
        input_yang_obj.max_load_balancing = input_yang_obj.max_load_balancing
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_default_para(input_yang_obj: yc_default_para_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_default_para, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/default-para

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost_value._changed():
        input_yang_obj.cost_value = input_yang_obj.cost_value
        
    if input_yang_obj.cost_inherit_metric._changed():
        input_yang_obj.cost_inherit_metric = input_yang_obj.cost_inherit_metric
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_avoid_micro_loop(input_yang_obj: yc_avoid_micro_loop_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_avoid_micro_loop, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/avoid-micro-loop

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.frr_enable._changed():
        input_yang_obj.frr_enable = input_yang_obj.frr_enable
        
    if input_yang_obj.frr_rib_update_delay._changed():
        input_yang_obj.frr_rib_update_delay = input_yang_obj.frr_rib_update_delay
        
    if input_yang_obj.te_tunnel_enable._changed():
        input_yang_obj.te_tunnel_enable = input_yang_obj.te_tunnel_enable
        
    if input_yang_obj.te_tunnel_rib_update_delay._changed():
        input_yang_obj.te_tunnel_rib_update_delay = input_yang_obj.te_tunnel_rib_update_delay
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs_asbr_summary_prefix(input_yang_obj: yc_asbr_summary_prefix_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs_asbr_summary_prefix, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/asbr-summary-prefixs/asbr-summary-prefix

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.distribute_delay._changed():
        input_yang_obj.distribute_delay = input_yang_obj.distribute_delay
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.advertise._changed():
        input_yang_obj.advertise = input_yang_obj.advertise
        
    if input_yang_obj.generate_null_zero._changed():
        input_yang_obj.generate_null_zero = input_yang_obj.generate_null_zero
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs(input_yang_obj: yc_asbr_summary_prefixs_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/asbr-summary-prefixs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.asbr_summary_prefix.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs_asbr_summary_prefix(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_summary(input_yang_obj: yc_summary_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_summary, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/summary

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_no_summary(input_yang_obj: yc_no_summary_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_no_summary, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/no-summary

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    if input_yang_obj.distribute_delay._changed():
        input_yang_obj.distribute_delay = input_yang_obj.distribute_delay
        
    if input_yang_obj.permit_calculate_other._changed():
        input_yang_obj.permit_calculate_other = input_yang_obj.permit_calculate_other
        
    if input_yang_obj.permit_ibgp._changed():
        input_yang_obj.permit_ibgp = input_yang_obj.permit_ibgp
        
    if input_yang_obj.always._changed():
        input_yang_obj.always = input_yang_obj.always
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_route_preferences_route_preference(input_yang_obj: yc_route_preference_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_route_preferences_route_preference, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/route-preferences/route-preference

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.preference._changed():
        input_yang_obj.preference = input_yang_obj.preference
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_route_preferences(input_yang_obj: yc_route_preferences_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_route_preferences, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/route-preferences

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_preference.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_route_preferences_route_preference(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights_nexthop_weight(input_yang_obj: yc_nexthop_weight_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights_nexthop_weight, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/nexthop-weights/nexthop-weight

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.weight._changed():
        input_yang_obj.weight = input_yang_obj.weight
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights(input_yang_obj: yc_nexthop_weights_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/nexthop-weights

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.nexthop_weight.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights_nexthop_weight(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys_prefix_priority(input_yang_obj: yc_prefix_priority_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys_prefix_priority, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/prefix-prioritys/prefix-priority

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys(input_yang_obj: yc_prefix_prioritys_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/prefix-prioritys

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.prefix_priority.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys_prefix_priority(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_ecmp_prefer(input_yang_obj: yc_ecmp_prefer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_ecmp_prefer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/ecmp-prefer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.te_tunnel._changed():
        input_yang_obj.te_tunnel = input_yang_obj.te_tunnel
        
    if input_yang_obj.intact._changed():
        input_yang_obj.intact = input_yang_obj.intact
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr_tiebreaker(input_yang_obj: yc_tiebreaker_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr_tiebreaker, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr/tiebreaker

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.node_protect._changed():
        input_yang_obj.node_protect = input_yang_obj.node_protect
        
    if input_yang_obj.lowest_cost._changed():
        input_yang_obj.lowest_cost = input_yang_obj.lowest_cost
        
    if input_yang_obj.ldp_sync._changed():
        input_yang_obj.ldp_sync = input_yang_obj.ldp_sync
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr_route_policy(input_yang_obj: yc_route_policy_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr_route_policy, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr/route-policy

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr_rlfa_tunnel(input_yang_obj: yc_rlfa_tunnel_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr_rlfa_tunnel, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr/rlfa-tunnel

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.ip_prefix_name._changed():
        input_yang_obj.ip_prefix_name = input_yang_obj.ip_prefix_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr(input_yang_obj: yc_frr_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.lfa_enable._changed():
        input_yang_obj.lfa_enable = input_yang_obj.lfa_enable
        
    if input_yang_obj.rlfa_enable._changed():
        input_yang_obj.rlfa_enable = input_yang_obj.rlfa_enable
        
    if input_yang_obj.rlfa_max_cost._changed():
        input_yang_obj.rlfa_max_cost = input_yang_obj.rlfa_max_cost
        
    if input_yang_obj.tilfa_enable._changed():
        input_yang_obj.tilfa_enable = input_yang_obj.tilfa_enable
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_frr_tiebreaker(input_yang_obj.tiebreaker, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_frr_route_policy(input_yang_obj.route_policy, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_frr_rlfa_tunnel(input_yang_obj.rlfa_tunnel, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_local_mt_filter(input_yang_obj: yc_local_mt_filter_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_local_mt_filter, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/local-mt-filter

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.acl_name_or_num._changed():
        input_yang_obj.acl_name_or_num = input_yang_obj.acl_name_or_num
        
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_peers_peer(input_yang_obj: yc_peer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_peers_peer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/peers/peer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.priority._changed():
        input_yang_obj.priority = input_yang_obj.priority
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_peers(input_yang_obj: yc_peers_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_peers, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/peers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.peer.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_peers_peer(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs_filter_lsa_out(input_yang_obj: yc_filter_lsa_out_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs_filter_lsa_out, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/filter-lsa-outs/filter-lsa-out

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs(input_yang_obj: yc_filter_lsa_outs_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/filter-lsa-outs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.filter_lsa_out.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs_filter_lsa_out(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_gr_ietf(input_yang_obj: yc_gr_ietf_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_gr_ietf, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/gr-ietf

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.never._changed():
        input_yang_obj.never = input_yang_obj.never
        
    if input_yang_obj.planned_only._changed():
        input_yang_obj.planned_only = input_yang_obj.planned_only
        
    if input_yang_obj.ignore_external_lsa._changed():
        input_yang_obj.ignore_external_lsa = input_yang_obj.ignore_external_lsa
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_flood_control(input_yang_obj: yc_flood_control_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_flood_control, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/flood-control

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.number._changed():
        input_yang_obj.number = input_yang_obj.number
        
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids_summary_router_id(input_yang_obj: yc_summary_router_id_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids_summary_router_id, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/dn-bit/summary-router-ids/summary-router-id

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids(input_yang_obj: yc_summary_router_ids_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/dn-bit/summary-router-ids

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.summary_router_id.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids_summary_router_id(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_dn_bit(input_yang_obj: yc_dn_bit_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_dn_bit, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/dn-bit

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.set_ase._changed():
        input_yang_obj.set_ase = input_yang_obj.set_ase
        
    if input_yang_obj.set_nssa._changed():
        input_yang_obj.set_nssa = input_yang_obj.set_nssa
        
    if input_yang_obj.set_summary._changed():
        input_yang_obj.set_summary = input_yang_obj.set_summary
        
    if input_yang_obj.check_ase._changed():
        input_yang_obj.check_ase = input_yang_obj.check_ase
        
    if input_yang_obj.check_nssa._changed():
        input_yang_obj.check_nssa = input_yang_obj.check_nssa
        
    if input_yang_obj.check_summary._changed():
        input_yang_obj.check_summary = input_yang_obj.check_summary
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids(input_yang_obj.summary_router_ids, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_filter_import(input_yang_obj: yc_filter_import_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_filter_import, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/filter-import

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.name_or_num._changed():
        input_yang_obj.name_or_num = input_yang_obj.name_or_num
        
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    if input_yang_obj.route_policy._changed():
        input_yang_obj.route_policy = input_yang_obj.route_policy
        
    if input_yang_obj.route_filter._changed():
        input_yang_obj.route_filter = input_yang_obj.route_filter
        
    if input_yang_obj.secondary._changed():
        input_yang_obj.secondary = input_yang_obj.secondary
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_filter_exports_filter_export(input_yang_obj: yc_filter_export_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_filter_exports_filter_export, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/filter-exports/filter-export

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.name_or_num._changed():
        input_yang_obj.name_or_num = input_yang_obj.name_or_num
        
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    if input_yang_obj.route_policy._changed():
        input_yang_obj.route_policy = input_yang_obj.route_policy
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_filter_exports(input_yang_obj: yc_filter_exports_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_filter_exports, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/filter-exports

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.filter_export.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_filter_exports_filter_export(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_import_routes_import_route(input_yang_obj: yc_import_route_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_import_routes_import_route, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/import-routes/import-route

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    if input_yang_obj.permit_ibgp._changed():
        input_yang_obj.permit_ibgp = input_yang_obj.permit_ibgp
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_import_routes(input_yang_obj: yc_import_routes_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_import_routes, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/import-routes

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.import_route.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_import_routes_import_route(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_silent_interfaces_silent_interface(input_yang_obj: yc_silent_interface_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_silent_interfaces_silent_interface, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/silent-interfaces/silent-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_silent_interfaces(input_yang_obj: yc_silent_interfaces_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_silent_interfaces, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/silent-interfaces

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.silent_interface.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_silent_interfaces_silent_interface(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_undo_silent_interfaces_undo_silent_interface(input_yang_obj: yc_undo_silent_interface_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_undo_silent_interfaces_undo_silent_interface, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/undo-silent-interfaces/undo-silent-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_undo_silent_interfaces(input_yang_obj: yc_undo_silent_interfaces_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_undo_silent_interfaces, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/undo-silent-interfaces

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.undo_silent_interface.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_undo_silent_interfaces_undo_silent_interface(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_cost_bindings_cost_binding(input_yang_obj: yc_cost_binding_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_cost_bindings_cost_binding, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/cost-bindings/cost-binding

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_cost_bindings(input_yang_obj: yc_cost_bindings_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_cost_bindings, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/cost-bindings

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.cost_binding.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_cost_bindings_cost_binding(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_networks_network(input_yang_obj: yc_network_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_networks_network, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/networks/network

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.description._changed():
        input_yang_obj.description = input_yang_obj.description
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_networks(input_yang_obj: yc_networks_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_networks, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/networks

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.network.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_networks_network(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_stub(input_yang_obj: yc_stub_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_stub, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/stub

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.backbone_peer_ignore._changed():
        input_yang_obj.backbone_peer_ignore = input_yang_obj.backbone_peer_ignore
        
    if input_yang_obj.no_summary._changed():
        input_yang_obj.no_summary = input_yang_obj.no_summary
        
    if input_yang_obj.default_cost._changed():
        input_yang_obj.default_cost = input_yang_obj.default_cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_nssa(input_yang_obj: yc_nssa_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_nssa, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/nssa

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.no_summary._changed():
        input_yang_obj.no_summary = input_yang_obj.no_summary
        
    if input_yang_obj.translator_always._changed():
        input_yang_obj.translator_always = input_yang_obj.translator_always
        
    if input_yang_obj.default_route_advertise._changed():
        input_yang_obj.default_route_advertise = input_yang_obj.default_route_advertise
        
    if input_yang_obj.backbone_peer_ignore._changed():
        input_yang_obj.backbone_peer_ignore = input_yang_obj.backbone_peer_ignore
        
    if input_yang_obj.no_import_route._changed():
        input_yang_obj.no_import_route = input_yang_obj.no_import_route
        
    if input_yang_obj.set_n_bit._changed():
        input_yang_obj.set_n_bit = input_yang_obj.set_n_bit
        
    if input_yang_obj.suppress_fa._changed():
        input_yang_obj.suppress_fa = input_yang_obj.suppress_fa
        
    if input_yang_obj.zero_address_forwarding._changed():
        input_yang_obj.zero_address_forwarding = input_yang_obj.zero_address_forwarding
        
    if input_yang_obj.translator_interval._changed():
        input_yang_obj.translator_interval = input_yang_obj.translator_interval
        
    if input_yang_obj.default_cost._changed():
        input_yang_obj.default_cost = input_yang_obj.default_cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_ldp_sync(input_yang_obj: yc_ldp_sync_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_ldp_sync, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/ldp-sync

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.timer._changed():
        input_yang_obj.timer = input_yang_obj.timer
        
    if input_yang_obj.infinite._changed():
        input_yang_obj.infinite = input_yang_obj.infinite
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_mpls_te(input_yang_obj: yc_mpls_te_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_mpls_te, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/mpls-te

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.standard_complying._changed():
        input_yang_obj.standard_complying = input_yang_obj.standard_complying
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_authentication(input_yang_obj: yc_authentication_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_authentication, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/authentication

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    if input_yang_obj.auth_text_simple._changed():
        input_yang_obj.auth_text_simple = input_yang_obj.auth_text_simple
        
    if input_yang_obj.key_id._changed():
        input_yang_obj.key_id = input_yang_obj.key_id
        
    if input_yang_obj.auth_text_md5._changed():
        input_yang_obj.auth_text_md5 = input_yang_obj.auth_text_md5
        
    if input_yang_obj.key_chain_name._changed():
        input_yang_obj.key_chain_name = input_yang_obj.key_chain_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_abr_summary_prefixs_abr_summary_prefix(input_yang_obj: yc_abr_summary_prefix_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_abr_summary_prefixs_abr_summary_prefix, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/abr-summary-prefixs/abr-summary-prefix

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost_value._changed():
        input_yang_obj.cost_value = input_yang_obj.cost_value
        
    if input_yang_obj.cost_inherit_min._changed():
        input_yang_obj.cost_inherit_min = input_yang_obj.cost_inherit_min
        
    if input_yang_obj.hold_max_cost._changed():
        input_yang_obj.hold_max_cost = input_yang_obj.hold_max_cost
        
    if input_yang_obj.advertise._changed():
        input_yang_obj.advertise = input_yang_obj.advertise
        
    if input_yang_obj.generate_null_zero._changed():
        input_yang_obj.generate_null_zero = input_yang_obj.generate_null_zero
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_abr_summary_prefixs(input_yang_obj: yc_abr_summary_prefixs_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_abr_summary_prefixs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/abr-summary-prefixs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.abr_summary_prefix.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_abr_summary_prefixs_abr_summary_prefix(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_timer(input_yang_obj: yc_timer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_timer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/vlink-peers/vlink-peer/timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hello_interval._changed():
        input_yang_obj.hello_interval = input_yang_obj.hello_interval
        
    if input_yang_obj.dead_interval._changed():
        input_yang_obj.dead_interval = input_yang_obj.dead_interval
        
    if input_yang_obj.trans_delay_interval._changed():
        input_yang_obj.trans_delay_interval = input_yang_obj.trans_delay_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_authentication(input_yang_obj: yc_authentication_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_authentication, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/vlink-peers/vlink-peer/authentication

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    if input_yang_obj.auth_text_simple._changed():
        input_yang_obj.auth_text_simple = input_yang_obj.auth_text_simple
        
    if input_yang_obj.key_id._changed():
        input_yang_obj.key_id = input_yang_obj.key_id
        
    if input_yang_obj.auth_text_md5._changed():
        input_yang_obj.auth_text_md5 = input_yang_obj.auth_text_md5
        
    if input_yang_obj.key_chain_name._changed():
        input_yang_obj.key_chain_name = input_yang_obj.key_chain_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer(input_yang_obj: yc_vlink_peer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/vlink-peers/vlink-peer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.retransmit_interval._changed():
        input_yang_obj.retransmit_interval = input_yang_obj.retransmit_interval
        
    if input_yang_obj.smart_discover._changed():
        input_yang_obj.smart_discover = input_yang_obj.smart_discover
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_timer(input_yang_obj.timer, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_authentication(input_yang_obj.authentication, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers(input_yang_obj: yc_vlink_peers_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/vlink-peers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vlink_peer.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_timer(input_yang_obj: yc_timer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_timer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/sham-links/sham-link/timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hello_interval._changed():
        input_yang_obj.hello_interval = input_yang_obj.hello_interval
        
    if input_yang_obj.dead_interval._changed():
        input_yang_obj.dead_interval = input_yang_obj.dead_interval
        
    if input_yang_obj.trans_delay_interval._changed():
        input_yang_obj.trans_delay_interval = input_yang_obj.trans_delay_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_authentication(input_yang_obj: yc_authentication_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_authentication, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/sham-links/sham-link/authentication

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    if input_yang_obj.auth_text_simple._changed():
        input_yang_obj.auth_text_simple = input_yang_obj.auth_text_simple
        
    if input_yang_obj.key_id._changed():
        input_yang_obj.key_id = input_yang_obj.key_id
        
    if input_yang_obj.auth_text_md5._changed():
        input_yang_obj.auth_text_md5 = input_yang_obj.auth_text_md5
        
    if input_yang_obj.key_chain_name._changed():
        input_yang_obj.key_chain_name = input_yang_obj.key_chain_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link(input_yang_obj: yc_sham_link_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/sham-links/sham-link

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.retransmit_interval._changed():
        input_yang_obj.retransmit_interval = input_yang_obj.retransmit_interval
        
    if input_yang_obj.smart_discover._changed():
        input_yang_obj.smart_discover = input_yang_obj.smart_discover
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_timer(input_yang_obj.timer, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_authentication(input_yang_obj.authentication, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links(input_yang_obj: yc_sham_links_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/sham-links

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.sham_link.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_filters_filter(input_yang_obj: yc_filter_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_filters_filter, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/filters/filter

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.name_or_num._changed():
        input_yang_obj.name_or_num = input_yang_obj.name_or_num
        
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    if input_yang_obj.route_policy._changed():
        input_yang_obj.route_policy = input_yang_obj.route_policy
        
    if input_yang_obj.route_filter._changed():
        input_yang_obj.route_filter = input_yang_obj.route_filter
        
    if input_yang_obj.include_abr_summary._changed():
        input_yang_obj.include_abr_summary = input_yang_obj.include_abr_summary
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_filters(input_yang_obj: yc_filters_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_filters, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/filters

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.filter.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_filters_filter(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_frr_ti_lfa(input_yang_obj: yc_ti_lfa_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_frr_ti_lfa, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/frr/ti-lfa

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.disable._changed():
        input_yang_obj.disable = input_yang_obj.disable
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_frr(input_yang_obj: yc_frr_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_frr, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/frr

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.frr_disable._changed():
        input_yang_obj.frr_disable = input_yang_obj.frr_disable
        
    if input_yang_obj.rlfa_disable._changed():
        input_yang_obj.rlfa_disable = input_yang_obj.rlfa_disable
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_frr_ti_lfa(input_yang_obj.ti_lfa, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_timer(input_yang_obj: yc_timer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_timer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hello_interval._changed():
        input_yang_obj.hello_interval = input_yang_obj.hello_interval
        
    if input_yang_obj.hello_conser._changed():
        input_yang_obj.hello_conser = input_yang_obj.hello_conser
        
    if input_yang_obj.dead_interval._changed():
        input_yang_obj.dead_interval = input_yang_obj.dead_interval
        
    if input_yang_obj.wait_interval._changed():
        input_yang_obj.wait_interval = input_yang_obj.wait_interval
        
    if input_yang_obj.poll_interval._changed():
        input_yang_obj.poll_interval = input_yang_obj.poll_interval
        
    if input_yang_obj.retransmit_interval._changed():
        input_yang_obj.retransmit_interval = input_yang_obj.retransmit_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_ldp_sync(input_yang_obj: yc_ldp_sync_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_ldp_sync, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/ldp-sync

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hold_down_timer._changed():
        input_yang_obj.hold_down_timer = input_yang_obj.hold_down_timer
        
    if input_yang_obj.timer._changed():
        input_yang_obj.timer = input_yang_obj.timer
        
    if input_yang_obj.infinite._changed():
        input_yang_obj.infinite = input_yang_obj.infinite
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_bfd(input_yang_obj: yc_bfd_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_bfd, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/bfd

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.block._changed():
        input_yang_obj.block = input_yang_obj.block
        
    if input_yang_obj.detect_multiplier._changed():
        input_yang_obj.detect_multiplier = input_yang_obj.detect_multiplier
        
    if input_yang_obj.min_tx._changed():
        input_yang_obj.min_tx = input_yang_obj.min_tx
        
    if input_yang_obj.min_rx._changed():
        input_yang_obj.min_rx = input_yang_obj.min_rx
        
    if input_yang_obj.frr_binding._changed():
        input_yang_obj.frr_binding = input_yang_obj.frr_binding
        
    if input_yang_obj.incr_cost_block._changed():
        input_yang_obj.incr_cost_block = input_yang_obj.incr_cost_block
        
    if input_yang_obj.incr_cost_value._changed():
        input_yang_obj.incr_cost_value = input_yang_obj.incr_cost_value
        
    if input_yang_obj.per_link_flag._changed():
        input_yang_obj.per_link_flag = input_yang_obj.per_link_flag
        
    if input_yang_obj.one_arm_echo_flag._changed():
        input_yang_obj.one_arm_echo_flag = input_yang_obj.one_arm_echo_flag
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_authentication(input_yang_obj: yc_authentication_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_authentication, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/authentication

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    if input_yang_obj.auth_text_simple._changed():
        input_yang_obj.auth_text_simple = input_yang_obj.auth_text_simple
        
    if input_yang_obj.key_id._changed():
        input_yang_obj.key_id = input_yang_obj.key_id
        
    if input_yang_obj.auth_text_md5._changed():
        input_yang_obj.auth_text_md5 = input_yang_obj.auth_text_md5
        
    if input_yang_obj.key_chain_name._changed():
        input_yang_obj.key_chain_name = input_yang_obj.key_chain_name
        
    return translated_yang_obj

def _translate__network_instance_global(input_yang_obj: yc_global__huawei_network_instance__network_instance_global, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/global

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cfg_router_id._changed():
        input_yang_obj.cfg_router_id = input_yang_obj.cfg_router_id
        
    if input_yang_obj.as_notation_plain._changed():
        input_yang_obj.as_notation_plain = input_yang_obj.as_notation_plain
        
    if input_yang_obj.route_distinguisher_auto_ip._changed():
        input_yang_obj.route_distinguisher_auto_ip = input_yang_obj.route_distinguisher_auto_ip
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_parameter(input_yang_obj: yc_parameter_huawei_network_instance__network_instance_instances_instance_parameter, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/parameter

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.identifier._changed():
        input_yang_obj.identifier = input_yang_obj.identifier
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_vpn_targets_vpn_target(input_yang_obj: yc_vpn_target_huawei_network_instance__network_instance_instances_instance_afs_af_vpn_targets_vpn_target, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_vpn_targets(input_yang_obj: yc_vpn_targets_huawei_network_instance__network_instance_instances_instance_afs_af_vpn_targets, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_state(input_yang_obj: yc_state_huawei_network_instance__network_instance_instances_instance_afs_af_state, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/state

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.create_time._changed():
        input_yang_obj.create_time = input_yang_obj.create_time
        
    if input_yang_obj.up_time._changed():
        input_yang_obj.up_time = input_yang_obj.up_time
        
    if input_yang_obj.label._changed():
        input_yang_obj.label = input_yang_obj.label
        
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_tunnel_infos_tunnel_info(input_yang_obj: yc_tunnel_info_huawei_network_instance__network_instance_instances_instance_afs_af_tunnel_infos_tunnel_info, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/tunnel-infos/tunnel-info

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.color._changed():
        input_yang_obj.color = input_yang_obj.color
        
    if input_yang_obj.name._changed():
        input_yang_obj.name = input_yang_obj.name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_tunnel_infos(input_yang_obj: yc_tunnel_infos_huawei_network_instance__network_instance_instances_instance_afs_af_tunnel_infos, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/tunnel-infos

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.tunnel_info.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af_tunnel_infos_tunnel_info(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_ospf_import_rts_ospf_import_rt(input_yang_obj: yc_ospf_import_rt_huawei_network_instance__network_instance_instances_instance_afs_af_ospf_import_rts_ospf_import_rt, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/ospf-import-rts/ospf-import-rt

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.valid_route._changed():
        input_yang_obj.valid_route = input_yang_obj.valid_route
        
    if input_yang_obj.route_policy._changed():
        input_yang_obj.route_policy = input_yang_obj.route_policy
        
    if input_yang_obj.route_filter._changed():
        input_yang_obj.route_filter = input_yang_obj.route_filter
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_ospf_import_rts(input_yang_obj: yc_ospf_import_rts_huawei_network_instance__network_instance_instances_instance_afs_af_ospf_import_rts, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/ospf-import-rts

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ospf_import_rt.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af_ospf_import_rts_ospf_import_rt(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af(input_yang_obj: yc_af_huawei_network_instance__network_instance_instances_instance_afs_af, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.route_distinguisher._changed():
        input_yang_obj.route_distinguisher = input_yang_obj.route_distinguisher
        
    if input_yang_obj.effect_route_distinguisher._changed():
        input_yang_obj.effect_route_distinguisher = input_yang_obj.effect_route_distinguisher
        
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    if input_yang_obj.export_policy_add_ert_first._changed():
        input_yang_obj.export_policy_add_ert_first = input_yang_obj.export_policy_add_ert_first
        
    if input_yang_obj.label_mode._changed():
        input_yang_obj.label_mode = input_yang_obj.label_mode
        
    if input_yang_obj.vpn_frr._changed():
        input_yang_obj.vpn_frr = input_yang_obj.vpn_frr
        
    if input_yang_obj.tunnel_policy._changed():
        input_yang_obj.tunnel_policy = input_yang_obj.tunnel_policy
        
    if input_yang_obj.transit_vpn._changed():
        input_yang_obj.transit_vpn = input_yang_obj.transit_vpn
        
    if input_yang_obj.lsp_operation._changed():
        input_yang_obj.lsp_operation = input_yang_obj.lsp_operation
        
    if input_yang_obj.default_color._changed():
        input_yang_obj.default_color = input_yang_obj.default_color
        
    innerobj = _translate__network_instance_instances_instance_afs_af_vpn_targets(input_yang_obj.vpn_targets, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_afs_af_state(input_yang_obj.state, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_afs_af_tunnel_infos(input_yang_obj.tunnel_infos, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_afs_af_ospf_import_rts(input_yang_obj.ospf_import_rts, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs(input_yang_obj: yc_afs_huawei_network_instance__network_instance_instances_instance_afs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.af.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_gtsm(input_yang_obj: yc_gtsm_huawei_network_instance__network_instance_instances_instance_ospfv2_gtsm, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/gtsm

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hops._changed():
        input_yang_obj.hops = input_yang_obj.hops
        
    if input_yang_obj.nonstandard_multicast._changed():
        input_yang_obj.nonstandard_multicast = input_yang_obj.nonstandard_multicast
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id(input_yang_obj: yc_domain_id_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net/domain-id

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.domain_id._changed():
        input_yang_obj.domain_id = input_yang_obj.domain_id
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    if input_yang_obj.value._changed():
        input_yang_obj.value = input_yang_obj.value
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys_domain_id_secondary(input_yang_obj: yc_domain_id_secondary_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys_domain_id_secondary, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net/domain-id-secondarys/domain-id-secondary

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys(input_yang_obj: yc_domain_id_secondarys_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net/domain-id-secondarys

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.domain_id_secondary.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys_domain_id_secondary(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net(input_yang_obj: yc_private_net_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.eca_route._changed():
        input_yang_obj.eca_route = input_yang_obj.eca_route
        
    if input_yang_obj.disable._changed():
        input_yang_obj.disable = input_yang_obj.disable
        
    if input_yang_obj.value._changed():
        input_yang_obj.value = input_yang_obj.value
        
    if input_yang_obj.vpn_capability._changed():
        input_yang_obj.vpn_capability = input_yang_obj.vpn_capability
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id(input_yang_obj.domain_id, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys(input_yang_obj.domain_id_secondarys, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_host_name(input_yang_obj: yc_host_name_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_host_name, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/host-name

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.value._changed():
        input_yang_obj.value = input_yang_obj.value
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bandwidth(input_yang_obj: yc_bandwidth_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bandwidth, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bandwidth

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.config_bw_enable._changed():
        input_yang_obj.config_bw_enable = input_yang_obj.config_bw_enable
        
    if input_yang_obj.reference_value._changed():
        input_yang_obj.reference_value = input_yang_obj.reference_value
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arrival(input_yang_obj: yc_lsa_arrival_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arrival, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-arrival

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.max_interval._changed():
        input_yang_obj.max_interval = input_yang_obj.max_interval
        
    if input_yang_obj.start_interval._changed():
        input_yang_obj.start_interval = input_yang_obj.start_interval
        
    if input_yang_obj.hold_interval._changed():
        input_yang_obj.hold_interval = input_yang_obj.hold_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arr_supp_flap(input_yang_obj: yc_lsa_arr_supp_flap_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arr_supp_flap, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-arr-supp-flap

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.threshold_count._changed():
        input_yang_obj.threshold_count = input_yang_obj.threshold_count
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_originate(input_yang_obj: yc_lsa_originate_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_originate, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-originate

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.other_type_interval._changed():
        input_yang_obj.other_type_interval = input_yang_obj.other_type_interval
        
    if input_yang_obj.max_interval._changed():
        input_yang_obj.max_interval = input_yang_obj.max_interval
        
    if input_yang_obj.start_interval._changed():
        input_yang_obj.start_interval = input_yang_obj.start_interval
        
    if input_yang_obj.hold_interval._changed():
        input_yang_obj.hold_interval = input_yang_obj.hold_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_org_supp_flap(input_yang_obj: yc_lsa_org_supp_flap_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_org_supp_flap, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-org-supp-flap

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.threshold_count._changed():
        input_yang_obj.threshold_count = input_yang_obj.threshold_count
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_spf_schedule(input_yang_obj: yc_spf_schedule_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_spf_schedule, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/spf-schedule

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.max_interval._changed():
        input_yang_obj.max_interval = input_yang_obj.max_interval
        
    if input_yang_obj.start_interval._changed():
        input_yang_obj.start_interval = input_yang_obj.start_interval
        
    if input_yang_obj.hold_interval._changed():
        input_yang_obj.hold_interval = input_yang_obj.hold_interval
        
    if input_yang_obj.conserv_flag._changed():
        input_yang_obj.conserv_flag = input_yang_obj.conserv_flag
        
    if input_yang_obj.millisecond._changed():
        input_yang_obj.millisecond = input_yang_obj.millisecond
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer(input_yang_obj: yc_timer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arrival(input_yang_obj.lsa_arrival, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arr_supp_flap(input_yang_obj.lsa_arr_supp_flap, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_originate(input_yang_obj.lsa_originate, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_org_supp_flap(input_yang_obj.lsa_org_supp_flap, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_spf_schedule(input_yang_obj.spf_schedule, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bfd(input_yang_obj: yc_bfd_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bfd, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bfd

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.min_rx._changed():
        input_yang_obj.min_rx = input_yang_obj.min_rx
        
    if input_yang_obj.min_tx._changed():
        input_yang_obj.min_tx = input_yang_obj.min_tx
        
    if input_yang_obj.detect_multiplier._changed():
        input_yang_obj.detect_multiplier = input_yang_obj.detect_multiplier
        
    if input_yang_obj.incr_cost._changed():
        input_yang_obj.incr_cost = input_yang_obj.incr_cost
        
    if input_yang_obj.frr_binding._changed():
        input_yang_obj.frr_binding = input_yang_obj.frr_binding
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_metric_delay(input_yang_obj: yc_metric_delay_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_metric_delay, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/metric-delay

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.adv_enable._changed():
        input_yang_obj.adv_enable = input_yang_obj.adv_enable
        
    if input_yang_obj.suppress_timer._changed():
        input_yang_obj.suppress_timer = input_yang_obj.suppress_timer
        
    if input_yang_obj.suppress_percent._changed():
        input_yang_obj.suppress_percent = input_yang_obj.suppress_percent
        
    if input_yang_obj.suppress_absolute._changed():
        input_yang_obj.suppress_absolute = input_yang_obj.suppress_absolute
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bier(input_yang_obj: yc_bier_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bier, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_stub_router(input_yang_obj: yc_stub_router_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_stub_router, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/stub-router

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.flag._changed():
        input_yang_obj.flag = input_yang_obj.flag
        
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.include_stub._changed():
        input_yang_obj.include_stub = input_yang_obj.include_stub
        
    if input_yang_obj.external_lsa._changed():
        input_yang_obj.external_lsa = input_yang_obj.external_lsa
        
    if input_yang_obj.external_cost._changed():
        input_yang_obj.external_cost = input_yang_obj.external_cost
        
    if input_yang_obj.summary_lsa._changed():
        input_yang_obj.summary_lsa = input_yang_obj.summary_lsa
        
    if input_yang_obj.summary_cost._changed():
        input_yang_obj.summary_cost = input_yang_obj.summary_cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bgp_ls(input_yang_obj: yc_bgp_ls_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bgp_ls, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bgp-ls

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.identifier._changed():
        input_yang_obj.identifier = input_yang_obj.identifier
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_import_limit(input_yang_obj: yc_import_limit_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_import_limit, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/import-limit

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.max_number._changed():
        input_yang_obj.max_number = input_yang_obj.max_number
        
    if input_yang_obj.threshold_upper._changed():
        input_yang_obj.threshold_upper = input_yang_obj.threshold_upper
        
    if input_yang_obj.threshold_lower._changed():
        input_yang_obj.threshold_lower = input_yang_obj.threshold_lower
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_spf_control(input_yang_obj: yc_spf_control_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_spf_control, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/spf-control

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.max_load_balancing._changed():
        input_yang_obj.max_load_balancing = input_yang_obj.max_load_balancing
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_default_para(input_yang_obj: yc_default_para_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_default_para, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/default-para

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost_value._changed():
        input_yang_obj.cost_value = input_yang_obj.cost_value
        
    if input_yang_obj.cost_inherit_metric._changed():
        input_yang_obj.cost_inherit_metric = input_yang_obj.cost_inherit_metric
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_avoid_micro_loop(input_yang_obj: yc_avoid_micro_loop_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_avoid_micro_loop, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/avoid-micro-loop

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.frr_enable._changed():
        input_yang_obj.frr_enable = input_yang_obj.frr_enable
        
    if input_yang_obj.frr_rib_update_delay._changed():
        input_yang_obj.frr_rib_update_delay = input_yang_obj.frr_rib_update_delay
        
    if input_yang_obj.te_tunnel_enable._changed():
        input_yang_obj.te_tunnel_enable = input_yang_obj.te_tunnel_enable
        
    if input_yang_obj.te_tunnel_rib_update_delay._changed():
        input_yang_obj.te_tunnel_rib_update_delay = input_yang_obj.te_tunnel_rib_update_delay
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs_asbr_summary_prefix(input_yang_obj: yc_asbr_summary_prefix_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs_asbr_summary_prefix, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/asbr-summary-prefixs/asbr-summary-prefix

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.distribute_delay._changed():
        input_yang_obj.distribute_delay = input_yang_obj.distribute_delay
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.advertise._changed():
        input_yang_obj.advertise = input_yang_obj.advertise
        
    if input_yang_obj.generate_null_zero._changed():
        input_yang_obj.generate_null_zero = input_yang_obj.generate_null_zero
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs(input_yang_obj: yc_asbr_summary_prefixs_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/asbr-summary-prefixs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.asbr_summary_prefix.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs_asbr_summary_prefix(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_summary(input_yang_obj: yc_summary_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_summary, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/summary

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_no_summary(input_yang_obj: yc_no_summary_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_no_summary, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/no-summary

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    if input_yang_obj.distribute_delay._changed():
        input_yang_obj.distribute_delay = input_yang_obj.distribute_delay
        
    if input_yang_obj.permit_calculate_other._changed():
        input_yang_obj.permit_calculate_other = input_yang_obj.permit_calculate_other
        
    if input_yang_obj.permit_ibgp._changed():
        input_yang_obj.permit_ibgp = input_yang_obj.permit_ibgp
        
    if input_yang_obj.always._changed():
        input_yang_obj.always = input_yang_obj.always
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_route_preferences_route_preference(input_yang_obj: yc_route_preference_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_route_preferences_route_preference, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/route-preferences/route-preference

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.preference._changed():
        input_yang_obj.preference = input_yang_obj.preference
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_route_preferences(input_yang_obj: yc_route_preferences_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_route_preferences, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/route-preferences

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_preference.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_route_preferences_route_preference(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights_nexthop_weight(input_yang_obj: yc_nexthop_weight_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights_nexthop_weight, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/nexthop-weights/nexthop-weight

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.weight._changed():
        input_yang_obj.weight = input_yang_obj.weight
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights(input_yang_obj: yc_nexthop_weights_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/nexthop-weights

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.nexthop_weight.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights_nexthop_weight(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys_prefix_priority(input_yang_obj: yc_prefix_priority_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys_prefix_priority, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/prefix-prioritys/prefix-priority

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys(input_yang_obj: yc_prefix_prioritys_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/prefix-prioritys

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.prefix_priority.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys_prefix_priority(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_ecmp_prefer(input_yang_obj: yc_ecmp_prefer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_ecmp_prefer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/ecmp-prefer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.te_tunnel._changed():
        input_yang_obj.te_tunnel = input_yang_obj.te_tunnel
        
    if input_yang_obj.intact._changed():
        input_yang_obj.intact = input_yang_obj.intact
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr_tiebreaker(input_yang_obj: yc_tiebreaker_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr_tiebreaker, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr/tiebreaker

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.node_protect._changed():
        input_yang_obj.node_protect = input_yang_obj.node_protect
        
    if input_yang_obj.lowest_cost._changed():
        input_yang_obj.lowest_cost = input_yang_obj.lowest_cost
        
    if input_yang_obj.ldp_sync._changed():
        input_yang_obj.ldp_sync = input_yang_obj.ldp_sync
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr_route_policy(input_yang_obj: yc_route_policy_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr_route_policy, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr/route-policy

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr_rlfa_tunnel(input_yang_obj: yc_rlfa_tunnel_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr_rlfa_tunnel, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr/rlfa-tunnel

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.ip_prefix_name._changed():
        input_yang_obj.ip_prefix_name = input_yang_obj.ip_prefix_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr(input_yang_obj: yc_frr_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.lfa_enable._changed():
        input_yang_obj.lfa_enable = input_yang_obj.lfa_enable
        
    if input_yang_obj.rlfa_enable._changed():
        input_yang_obj.rlfa_enable = input_yang_obj.rlfa_enable
        
    if input_yang_obj.rlfa_max_cost._changed():
        input_yang_obj.rlfa_max_cost = input_yang_obj.rlfa_max_cost
        
    if input_yang_obj.tilfa_enable._changed():
        input_yang_obj.tilfa_enable = input_yang_obj.tilfa_enable
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_frr_tiebreaker(input_yang_obj.tiebreaker, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_frr_route_policy(input_yang_obj.route_policy, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_frr_rlfa_tunnel(input_yang_obj.rlfa_tunnel, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_local_mt_filter(input_yang_obj: yc_local_mt_filter_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_local_mt_filter, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/local-mt-filter

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.acl_name_or_num._changed():
        input_yang_obj.acl_name_or_num = input_yang_obj.acl_name_or_num
        
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_peers_peer(input_yang_obj: yc_peer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_peers_peer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/peers/peer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.priority._changed():
        input_yang_obj.priority = input_yang_obj.priority
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_peers(input_yang_obj: yc_peers_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_peers, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/peers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.peer.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_peers_peer(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs_filter_lsa_out(input_yang_obj: yc_filter_lsa_out_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs_filter_lsa_out, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/filter-lsa-outs/filter-lsa-out

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs(input_yang_obj: yc_filter_lsa_outs_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/filter-lsa-outs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.filter_lsa_out.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs_filter_lsa_out(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_gr_ietf(input_yang_obj: yc_gr_ietf_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_gr_ietf, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/gr-ietf

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.never._changed():
        input_yang_obj.never = input_yang_obj.never
        
    if input_yang_obj.planned_only._changed():
        input_yang_obj.planned_only = input_yang_obj.planned_only
        
    if input_yang_obj.ignore_external_lsa._changed():
        input_yang_obj.ignore_external_lsa = input_yang_obj.ignore_external_lsa
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_flood_control(input_yang_obj: yc_flood_control_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_flood_control, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/flood-control

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.number._changed():
        input_yang_obj.number = input_yang_obj.number
        
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids_summary_router_id(input_yang_obj: yc_summary_router_id_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids_summary_router_id, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/dn-bit/summary-router-ids/summary-router-id

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids(input_yang_obj: yc_summary_router_ids_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/dn-bit/summary-router-ids

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.summary_router_id.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids_summary_router_id(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_dn_bit(input_yang_obj: yc_dn_bit_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_dn_bit, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/dn-bit

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.set_ase._changed():
        input_yang_obj.set_ase = input_yang_obj.set_ase
        
    if input_yang_obj.set_nssa._changed():
        input_yang_obj.set_nssa = input_yang_obj.set_nssa
        
    if input_yang_obj.set_summary._changed():
        input_yang_obj.set_summary = input_yang_obj.set_summary
        
    if input_yang_obj.check_ase._changed():
        input_yang_obj.check_ase = input_yang_obj.check_ase
        
    if input_yang_obj.check_nssa._changed():
        input_yang_obj.check_nssa = input_yang_obj.check_nssa
        
    if input_yang_obj.check_summary._changed():
        input_yang_obj.check_summary = input_yang_obj.check_summary
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids(input_yang_obj.summary_router_ids, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_filter_import(input_yang_obj: yc_filter_import_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_filter_import, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/filter-import

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.name_or_num._changed():
        input_yang_obj.name_or_num = input_yang_obj.name_or_num
        
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    if input_yang_obj.route_policy._changed():
        input_yang_obj.route_policy = input_yang_obj.route_policy
        
    if input_yang_obj.route_filter._changed():
        input_yang_obj.route_filter = input_yang_obj.route_filter
        
    if input_yang_obj.secondary._changed():
        input_yang_obj.secondary = input_yang_obj.secondary
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_filter_exports_filter_export(input_yang_obj: yc_filter_export_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_filter_exports_filter_export, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/filter-exports/filter-export

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.name_or_num._changed():
        input_yang_obj.name_or_num = input_yang_obj.name_or_num
        
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    if input_yang_obj.route_policy._changed():
        input_yang_obj.route_policy = input_yang_obj.route_policy
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_filter_exports(input_yang_obj: yc_filter_exports_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_filter_exports, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/filter-exports

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.filter_export.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_filter_exports_filter_export(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_import_routes_import_route(input_yang_obj: yc_import_route_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_import_routes_import_route, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/import-routes/import-route

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    if input_yang_obj.permit_ibgp._changed():
        input_yang_obj.permit_ibgp = input_yang_obj.permit_ibgp
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_import_routes(input_yang_obj: yc_import_routes_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_import_routes, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/import-routes

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.import_route.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_import_routes_import_route(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_silent_interfaces_silent_interface(input_yang_obj: yc_silent_interface_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_silent_interfaces_silent_interface, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/silent-interfaces/silent-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_silent_interfaces(input_yang_obj: yc_silent_interfaces_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_silent_interfaces, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/silent-interfaces

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.silent_interface.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_silent_interfaces_silent_interface(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_undo_silent_interfaces_undo_silent_interface(input_yang_obj: yc_undo_silent_interface_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_undo_silent_interfaces_undo_silent_interface, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/undo-silent-interfaces/undo-silent-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_undo_silent_interfaces(input_yang_obj: yc_undo_silent_interfaces_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_undo_silent_interfaces, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/undo-silent-interfaces

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.undo_silent_interface.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_undo_silent_interfaces_undo_silent_interface(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_cost_bindings_cost_binding(input_yang_obj: yc_cost_binding_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_cost_bindings_cost_binding, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/cost-bindings/cost-binding

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_cost_bindings(input_yang_obj: yc_cost_bindings_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_cost_bindings, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/cost-bindings

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.cost_binding.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_cost_bindings_cost_binding(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_networks_network(input_yang_obj: yc_network_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_networks_network, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/networks/network

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.description._changed():
        input_yang_obj.description = input_yang_obj.description
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_networks(input_yang_obj: yc_networks_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_networks, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/networks

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.network.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_networks_network(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_stub(input_yang_obj: yc_stub_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_stub, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/stub

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.backbone_peer_ignore._changed():
        input_yang_obj.backbone_peer_ignore = input_yang_obj.backbone_peer_ignore
        
    if input_yang_obj.no_summary._changed():
        input_yang_obj.no_summary = input_yang_obj.no_summary
        
    if input_yang_obj.default_cost._changed():
        input_yang_obj.default_cost = input_yang_obj.default_cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_nssa(input_yang_obj: yc_nssa_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_nssa, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/nssa

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.no_summary._changed():
        input_yang_obj.no_summary = input_yang_obj.no_summary
        
    if input_yang_obj.translator_always._changed():
        input_yang_obj.translator_always = input_yang_obj.translator_always
        
    if input_yang_obj.default_route_advertise._changed():
        input_yang_obj.default_route_advertise = input_yang_obj.default_route_advertise
        
    if input_yang_obj.backbone_peer_ignore._changed():
        input_yang_obj.backbone_peer_ignore = input_yang_obj.backbone_peer_ignore
        
    if input_yang_obj.no_import_route._changed():
        input_yang_obj.no_import_route = input_yang_obj.no_import_route
        
    if input_yang_obj.set_n_bit._changed():
        input_yang_obj.set_n_bit = input_yang_obj.set_n_bit
        
    if input_yang_obj.suppress_fa._changed():
        input_yang_obj.suppress_fa = input_yang_obj.suppress_fa
        
    if input_yang_obj.zero_address_forwarding._changed():
        input_yang_obj.zero_address_forwarding = input_yang_obj.zero_address_forwarding
        
    if input_yang_obj.translator_interval._changed():
        input_yang_obj.translator_interval = input_yang_obj.translator_interval
        
    if input_yang_obj.default_cost._changed():
        input_yang_obj.default_cost = input_yang_obj.default_cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_ldp_sync(input_yang_obj: yc_ldp_sync_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_ldp_sync, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/ldp-sync

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.timer._changed():
        input_yang_obj.timer = input_yang_obj.timer
        
    if input_yang_obj.infinite._changed():
        input_yang_obj.infinite = input_yang_obj.infinite
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_mpls_te(input_yang_obj: yc_mpls_te_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_mpls_te, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/mpls-te

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.standard_complying._changed():
        input_yang_obj.standard_complying = input_yang_obj.standard_complying
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_authentication(input_yang_obj: yc_authentication_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_authentication, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/authentication

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    if input_yang_obj.auth_text_simple._changed():
        input_yang_obj.auth_text_simple = input_yang_obj.auth_text_simple
        
    if input_yang_obj.key_id._changed():
        input_yang_obj.key_id = input_yang_obj.key_id
        
    if input_yang_obj.auth_text_md5._changed():
        input_yang_obj.auth_text_md5 = input_yang_obj.auth_text_md5
        
    if input_yang_obj.key_chain_name._changed():
        input_yang_obj.key_chain_name = input_yang_obj.key_chain_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_abr_summary_prefixs_abr_summary_prefix(input_yang_obj: yc_abr_summary_prefix_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_abr_summary_prefixs_abr_summary_prefix, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/abr-summary-prefixs/abr-summary-prefix

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost_value._changed():
        input_yang_obj.cost_value = input_yang_obj.cost_value
        
    if input_yang_obj.cost_inherit_min._changed():
        input_yang_obj.cost_inherit_min = input_yang_obj.cost_inherit_min
        
    if input_yang_obj.hold_max_cost._changed():
        input_yang_obj.hold_max_cost = input_yang_obj.hold_max_cost
        
    if input_yang_obj.advertise._changed():
        input_yang_obj.advertise = input_yang_obj.advertise
        
    if input_yang_obj.generate_null_zero._changed():
        input_yang_obj.generate_null_zero = input_yang_obj.generate_null_zero
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_abr_summary_prefixs(input_yang_obj: yc_abr_summary_prefixs_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_abr_summary_prefixs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/abr-summary-prefixs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.abr_summary_prefix.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_abr_summary_prefixs_abr_summary_prefix(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_timer(input_yang_obj: yc_timer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_timer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/vlink-peers/vlink-peer/timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hello_interval._changed():
        input_yang_obj.hello_interval = input_yang_obj.hello_interval
        
    if input_yang_obj.dead_interval._changed():
        input_yang_obj.dead_interval = input_yang_obj.dead_interval
        
    if input_yang_obj.trans_delay_interval._changed():
        input_yang_obj.trans_delay_interval = input_yang_obj.trans_delay_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_authentication(input_yang_obj: yc_authentication_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_authentication, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/vlink-peers/vlink-peer/authentication

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    if input_yang_obj.auth_text_simple._changed():
        input_yang_obj.auth_text_simple = input_yang_obj.auth_text_simple
        
    if input_yang_obj.key_id._changed():
        input_yang_obj.key_id = input_yang_obj.key_id
        
    if input_yang_obj.auth_text_md5._changed():
        input_yang_obj.auth_text_md5 = input_yang_obj.auth_text_md5
        
    if input_yang_obj.key_chain_name._changed():
        input_yang_obj.key_chain_name = input_yang_obj.key_chain_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer(input_yang_obj: yc_vlink_peer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/vlink-peers/vlink-peer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.retransmit_interval._changed():
        input_yang_obj.retransmit_interval = input_yang_obj.retransmit_interval
        
    if input_yang_obj.smart_discover._changed():
        input_yang_obj.smart_discover = input_yang_obj.smart_discover
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_timer(input_yang_obj.timer, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_authentication(input_yang_obj.authentication, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers(input_yang_obj: yc_vlink_peers_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/vlink-peers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vlink_peer.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_timer(input_yang_obj: yc_timer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_timer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/sham-links/sham-link/timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hello_interval._changed():
        input_yang_obj.hello_interval = input_yang_obj.hello_interval
        
    if input_yang_obj.dead_interval._changed():
        input_yang_obj.dead_interval = input_yang_obj.dead_interval
        
    if input_yang_obj.trans_delay_interval._changed():
        input_yang_obj.trans_delay_interval = input_yang_obj.trans_delay_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_authentication(input_yang_obj: yc_authentication_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_authentication, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/sham-links/sham-link/authentication

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    if input_yang_obj.auth_text_simple._changed():
        input_yang_obj.auth_text_simple = input_yang_obj.auth_text_simple
        
    if input_yang_obj.key_id._changed():
        input_yang_obj.key_id = input_yang_obj.key_id
        
    if input_yang_obj.auth_text_md5._changed():
        input_yang_obj.auth_text_md5 = input_yang_obj.auth_text_md5
        
    if input_yang_obj.key_chain_name._changed():
        input_yang_obj.key_chain_name = input_yang_obj.key_chain_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link(input_yang_obj: yc_sham_link_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/sham-links/sham-link

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.retransmit_interval._changed():
        input_yang_obj.retransmit_interval = input_yang_obj.retransmit_interval
        
    if input_yang_obj.smart_discover._changed():
        input_yang_obj.smart_discover = input_yang_obj.smart_discover
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_timer(input_yang_obj.timer, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_authentication(input_yang_obj.authentication, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links(input_yang_obj: yc_sham_links_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/sham-links

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.sham_link.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_filters_filter(input_yang_obj: yc_filter_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_filters_filter, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/filters/filter

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.name_or_num._changed():
        input_yang_obj.name_or_num = input_yang_obj.name_or_num
        
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    if input_yang_obj.route_policy._changed():
        input_yang_obj.route_policy = input_yang_obj.route_policy
        
    if input_yang_obj.route_filter._changed():
        input_yang_obj.route_filter = input_yang_obj.route_filter
        
    if input_yang_obj.include_abr_summary._changed():
        input_yang_obj.include_abr_summary = input_yang_obj.include_abr_summary
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_filters(input_yang_obj: yc_filters_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_filters, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/filters

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.filter.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_filters_filter(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_frr_ti_lfa(input_yang_obj: yc_ti_lfa_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_frr_ti_lfa, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/frr/ti-lfa

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.disable._changed():
        input_yang_obj.disable = input_yang_obj.disable
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_frr(input_yang_obj: yc_frr_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_frr, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/frr

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.frr_disable._changed():
        input_yang_obj.frr_disable = input_yang_obj.frr_disable
        
    if input_yang_obj.rlfa_disable._changed():
        input_yang_obj.rlfa_disable = input_yang_obj.rlfa_disable
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_frr_ti_lfa(input_yang_obj.ti_lfa, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_timer(input_yang_obj: yc_timer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_timer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hello_interval._changed():
        input_yang_obj.hello_interval = input_yang_obj.hello_interval
        
    if input_yang_obj.hello_conser._changed():
        input_yang_obj.hello_conser = input_yang_obj.hello_conser
        
    if input_yang_obj.dead_interval._changed():
        input_yang_obj.dead_interval = input_yang_obj.dead_interval
        
    if input_yang_obj.wait_interval._changed():
        input_yang_obj.wait_interval = input_yang_obj.wait_interval
        
    if input_yang_obj.poll_interval._changed():
        input_yang_obj.poll_interval = input_yang_obj.poll_interval
        
    if input_yang_obj.retransmit_interval._changed():
        input_yang_obj.retransmit_interval = input_yang_obj.retransmit_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_ldp_sync(input_yang_obj: yc_ldp_sync_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_ldp_sync, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/ldp-sync

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hold_down_timer._changed():
        input_yang_obj.hold_down_timer = input_yang_obj.hold_down_timer
        
    if input_yang_obj.timer._changed():
        input_yang_obj.timer = input_yang_obj.timer
        
    if input_yang_obj.infinite._changed():
        input_yang_obj.infinite = input_yang_obj.infinite
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_bfd(input_yang_obj: yc_bfd_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_bfd, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/bfd

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.block._changed():
        input_yang_obj.block = input_yang_obj.block
        
    if input_yang_obj.detect_multiplier._changed():
        input_yang_obj.detect_multiplier = input_yang_obj.detect_multiplier
        
    if input_yang_obj.min_tx._changed():
        input_yang_obj.min_tx = input_yang_obj.min_tx
        
    if input_yang_obj.min_rx._changed():
        input_yang_obj.min_rx = input_yang_obj.min_rx
        
    if input_yang_obj.frr_binding._changed():
        input_yang_obj.frr_binding = input_yang_obj.frr_binding
        
    if input_yang_obj.incr_cost_block._changed():
        input_yang_obj.incr_cost_block = input_yang_obj.incr_cost_block
        
    if input_yang_obj.incr_cost_value._changed():
        input_yang_obj.incr_cost_value = input_yang_obj.incr_cost_value
        
    if input_yang_obj.per_link_flag._changed():
        input_yang_obj.per_link_flag = input_yang_obj.per_link_flag
        
    if input_yang_obj.one_arm_echo_flag._changed():
        input_yang_obj.one_arm_echo_flag = input_yang_obj.one_arm_echo_flag
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_authentication(input_yang_obj: yc_authentication_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_authentication, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/authentication

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    if input_yang_obj.auth_text_simple._changed():
        input_yang_obj.auth_text_simple = input_yang_obj.auth_text_simple
        
    if input_yang_obj.key_id._changed():
        input_yang_obj.key_id = input_yang_obj.key_id
        
    if input_yang_obj.auth_text_md5._changed():
        input_yang_obj.auth_text_md5 = input_yang_obj.auth_text_md5
        
    if input_yang_obj.key_chain_name._changed():
        input_yang_obj.key_chain_name = input_yang_obj.key_chain_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_filter_lsa_out(input_yang_obj: yc_filter_lsa_out_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_filter_lsa_out, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/filter-lsa-out

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.all_flag._changed():
        input_yang_obj.all_flag = input_yang_obj.all_flag
        
    if input_yang_obj.sum_flag._changed():
        input_yang_obj.sum_flag = input_yang_obj.sum_flag
        
    if input_yang_obj.ase_flag._changed():
        input_yang_obj.ase_flag = input_yang_obj.ase_flag
        
    if input_yang_obj.nssa_flag._changed():
        input_yang_obj.nssa_flag = input_yang_obj.nssa_flag
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_suppress_flapping_peer(input_yang_obj: yc_peer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_suppress_flapping_peer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/suppress-flapping/peer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.detect_interval._changed():
        input_yang_obj.detect_interval = input_yang_obj.detect_interval
        
    if input_yang_obj.threshold._changed():
        input_yang_obj.threshold = input_yang_obj.threshold
        
    if input_yang_obj.resume_interval._changed():
        input_yang_obj.resume_interval = input_yang_obj.resume_interval
        
    if input_yang_obj.hold_down_interval._changed():
        input_yang_obj.hold_down_interval = input_yang_obj.hold_down_interval
        
    if input_yang_obj.hold_max_cost._changed():
        input_yang_obj.hold_max_cost = input_yang_obj.hold_max_cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_suppress_flapping(input_yang_obj: yc_suppress_flapping_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_suppress_flapping, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/suppress-flapping

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_suppress_flapping_peer(input_yang_obj.peer, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_flush_source_trace(input_yang_obj: yc_flush_source_trace_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_flush_source_trace, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/flush-source-trace

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.block._changed():
        input_yang_obj.block = input_yang_obj.block
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_mpls_te_peers_mpls_te_peer_procs_proc(input_yang_obj: yc_proc_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_mpls_te_peers_mpls_te_peer_procs_proc, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/mpls-te-peers/mpls-te-peer/procs/proc

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_mpls_te_peers_mpls_te_peer_procs(input_yang_obj: yc_procs_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_mpls_te_peers_mpls_te_peer_procs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/mpls-te-peers/mpls-te-peer/procs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.proc.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_mpls_te_peers_mpls_te_peer_procs_proc(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_mpls_te_peers_mpls_te_peer(input_yang_obj: yc_mpls_te_peer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_mpls_te_peers_mpls_te_peer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/mpls-te-peers/mpls-te-peer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_mpls_te_peers_mpls_te_peer_procs(input_yang_obj.procs, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_mpls_te_peers(input_yang_obj: yc_mpls_te_peers_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_mpls_te_peers, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/mpls-te-peers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.mpls_te_peer.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_mpls_te_peers_mpls_te_peer(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_frr(input_yang_obj: yc_frr_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_frr, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/multi-areas/multi-area/frr

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.frr_disable._changed():
        input_yang_obj.frr_disable = input_yang_obj.frr_disable
        
    if input_yang_obj.rlfa_disable._changed():
        input_yang_obj.rlfa_disable = input_yang_obj.rlfa_disable
        
    if input_yang_obj.ti_lfa_disable._changed():
        input_yang_obj.ti_lfa_disable = input_yang_obj.ti_lfa_disable
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_timer(input_yang_obj: yc_timer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_timer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/multi-areas/multi-area/timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hello_interval._changed():
        input_yang_obj.hello_interval = input_yang_obj.hello_interval
        
    if input_yang_obj.dead_interval._changed():
        input_yang_obj.dead_interval = input_yang_obj.dead_interval
        
    if input_yang_obj.retransmit_interval._changed():
        input_yang_obj.retransmit_interval = input_yang_obj.retransmit_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_ldp_sync(input_yang_obj: yc_ldp_sync_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_ldp_sync, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/multi-areas/multi-area/ldp-sync

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hold_down_timer._changed():
        input_yang_obj.hold_down_timer = input_yang_obj.hold_down_timer
        
    if input_yang_obj.timer._changed():
        input_yang_obj.timer = input_yang_obj.timer
        
    if input_yang_obj.infinite._changed():
        input_yang_obj.infinite = input_yang_obj.infinite
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_bfd(input_yang_obj: yc_bfd_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_bfd, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/multi-areas/multi-area/bfd

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.block._changed():
        input_yang_obj.block = input_yang_obj.block
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_authentication(input_yang_obj: yc_authentication_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_authentication, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/multi-areas/multi-area/authentication

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    if input_yang_obj.auth_text_simple._changed():
        input_yang_obj.auth_text_simple = input_yang_obj.auth_text_simple
        
    if input_yang_obj.key_id._changed():
        input_yang_obj.key_id = input_yang_obj.key_id
        
    if input_yang_obj.auth_text_md5._changed():
        input_yang_obj.auth_text_md5 = input_yang_obj.auth_text_md5
        
    if input_yang_obj.key_chain_name._changed():
        input_yang_obj.key_chain_name = input_yang_obj.key_chain_name
        
    return translated_yang_obj

def _translate__network_instance_global(input_yang_obj: yc_global__huawei_network_instance__network_instance_global, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/global

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cfg_router_id._changed():
        input_yang_obj.cfg_router_id = input_yang_obj.cfg_router_id
        
    if input_yang_obj.as_notation_plain._changed():
        input_yang_obj.as_notation_plain = input_yang_obj.as_notation_plain
        
    if input_yang_obj.route_distinguisher_auto_ip._changed():
        input_yang_obj.route_distinguisher_auto_ip = input_yang_obj.route_distinguisher_auto_ip
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_parameter(input_yang_obj: yc_parameter_huawei_network_instance__network_instance_instances_instance_parameter, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/parameter

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.identifier._changed():
        input_yang_obj.identifier = input_yang_obj.identifier
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_vpn_targets_vpn_target(input_yang_obj: yc_vpn_target_huawei_network_instance__network_instance_instances_instance_afs_af_vpn_targets_vpn_target, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_vpn_targets(input_yang_obj: yc_vpn_targets_huawei_network_instance__network_instance_instances_instance_afs_af_vpn_targets, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_state(input_yang_obj: yc_state_huawei_network_instance__network_instance_instances_instance_afs_af_state, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/state

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.create_time._changed():
        input_yang_obj.create_time = input_yang_obj.create_time
        
    if input_yang_obj.up_time._changed():
        input_yang_obj.up_time = input_yang_obj.up_time
        
    if input_yang_obj.label._changed():
        input_yang_obj.label = input_yang_obj.label
        
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_tunnel_infos_tunnel_info(input_yang_obj: yc_tunnel_info_huawei_network_instance__network_instance_instances_instance_afs_af_tunnel_infos_tunnel_info, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/tunnel-infos/tunnel-info

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.color._changed():
        input_yang_obj.color = input_yang_obj.color
        
    if input_yang_obj.name._changed():
        input_yang_obj.name = input_yang_obj.name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_tunnel_infos(input_yang_obj: yc_tunnel_infos_huawei_network_instance__network_instance_instances_instance_afs_af_tunnel_infos, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/tunnel-infos

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.tunnel_info.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af_tunnel_infos_tunnel_info(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_ospf_import_rts_ospf_import_rt(input_yang_obj: yc_ospf_import_rt_huawei_network_instance__network_instance_instances_instance_afs_af_ospf_import_rts_ospf_import_rt, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/ospf-import-rts/ospf-import-rt

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.valid_route._changed():
        input_yang_obj.valid_route = input_yang_obj.valid_route
        
    if input_yang_obj.route_policy._changed():
        input_yang_obj.route_policy = input_yang_obj.route_policy
        
    if input_yang_obj.route_filter._changed():
        input_yang_obj.route_filter = input_yang_obj.route_filter
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_ospf_import_rts(input_yang_obj: yc_ospf_import_rts_huawei_network_instance__network_instance_instances_instance_afs_af_ospf_import_rts, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/ospf-import-rts

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ospf_import_rt.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af_ospf_import_rts_ospf_import_rt(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af(input_yang_obj: yc_af_huawei_network_instance__network_instance_instances_instance_afs_af, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.route_distinguisher._changed():
        input_yang_obj.route_distinguisher = input_yang_obj.route_distinguisher
        
    if input_yang_obj.effect_route_distinguisher._changed():
        input_yang_obj.effect_route_distinguisher = input_yang_obj.effect_route_distinguisher
        
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    if input_yang_obj.export_policy_add_ert_first._changed():
        input_yang_obj.export_policy_add_ert_first = input_yang_obj.export_policy_add_ert_first
        
    if input_yang_obj.label_mode._changed():
        input_yang_obj.label_mode = input_yang_obj.label_mode
        
    if input_yang_obj.vpn_frr._changed():
        input_yang_obj.vpn_frr = input_yang_obj.vpn_frr
        
    if input_yang_obj.tunnel_policy._changed():
        input_yang_obj.tunnel_policy = input_yang_obj.tunnel_policy
        
    if input_yang_obj.transit_vpn._changed():
        input_yang_obj.transit_vpn = input_yang_obj.transit_vpn
        
    if input_yang_obj.lsp_operation._changed():
        input_yang_obj.lsp_operation = input_yang_obj.lsp_operation
        
    if input_yang_obj.default_color._changed():
        input_yang_obj.default_color = input_yang_obj.default_color
        
    innerobj = _translate__network_instance_instances_instance_afs_af_vpn_targets(input_yang_obj.vpn_targets, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_afs_af_state(input_yang_obj.state, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_afs_af_tunnel_infos(input_yang_obj.tunnel_infos, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_afs_af_ospf_import_rts(input_yang_obj.ospf_import_rts, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs(input_yang_obj: yc_afs_huawei_network_instance__network_instance_instances_instance_afs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.af.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_gtsm(input_yang_obj: yc_gtsm_huawei_network_instance__network_instance_instances_instance_ospfv2_gtsm, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/gtsm

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hops._changed():
        input_yang_obj.hops = input_yang_obj.hops
        
    if input_yang_obj.nonstandard_multicast._changed():
        input_yang_obj.nonstandard_multicast = input_yang_obj.nonstandard_multicast
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id(input_yang_obj: yc_domain_id_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net/domain-id

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.domain_id._changed():
        input_yang_obj.domain_id = input_yang_obj.domain_id
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    if input_yang_obj.value._changed():
        input_yang_obj.value = input_yang_obj.value
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys_domain_id_secondary(input_yang_obj: yc_domain_id_secondary_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys_domain_id_secondary, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net/domain-id-secondarys/domain-id-secondary

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys(input_yang_obj: yc_domain_id_secondarys_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net/domain-id-secondarys

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.domain_id_secondary.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys_domain_id_secondary(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net(input_yang_obj: yc_private_net_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.eca_route._changed():
        input_yang_obj.eca_route = input_yang_obj.eca_route
        
    if input_yang_obj.disable._changed():
        input_yang_obj.disable = input_yang_obj.disable
        
    if input_yang_obj.value._changed():
        input_yang_obj.value = input_yang_obj.value
        
    if input_yang_obj.vpn_capability._changed():
        input_yang_obj.vpn_capability = input_yang_obj.vpn_capability
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id(input_yang_obj.domain_id, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys(input_yang_obj.domain_id_secondarys, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_host_name(input_yang_obj: yc_host_name_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_host_name, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/host-name

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.value._changed():
        input_yang_obj.value = input_yang_obj.value
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bandwidth(input_yang_obj: yc_bandwidth_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bandwidth, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bandwidth

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.config_bw_enable._changed():
        input_yang_obj.config_bw_enable = input_yang_obj.config_bw_enable
        
    if input_yang_obj.reference_value._changed():
        input_yang_obj.reference_value = input_yang_obj.reference_value
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arrival(input_yang_obj: yc_lsa_arrival_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arrival, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-arrival

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.max_interval._changed():
        input_yang_obj.max_interval = input_yang_obj.max_interval
        
    if input_yang_obj.start_interval._changed():
        input_yang_obj.start_interval = input_yang_obj.start_interval
        
    if input_yang_obj.hold_interval._changed():
        input_yang_obj.hold_interval = input_yang_obj.hold_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arr_supp_flap(input_yang_obj: yc_lsa_arr_supp_flap_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arr_supp_flap, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-arr-supp-flap

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.threshold_count._changed():
        input_yang_obj.threshold_count = input_yang_obj.threshold_count
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_originate(input_yang_obj: yc_lsa_originate_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_originate, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-originate

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.other_type_interval._changed():
        input_yang_obj.other_type_interval = input_yang_obj.other_type_interval
        
    if input_yang_obj.max_interval._changed():
        input_yang_obj.max_interval = input_yang_obj.max_interval
        
    if input_yang_obj.start_interval._changed():
        input_yang_obj.start_interval = input_yang_obj.start_interval
        
    if input_yang_obj.hold_interval._changed():
        input_yang_obj.hold_interval = input_yang_obj.hold_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_org_supp_flap(input_yang_obj: yc_lsa_org_supp_flap_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_org_supp_flap, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-org-supp-flap

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.threshold_count._changed():
        input_yang_obj.threshold_count = input_yang_obj.threshold_count
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_spf_schedule(input_yang_obj: yc_spf_schedule_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_spf_schedule, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/spf-schedule

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.max_interval._changed():
        input_yang_obj.max_interval = input_yang_obj.max_interval
        
    if input_yang_obj.start_interval._changed():
        input_yang_obj.start_interval = input_yang_obj.start_interval
        
    if input_yang_obj.hold_interval._changed():
        input_yang_obj.hold_interval = input_yang_obj.hold_interval
        
    if input_yang_obj.conserv_flag._changed():
        input_yang_obj.conserv_flag = input_yang_obj.conserv_flag
        
    if input_yang_obj.millisecond._changed():
        input_yang_obj.millisecond = input_yang_obj.millisecond
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer(input_yang_obj: yc_timer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arrival(input_yang_obj.lsa_arrival, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arr_supp_flap(input_yang_obj.lsa_arr_supp_flap, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_originate(input_yang_obj.lsa_originate, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_org_supp_flap(input_yang_obj.lsa_org_supp_flap, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_spf_schedule(input_yang_obj.spf_schedule, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bfd(input_yang_obj: yc_bfd_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bfd, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bfd

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.min_rx._changed():
        input_yang_obj.min_rx = input_yang_obj.min_rx
        
    if input_yang_obj.min_tx._changed():
        input_yang_obj.min_tx = input_yang_obj.min_tx
        
    if input_yang_obj.detect_multiplier._changed():
        input_yang_obj.detect_multiplier = input_yang_obj.detect_multiplier
        
    if input_yang_obj.incr_cost._changed():
        input_yang_obj.incr_cost = input_yang_obj.incr_cost
        
    if input_yang_obj.frr_binding._changed():
        input_yang_obj.frr_binding = input_yang_obj.frr_binding
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_metric_delay(input_yang_obj: yc_metric_delay_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_metric_delay, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/metric-delay

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.adv_enable._changed():
        input_yang_obj.adv_enable = input_yang_obj.adv_enable
        
    if input_yang_obj.suppress_timer._changed():
        input_yang_obj.suppress_timer = input_yang_obj.suppress_timer
        
    if input_yang_obj.suppress_percent._changed():
        input_yang_obj.suppress_percent = input_yang_obj.suppress_percent
        
    if input_yang_obj.suppress_absolute._changed():
        input_yang_obj.suppress_absolute = input_yang_obj.suppress_absolute
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bier(input_yang_obj: yc_bier_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bier, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_stub_router(input_yang_obj: yc_stub_router_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_stub_router, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/stub-router

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.flag._changed():
        input_yang_obj.flag = input_yang_obj.flag
        
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.include_stub._changed():
        input_yang_obj.include_stub = input_yang_obj.include_stub
        
    if input_yang_obj.external_lsa._changed():
        input_yang_obj.external_lsa = input_yang_obj.external_lsa
        
    if input_yang_obj.external_cost._changed():
        input_yang_obj.external_cost = input_yang_obj.external_cost
        
    if input_yang_obj.summary_lsa._changed():
        input_yang_obj.summary_lsa = input_yang_obj.summary_lsa
        
    if input_yang_obj.summary_cost._changed():
        input_yang_obj.summary_cost = input_yang_obj.summary_cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bgp_ls(input_yang_obj: yc_bgp_ls_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bgp_ls, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bgp-ls

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.identifier._changed():
        input_yang_obj.identifier = input_yang_obj.identifier
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_import_limit(input_yang_obj: yc_import_limit_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_import_limit, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/import-limit

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.max_number._changed():
        input_yang_obj.max_number = input_yang_obj.max_number
        
    if input_yang_obj.threshold_upper._changed():
        input_yang_obj.threshold_upper = input_yang_obj.threshold_upper
        
    if input_yang_obj.threshold_lower._changed():
        input_yang_obj.threshold_lower = input_yang_obj.threshold_lower
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_spf_control(input_yang_obj: yc_spf_control_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_spf_control, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/spf-control

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.max_load_balancing._changed():
        input_yang_obj.max_load_balancing = input_yang_obj.max_load_balancing
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_default_para(input_yang_obj: yc_default_para_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_default_para, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/default-para

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost_value._changed():
        input_yang_obj.cost_value = input_yang_obj.cost_value
        
    if input_yang_obj.cost_inherit_metric._changed():
        input_yang_obj.cost_inherit_metric = input_yang_obj.cost_inherit_metric
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_avoid_micro_loop(input_yang_obj: yc_avoid_micro_loop_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_avoid_micro_loop, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/avoid-micro-loop

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.frr_enable._changed():
        input_yang_obj.frr_enable = input_yang_obj.frr_enable
        
    if input_yang_obj.frr_rib_update_delay._changed():
        input_yang_obj.frr_rib_update_delay = input_yang_obj.frr_rib_update_delay
        
    if input_yang_obj.te_tunnel_enable._changed():
        input_yang_obj.te_tunnel_enable = input_yang_obj.te_tunnel_enable
        
    if input_yang_obj.te_tunnel_rib_update_delay._changed():
        input_yang_obj.te_tunnel_rib_update_delay = input_yang_obj.te_tunnel_rib_update_delay
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs_asbr_summary_prefix(input_yang_obj: yc_asbr_summary_prefix_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs_asbr_summary_prefix, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/asbr-summary-prefixs/asbr-summary-prefix

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.distribute_delay._changed():
        input_yang_obj.distribute_delay = input_yang_obj.distribute_delay
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.advertise._changed():
        input_yang_obj.advertise = input_yang_obj.advertise
        
    if input_yang_obj.generate_null_zero._changed():
        input_yang_obj.generate_null_zero = input_yang_obj.generate_null_zero
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs(input_yang_obj: yc_asbr_summary_prefixs_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/asbr-summary-prefixs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.asbr_summary_prefix.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs_asbr_summary_prefix(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_summary(input_yang_obj: yc_summary_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_summary, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/summary

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_no_summary(input_yang_obj: yc_no_summary_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_no_summary, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/no-summary

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    if input_yang_obj.distribute_delay._changed():
        input_yang_obj.distribute_delay = input_yang_obj.distribute_delay
        
    if input_yang_obj.permit_calculate_other._changed():
        input_yang_obj.permit_calculate_other = input_yang_obj.permit_calculate_other
        
    if input_yang_obj.permit_ibgp._changed():
        input_yang_obj.permit_ibgp = input_yang_obj.permit_ibgp
        
    if input_yang_obj.always._changed():
        input_yang_obj.always = input_yang_obj.always
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_route_preferences_route_preference(input_yang_obj: yc_route_preference_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_route_preferences_route_preference, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/route-preferences/route-preference

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.preference._changed():
        input_yang_obj.preference = input_yang_obj.preference
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_route_preferences(input_yang_obj: yc_route_preferences_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_route_preferences, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/route-preferences

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_preference.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_route_preferences_route_preference(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights_nexthop_weight(input_yang_obj: yc_nexthop_weight_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights_nexthop_weight, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/nexthop-weights/nexthop-weight

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.weight._changed():
        input_yang_obj.weight = input_yang_obj.weight
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights(input_yang_obj: yc_nexthop_weights_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/nexthop-weights

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.nexthop_weight.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights_nexthop_weight(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys_prefix_priority(input_yang_obj: yc_prefix_priority_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys_prefix_priority, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/prefix-prioritys/prefix-priority

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys(input_yang_obj: yc_prefix_prioritys_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/prefix-prioritys

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.prefix_priority.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys_prefix_priority(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_ecmp_prefer(input_yang_obj: yc_ecmp_prefer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_ecmp_prefer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/ecmp-prefer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.te_tunnel._changed():
        input_yang_obj.te_tunnel = input_yang_obj.te_tunnel
        
    if input_yang_obj.intact._changed():
        input_yang_obj.intact = input_yang_obj.intact
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr_tiebreaker(input_yang_obj: yc_tiebreaker_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr_tiebreaker, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr/tiebreaker

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.node_protect._changed():
        input_yang_obj.node_protect = input_yang_obj.node_protect
        
    if input_yang_obj.lowest_cost._changed():
        input_yang_obj.lowest_cost = input_yang_obj.lowest_cost
        
    if input_yang_obj.ldp_sync._changed():
        input_yang_obj.ldp_sync = input_yang_obj.ldp_sync
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr_route_policy(input_yang_obj: yc_route_policy_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr_route_policy, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr/route-policy

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr_rlfa_tunnel(input_yang_obj: yc_rlfa_tunnel_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr_rlfa_tunnel, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr/rlfa-tunnel

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.ip_prefix_name._changed():
        input_yang_obj.ip_prefix_name = input_yang_obj.ip_prefix_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr(input_yang_obj: yc_frr_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.lfa_enable._changed():
        input_yang_obj.lfa_enable = input_yang_obj.lfa_enable
        
    if input_yang_obj.rlfa_enable._changed():
        input_yang_obj.rlfa_enable = input_yang_obj.rlfa_enable
        
    if input_yang_obj.rlfa_max_cost._changed():
        input_yang_obj.rlfa_max_cost = input_yang_obj.rlfa_max_cost
        
    if input_yang_obj.tilfa_enable._changed():
        input_yang_obj.tilfa_enable = input_yang_obj.tilfa_enable
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_frr_tiebreaker(input_yang_obj.tiebreaker, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_frr_route_policy(input_yang_obj.route_policy, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_frr_rlfa_tunnel(input_yang_obj.rlfa_tunnel, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_local_mt_filter(input_yang_obj: yc_local_mt_filter_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_local_mt_filter, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/local-mt-filter

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.acl_name_or_num._changed():
        input_yang_obj.acl_name_or_num = input_yang_obj.acl_name_or_num
        
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_peers_peer(input_yang_obj: yc_peer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_peers_peer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/peers/peer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.priority._changed():
        input_yang_obj.priority = input_yang_obj.priority
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_peers(input_yang_obj: yc_peers_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_peers, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/peers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.peer.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_peers_peer(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs_filter_lsa_out(input_yang_obj: yc_filter_lsa_out_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs_filter_lsa_out, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/filter-lsa-outs/filter-lsa-out

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs(input_yang_obj: yc_filter_lsa_outs_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/filter-lsa-outs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.filter_lsa_out.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs_filter_lsa_out(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_gr_ietf(input_yang_obj: yc_gr_ietf_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_gr_ietf, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/gr-ietf

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.never._changed():
        input_yang_obj.never = input_yang_obj.never
        
    if input_yang_obj.planned_only._changed():
        input_yang_obj.planned_only = input_yang_obj.planned_only
        
    if input_yang_obj.ignore_external_lsa._changed():
        input_yang_obj.ignore_external_lsa = input_yang_obj.ignore_external_lsa
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_flood_control(input_yang_obj: yc_flood_control_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_flood_control, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/flood-control

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.number._changed():
        input_yang_obj.number = input_yang_obj.number
        
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids_summary_router_id(input_yang_obj: yc_summary_router_id_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids_summary_router_id, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/dn-bit/summary-router-ids/summary-router-id

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids(input_yang_obj: yc_summary_router_ids_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/dn-bit/summary-router-ids

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.summary_router_id.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids_summary_router_id(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_dn_bit(input_yang_obj: yc_dn_bit_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_dn_bit, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/dn-bit

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.set_ase._changed():
        input_yang_obj.set_ase = input_yang_obj.set_ase
        
    if input_yang_obj.set_nssa._changed():
        input_yang_obj.set_nssa = input_yang_obj.set_nssa
        
    if input_yang_obj.set_summary._changed():
        input_yang_obj.set_summary = input_yang_obj.set_summary
        
    if input_yang_obj.check_ase._changed():
        input_yang_obj.check_ase = input_yang_obj.check_ase
        
    if input_yang_obj.check_nssa._changed():
        input_yang_obj.check_nssa = input_yang_obj.check_nssa
        
    if input_yang_obj.check_summary._changed():
        input_yang_obj.check_summary = input_yang_obj.check_summary
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids(input_yang_obj.summary_router_ids, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_filter_import(input_yang_obj: yc_filter_import_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_filter_import, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/filter-import

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.name_or_num._changed():
        input_yang_obj.name_or_num = input_yang_obj.name_or_num
        
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    if input_yang_obj.route_policy._changed():
        input_yang_obj.route_policy = input_yang_obj.route_policy
        
    if input_yang_obj.route_filter._changed():
        input_yang_obj.route_filter = input_yang_obj.route_filter
        
    if input_yang_obj.secondary._changed():
        input_yang_obj.secondary = input_yang_obj.secondary
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_filter_exports_filter_export(input_yang_obj: yc_filter_export_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_filter_exports_filter_export, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/filter-exports/filter-export

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.name_or_num._changed():
        input_yang_obj.name_or_num = input_yang_obj.name_or_num
        
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    if input_yang_obj.route_policy._changed():
        input_yang_obj.route_policy = input_yang_obj.route_policy
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_filter_exports(input_yang_obj: yc_filter_exports_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_filter_exports, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/filter-exports

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.filter_export.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_filter_exports_filter_export(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_import_routes_import_route(input_yang_obj: yc_import_route_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_import_routes_import_route, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/import-routes/import-route

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    if input_yang_obj.permit_ibgp._changed():
        input_yang_obj.permit_ibgp = input_yang_obj.permit_ibgp
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_import_routes(input_yang_obj: yc_import_routes_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_import_routes, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/import-routes

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.import_route.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_import_routes_import_route(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_silent_interfaces_silent_interface(input_yang_obj: yc_silent_interface_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_silent_interfaces_silent_interface, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/silent-interfaces/silent-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_silent_interfaces(input_yang_obj: yc_silent_interfaces_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_silent_interfaces, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/silent-interfaces

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.silent_interface.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_silent_interfaces_silent_interface(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_undo_silent_interfaces_undo_silent_interface(input_yang_obj: yc_undo_silent_interface_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_undo_silent_interfaces_undo_silent_interface, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/undo-silent-interfaces/undo-silent-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_undo_silent_interfaces(input_yang_obj: yc_undo_silent_interfaces_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_undo_silent_interfaces, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/undo-silent-interfaces

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.undo_silent_interface.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_undo_silent_interfaces_undo_silent_interface(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_cost_bindings_cost_binding(input_yang_obj: yc_cost_binding_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_cost_bindings_cost_binding, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/cost-bindings/cost-binding

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_cost_bindings(input_yang_obj: yc_cost_bindings_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_cost_bindings, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/cost-bindings

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.cost_binding.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_cost_bindings_cost_binding(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_networks_network(input_yang_obj: yc_network_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_networks_network, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/networks/network

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.description._changed():
        input_yang_obj.description = input_yang_obj.description
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_networks(input_yang_obj: yc_networks_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_networks, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/networks

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.network.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_networks_network(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_stub(input_yang_obj: yc_stub_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_stub, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/stub

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.backbone_peer_ignore._changed():
        input_yang_obj.backbone_peer_ignore = input_yang_obj.backbone_peer_ignore
        
    if input_yang_obj.no_summary._changed():
        input_yang_obj.no_summary = input_yang_obj.no_summary
        
    if input_yang_obj.default_cost._changed():
        input_yang_obj.default_cost = input_yang_obj.default_cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_nssa(input_yang_obj: yc_nssa_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_nssa, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/nssa

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.no_summary._changed():
        input_yang_obj.no_summary = input_yang_obj.no_summary
        
    if input_yang_obj.translator_always._changed():
        input_yang_obj.translator_always = input_yang_obj.translator_always
        
    if input_yang_obj.default_route_advertise._changed():
        input_yang_obj.default_route_advertise = input_yang_obj.default_route_advertise
        
    if input_yang_obj.backbone_peer_ignore._changed():
        input_yang_obj.backbone_peer_ignore = input_yang_obj.backbone_peer_ignore
        
    if input_yang_obj.no_import_route._changed():
        input_yang_obj.no_import_route = input_yang_obj.no_import_route
        
    if input_yang_obj.set_n_bit._changed():
        input_yang_obj.set_n_bit = input_yang_obj.set_n_bit
        
    if input_yang_obj.suppress_fa._changed():
        input_yang_obj.suppress_fa = input_yang_obj.suppress_fa
        
    if input_yang_obj.zero_address_forwarding._changed():
        input_yang_obj.zero_address_forwarding = input_yang_obj.zero_address_forwarding
        
    if input_yang_obj.translator_interval._changed():
        input_yang_obj.translator_interval = input_yang_obj.translator_interval
        
    if input_yang_obj.default_cost._changed():
        input_yang_obj.default_cost = input_yang_obj.default_cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_ldp_sync(input_yang_obj: yc_ldp_sync_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_ldp_sync, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/ldp-sync

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.timer._changed():
        input_yang_obj.timer = input_yang_obj.timer
        
    if input_yang_obj.infinite._changed():
        input_yang_obj.infinite = input_yang_obj.infinite
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_mpls_te(input_yang_obj: yc_mpls_te_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_mpls_te, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/mpls-te

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.standard_complying._changed():
        input_yang_obj.standard_complying = input_yang_obj.standard_complying
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_authentication(input_yang_obj: yc_authentication_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_authentication, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/authentication

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    if input_yang_obj.auth_text_simple._changed():
        input_yang_obj.auth_text_simple = input_yang_obj.auth_text_simple
        
    if input_yang_obj.key_id._changed():
        input_yang_obj.key_id = input_yang_obj.key_id
        
    if input_yang_obj.auth_text_md5._changed():
        input_yang_obj.auth_text_md5 = input_yang_obj.auth_text_md5
        
    if input_yang_obj.key_chain_name._changed():
        input_yang_obj.key_chain_name = input_yang_obj.key_chain_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_abr_summary_prefixs_abr_summary_prefix(input_yang_obj: yc_abr_summary_prefix_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_abr_summary_prefixs_abr_summary_prefix, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/abr-summary-prefixs/abr-summary-prefix

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost_value._changed():
        input_yang_obj.cost_value = input_yang_obj.cost_value
        
    if input_yang_obj.cost_inherit_min._changed():
        input_yang_obj.cost_inherit_min = input_yang_obj.cost_inherit_min
        
    if input_yang_obj.hold_max_cost._changed():
        input_yang_obj.hold_max_cost = input_yang_obj.hold_max_cost
        
    if input_yang_obj.advertise._changed():
        input_yang_obj.advertise = input_yang_obj.advertise
        
    if input_yang_obj.generate_null_zero._changed():
        input_yang_obj.generate_null_zero = input_yang_obj.generate_null_zero
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_abr_summary_prefixs(input_yang_obj: yc_abr_summary_prefixs_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_abr_summary_prefixs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/abr-summary-prefixs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.abr_summary_prefix.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_abr_summary_prefixs_abr_summary_prefix(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_timer(input_yang_obj: yc_timer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_timer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/vlink-peers/vlink-peer/timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hello_interval._changed():
        input_yang_obj.hello_interval = input_yang_obj.hello_interval
        
    if input_yang_obj.dead_interval._changed():
        input_yang_obj.dead_interval = input_yang_obj.dead_interval
        
    if input_yang_obj.trans_delay_interval._changed():
        input_yang_obj.trans_delay_interval = input_yang_obj.trans_delay_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_authentication(input_yang_obj: yc_authentication_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_authentication, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/vlink-peers/vlink-peer/authentication

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    if input_yang_obj.auth_text_simple._changed():
        input_yang_obj.auth_text_simple = input_yang_obj.auth_text_simple
        
    if input_yang_obj.key_id._changed():
        input_yang_obj.key_id = input_yang_obj.key_id
        
    if input_yang_obj.auth_text_md5._changed():
        input_yang_obj.auth_text_md5 = input_yang_obj.auth_text_md5
        
    if input_yang_obj.key_chain_name._changed():
        input_yang_obj.key_chain_name = input_yang_obj.key_chain_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer(input_yang_obj: yc_vlink_peer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/vlink-peers/vlink-peer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.retransmit_interval._changed():
        input_yang_obj.retransmit_interval = input_yang_obj.retransmit_interval
        
    if input_yang_obj.smart_discover._changed():
        input_yang_obj.smart_discover = input_yang_obj.smart_discover
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_timer(input_yang_obj.timer, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_authentication(input_yang_obj.authentication, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers(input_yang_obj: yc_vlink_peers_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/vlink-peers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vlink_peer.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_timer(input_yang_obj: yc_timer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_timer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/sham-links/sham-link/timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hello_interval._changed():
        input_yang_obj.hello_interval = input_yang_obj.hello_interval
        
    if input_yang_obj.dead_interval._changed():
        input_yang_obj.dead_interval = input_yang_obj.dead_interval
        
    if input_yang_obj.trans_delay_interval._changed():
        input_yang_obj.trans_delay_interval = input_yang_obj.trans_delay_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_authentication(input_yang_obj: yc_authentication_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_authentication, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/sham-links/sham-link/authentication

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    if input_yang_obj.auth_text_simple._changed():
        input_yang_obj.auth_text_simple = input_yang_obj.auth_text_simple
        
    if input_yang_obj.key_id._changed():
        input_yang_obj.key_id = input_yang_obj.key_id
        
    if input_yang_obj.auth_text_md5._changed():
        input_yang_obj.auth_text_md5 = input_yang_obj.auth_text_md5
        
    if input_yang_obj.key_chain_name._changed():
        input_yang_obj.key_chain_name = input_yang_obj.key_chain_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link(input_yang_obj: yc_sham_link_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/sham-links/sham-link

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.retransmit_interval._changed():
        input_yang_obj.retransmit_interval = input_yang_obj.retransmit_interval
        
    if input_yang_obj.smart_discover._changed():
        input_yang_obj.smart_discover = input_yang_obj.smart_discover
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_timer(input_yang_obj.timer, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_authentication(input_yang_obj.authentication, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links(input_yang_obj: yc_sham_links_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/sham-links

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.sham_link.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_filters_filter(input_yang_obj: yc_filter_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_filters_filter, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/filters/filter

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.name_or_num._changed():
        input_yang_obj.name_or_num = input_yang_obj.name_or_num
        
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    if input_yang_obj.route_policy._changed():
        input_yang_obj.route_policy = input_yang_obj.route_policy
        
    if input_yang_obj.route_filter._changed():
        input_yang_obj.route_filter = input_yang_obj.route_filter
        
    if input_yang_obj.include_abr_summary._changed():
        input_yang_obj.include_abr_summary = input_yang_obj.include_abr_summary
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_filters(input_yang_obj: yc_filters_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_filters, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/filters

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.filter.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_filters_filter(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_frr_ti_lfa(input_yang_obj: yc_ti_lfa_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_frr_ti_lfa, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/frr/ti-lfa

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.disable._changed():
        input_yang_obj.disable = input_yang_obj.disable
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_frr(input_yang_obj: yc_frr_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_frr, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/frr

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.frr_disable._changed():
        input_yang_obj.frr_disable = input_yang_obj.frr_disable
        
    if input_yang_obj.rlfa_disable._changed():
        input_yang_obj.rlfa_disable = input_yang_obj.rlfa_disable
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_frr_ti_lfa(input_yang_obj.ti_lfa, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_timer(input_yang_obj: yc_timer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_timer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hello_interval._changed():
        input_yang_obj.hello_interval = input_yang_obj.hello_interval
        
    if input_yang_obj.hello_conser._changed():
        input_yang_obj.hello_conser = input_yang_obj.hello_conser
        
    if input_yang_obj.dead_interval._changed():
        input_yang_obj.dead_interval = input_yang_obj.dead_interval
        
    if input_yang_obj.wait_interval._changed():
        input_yang_obj.wait_interval = input_yang_obj.wait_interval
        
    if input_yang_obj.poll_interval._changed():
        input_yang_obj.poll_interval = input_yang_obj.poll_interval
        
    if input_yang_obj.retransmit_interval._changed():
        input_yang_obj.retransmit_interval = input_yang_obj.retransmit_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_ldp_sync(input_yang_obj: yc_ldp_sync_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_ldp_sync, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/ldp-sync

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hold_down_timer._changed():
        input_yang_obj.hold_down_timer = input_yang_obj.hold_down_timer
        
    if input_yang_obj.timer._changed():
        input_yang_obj.timer = input_yang_obj.timer
        
    if input_yang_obj.infinite._changed():
        input_yang_obj.infinite = input_yang_obj.infinite
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_bfd(input_yang_obj: yc_bfd_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_bfd, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/bfd

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.block._changed():
        input_yang_obj.block = input_yang_obj.block
        
    if input_yang_obj.detect_multiplier._changed():
        input_yang_obj.detect_multiplier = input_yang_obj.detect_multiplier
        
    if input_yang_obj.min_tx._changed():
        input_yang_obj.min_tx = input_yang_obj.min_tx
        
    if input_yang_obj.min_rx._changed():
        input_yang_obj.min_rx = input_yang_obj.min_rx
        
    if input_yang_obj.frr_binding._changed():
        input_yang_obj.frr_binding = input_yang_obj.frr_binding
        
    if input_yang_obj.incr_cost_block._changed():
        input_yang_obj.incr_cost_block = input_yang_obj.incr_cost_block
        
    if input_yang_obj.incr_cost_value._changed():
        input_yang_obj.incr_cost_value = input_yang_obj.incr_cost_value
        
    if input_yang_obj.per_link_flag._changed():
        input_yang_obj.per_link_flag = input_yang_obj.per_link_flag
        
    if input_yang_obj.one_arm_echo_flag._changed():
        input_yang_obj.one_arm_echo_flag = input_yang_obj.one_arm_echo_flag
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_authentication(input_yang_obj: yc_authentication_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_authentication, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/authentication

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    if input_yang_obj.auth_text_simple._changed():
        input_yang_obj.auth_text_simple = input_yang_obj.auth_text_simple
        
    if input_yang_obj.key_id._changed():
        input_yang_obj.key_id = input_yang_obj.key_id
        
    if input_yang_obj.auth_text_md5._changed():
        input_yang_obj.auth_text_md5 = input_yang_obj.auth_text_md5
        
    if input_yang_obj.key_chain_name._changed():
        input_yang_obj.key_chain_name = input_yang_obj.key_chain_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_filter_lsa_out(input_yang_obj: yc_filter_lsa_out_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_filter_lsa_out, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/filter-lsa-out

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.all_flag._changed():
        input_yang_obj.all_flag = input_yang_obj.all_flag
        
    if input_yang_obj.sum_flag._changed():
        input_yang_obj.sum_flag = input_yang_obj.sum_flag
        
    if input_yang_obj.ase_flag._changed():
        input_yang_obj.ase_flag = input_yang_obj.ase_flag
        
    if input_yang_obj.nssa_flag._changed():
        input_yang_obj.nssa_flag = input_yang_obj.nssa_flag
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_suppress_flapping_peer(input_yang_obj: yc_peer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_suppress_flapping_peer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/suppress-flapping/peer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.detect_interval._changed():
        input_yang_obj.detect_interval = input_yang_obj.detect_interval
        
    if input_yang_obj.threshold._changed():
        input_yang_obj.threshold = input_yang_obj.threshold
        
    if input_yang_obj.resume_interval._changed():
        input_yang_obj.resume_interval = input_yang_obj.resume_interval
        
    if input_yang_obj.hold_down_interval._changed():
        input_yang_obj.hold_down_interval = input_yang_obj.hold_down_interval
        
    if input_yang_obj.hold_max_cost._changed():
        input_yang_obj.hold_max_cost = input_yang_obj.hold_max_cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_suppress_flapping(input_yang_obj: yc_suppress_flapping_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_suppress_flapping, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/suppress-flapping

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_suppress_flapping_peer(input_yang_obj.peer, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_flush_source_trace(input_yang_obj: yc_flush_source_trace_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_flush_source_trace, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/flush-source-trace

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.block._changed():
        input_yang_obj.block = input_yang_obj.block
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_mpls_te_peers_mpls_te_peer_procs_proc(input_yang_obj: yc_proc_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_mpls_te_peers_mpls_te_peer_procs_proc, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/mpls-te-peers/mpls-te-peer/procs/proc

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_mpls_te_peers_mpls_te_peer_procs(input_yang_obj: yc_procs_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_mpls_te_peers_mpls_te_peer_procs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/mpls-te-peers/mpls-te-peer/procs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.proc.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_mpls_te_peers_mpls_te_peer_procs_proc(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_mpls_te_peers_mpls_te_peer(input_yang_obj: yc_mpls_te_peer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_mpls_te_peers_mpls_te_peer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/mpls-te-peers/mpls-te-peer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_mpls_te_peers_mpls_te_peer_procs(input_yang_obj.procs, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_mpls_te_peers(input_yang_obj: yc_mpls_te_peers_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_mpls_te_peers, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/mpls-te-peers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.mpls_te_peer.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_mpls_te_peers_mpls_te_peer(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_frr(input_yang_obj: yc_frr_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_frr, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/multi-areas/multi-area/frr

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.frr_disable._changed():
        input_yang_obj.frr_disable = input_yang_obj.frr_disable
        
    if input_yang_obj.rlfa_disable._changed():
        input_yang_obj.rlfa_disable = input_yang_obj.rlfa_disable
        
    if input_yang_obj.ti_lfa_disable._changed():
        input_yang_obj.ti_lfa_disable = input_yang_obj.ti_lfa_disable
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_timer(input_yang_obj: yc_timer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_timer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/multi-areas/multi-area/timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hello_interval._changed():
        input_yang_obj.hello_interval = input_yang_obj.hello_interval
        
    if input_yang_obj.dead_interval._changed():
        input_yang_obj.dead_interval = input_yang_obj.dead_interval
        
    if input_yang_obj.retransmit_interval._changed():
        input_yang_obj.retransmit_interval = input_yang_obj.retransmit_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_ldp_sync(input_yang_obj: yc_ldp_sync_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_ldp_sync, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/multi-areas/multi-area/ldp-sync

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hold_down_timer._changed():
        input_yang_obj.hold_down_timer = input_yang_obj.hold_down_timer
        
    if input_yang_obj.timer._changed():
        input_yang_obj.timer = input_yang_obj.timer
        
    if input_yang_obj.infinite._changed():
        input_yang_obj.infinite = input_yang_obj.infinite
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_bfd(input_yang_obj: yc_bfd_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_bfd, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/multi-areas/multi-area/bfd

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.block._changed():
        input_yang_obj.block = input_yang_obj.block
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_authentication(input_yang_obj: yc_authentication_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_authentication, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/multi-areas/multi-area/authentication

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    if input_yang_obj.auth_text_simple._changed():
        input_yang_obj.auth_text_simple = input_yang_obj.auth_text_simple
        
    if input_yang_obj.key_id._changed():
        input_yang_obj.key_id = input_yang_obj.key_id
        
    if input_yang_obj.auth_text_md5._changed():
        input_yang_obj.auth_text_md5 = input_yang_obj.auth_text_md5
        
    if input_yang_obj.key_chain_name._changed():
        input_yang_obj.key_chain_name = input_yang_obj.key_chain_name
        
    return translated_yang_obj

def _translate__network_instance_global(input_yang_obj: yc_global__huawei_network_instance__network_instance_global, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/global

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cfg_router_id._changed():
        input_yang_obj.cfg_router_id = input_yang_obj.cfg_router_id
        
    if input_yang_obj.as_notation_plain._changed():
        input_yang_obj.as_notation_plain = input_yang_obj.as_notation_plain
        
    if input_yang_obj.route_distinguisher_auto_ip._changed():
        input_yang_obj.route_distinguisher_auto_ip = input_yang_obj.route_distinguisher_auto_ip
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_parameter(input_yang_obj: yc_parameter_huawei_network_instance__network_instance_instances_instance_parameter, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/parameter

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.identifier._changed():
        input_yang_obj.identifier = input_yang_obj.identifier
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_vpn_targets_vpn_target(input_yang_obj: yc_vpn_target_huawei_network_instance__network_instance_instances_instance_afs_af_vpn_targets_vpn_target, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_vpn_targets(input_yang_obj: yc_vpn_targets_huawei_network_instance__network_instance_instances_instance_afs_af_vpn_targets, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_state(input_yang_obj: yc_state_huawei_network_instance__network_instance_instances_instance_afs_af_state, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/state

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.create_time._changed():
        input_yang_obj.create_time = input_yang_obj.create_time
        
    if input_yang_obj.up_time._changed():
        input_yang_obj.up_time = input_yang_obj.up_time
        
    if input_yang_obj.label._changed():
        input_yang_obj.label = input_yang_obj.label
        
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_tunnel_infos_tunnel_info(input_yang_obj: yc_tunnel_info_huawei_network_instance__network_instance_instances_instance_afs_af_tunnel_infos_tunnel_info, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/tunnel-infos/tunnel-info

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.color._changed():
        input_yang_obj.color = input_yang_obj.color
        
    if input_yang_obj.name._changed():
        input_yang_obj.name = input_yang_obj.name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_tunnel_infos(input_yang_obj: yc_tunnel_infos_huawei_network_instance__network_instance_instances_instance_afs_af_tunnel_infos, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/tunnel-infos

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.tunnel_info.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af_tunnel_infos_tunnel_info(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_ospf_import_rts_ospf_import_rt(input_yang_obj: yc_ospf_import_rt_huawei_network_instance__network_instance_instances_instance_afs_af_ospf_import_rts_ospf_import_rt, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/ospf-import-rts/ospf-import-rt

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.valid_route._changed():
        input_yang_obj.valid_route = input_yang_obj.valid_route
        
    if input_yang_obj.route_policy._changed():
        input_yang_obj.route_policy = input_yang_obj.route_policy
        
    if input_yang_obj.route_filter._changed():
        input_yang_obj.route_filter = input_yang_obj.route_filter
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_ospf_import_rts(input_yang_obj: yc_ospf_import_rts_huawei_network_instance__network_instance_instances_instance_afs_af_ospf_import_rts, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/ospf-import-rts

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ospf_import_rt.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af_ospf_import_rts_ospf_import_rt(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af(input_yang_obj: yc_af_huawei_network_instance__network_instance_instances_instance_afs_af, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.route_distinguisher._changed():
        input_yang_obj.route_distinguisher = input_yang_obj.route_distinguisher
        
    if input_yang_obj.effect_route_distinguisher._changed():
        input_yang_obj.effect_route_distinguisher = input_yang_obj.effect_route_distinguisher
        
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    if input_yang_obj.export_policy_add_ert_first._changed():
        input_yang_obj.export_policy_add_ert_first = input_yang_obj.export_policy_add_ert_first
        
    if input_yang_obj.label_mode._changed():
        input_yang_obj.label_mode = input_yang_obj.label_mode
        
    if input_yang_obj.vpn_frr._changed():
        input_yang_obj.vpn_frr = input_yang_obj.vpn_frr
        
    if input_yang_obj.tunnel_policy._changed():
        input_yang_obj.tunnel_policy = input_yang_obj.tunnel_policy
        
    if input_yang_obj.transit_vpn._changed():
        input_yang_obj.transit_vpn = input_yang_obj.transit_vpn
        
    if input_yang_obj.lsp_operation._changed():
        input_yang_obj.lsp_operation = input_yang_obj.lsp_operation
        
    if input_yang_obj.default_color._changed():
        input_yang_obj.default_color = input_yang_obj.default_color
        
    innerobj = _translate__network_instance_instances_instance_afs_af_vpn_targets(input_yang_obj.vpn_targets, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_afs_af_state(input_yang_obj.state, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_afs_af_tunnel_infos(input_yang_obj.tunnel_infos, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_afs_af_ospf_import_rts(input_yang_obj.ospf_import_rts, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs(input_yang_obj: yc_afs_huawei_network_instance__network_instance_instances_instance_afs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.af.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_gtsm(input_yang_obj: yc_gtsm_huawei_network_instance__network_instance_instances_instance_ospfv2_gtsm, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/gtsm

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hops._changed():
        input_yang_obj.hops = input_yang_obj.hops
        
    if input_yang_obj.nonstandard_multicast._changed():
        input_yang_obj.nonstandard_multicast = input_yang_obj.nonstandard_multicast
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id(input_yang_obj: yc_domain_id_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net/domain-id

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.domain_id._changed():
        input_yang_obj.domain_id = input_yang_obj.domain_id
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    if input_yang_obj.value._changed():
        input_yang_obj.value = input_yang_obj.value
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys_domain_id_secondary(input_yang_obj: yc_domain_id_secondary_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys_domain_id_secondary, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net/domain-id-secondarys/domain-id-secondary

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys(input_yang_obj: yc_domain_id_secondarys_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net/domain-id-secondarys

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.domain_id_secondary.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys_domain_id_secondary(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net(input_yang_obj: yc_private_net_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.eca_route._changed():
        input_yang_obj.eca_route = input_yang_obj.eca_route
        
    if input_yang_obj.disable._changed():
        input_yang_obj.disable = input_yang_obj.disable
        
    if input_yang_obj.value._changed():
        input_yang_obj.value = input_yang_obj.value
        
    if input_yang_obj.vpn_capability._changed():
        input_yang_obj.vpn_capability = input_yang_obj.vpn_capability
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id(input_yang_obj.domain_id, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys(input_yang_obj.domain_id_secondarys, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_host_name(input_yang_obj: yc_host_name_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_host_name, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/host-name

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.value._changed():
        input_yang_obj.value = input_yang_obj.value
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bandwidth(input_yang_obj: yc_bandwidth_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bandwidth, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bandwidth

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.config_bw_enable._changed():
        input_yang_obj.config_bw_enable = input_yang_obj.config_bw_enable
        
    if input_yang_obj.reference_value._changed():
        input_yang_obj.reference_value = input_yang_obj.reference_value
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arrival(input_yang_obj: yc_lsa_arrival_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arrival, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-arrival

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.max_interval._changed():
        input_yang_obj.max_interval = input_yang_obj.max_interval
        
    if input_yang_obj.start_interval._changed():
        input_yang_obj.start_interval = input_yang_obj.start_interval
        
    if input_yang_obj.hold_interval._changed():
        input_yang_obj.hold_interval = input_yang_obj.hold_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arr_supp_flap(input_yang_obj: yc_lsa_arr_supp_flap_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arr_supp_flap, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-arr-supp-flap

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.threshold_count._changed():
        input_yang_obj.threshold_count = input_yang_obj.threshold_count
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_originate(input_yang_obj: yc_lsa_originate_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_originate, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-originate

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.other_type_interval._changed():
        input_yang_obj.other_type_interval = input_yang_obj.other_type_interval
        
    if input_yang_obj.max_interval._changed():
        input_yang_obj.max_interval = input_yang_obj.max_interval
        
    if input_yang_obj.start_interval._changed():
        input_yang_obj.start_interval = input_yang_obj.start_interval
        
    if input_yang_obj.hold_interval._changed():
        input_yang_obj.hold_interval = input_yang_obj.hold_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_org_supp_flap(input_yang_obj: yc_lsa_org_supp_flap_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_org_supp_flap, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-org-supp-flap

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.threshold_count._changed():
        input_yang_obj.threshold_count = input_yang_obj.threshold_count
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_spf_schedule(input_yang_obj: yc_spf_schedule_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_spf_schedule, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/spf-schedule

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.max_interval._changed():
        input_yang_obj.max_interval = input_yang_obj.max_interval
        
    if input_yang_obj.start_interval._changed():
        input_yang_obj.start_interval = input_yang_obj.start_interval
        
    if input_yang_obj.hold_interval._changed():
        input_yang_obj.hold_interval = input_yang_obj.hold_interval
        
    if input_yang_obj.conserv_flag._changed():
        input_yang_obj.conserv_flag = input_yang_obj.conserv_flag
        
    if input_yang_obj.millisecond._changed():
        input_yang_obj.millisecond = input_yang_obj.millisecond
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer(input_yang_obj: yc_timer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arrival(input_yang_obj.lsa_arrival, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arr_supp_flap(input_yang_obj.lsa_arr_supp_flap, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_originate(input_yang_obj.lsa_originate, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_org_supp_flap(input_yang_obj.lsa_org_supp_flap, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_spf_schedule(input_yang_obj.spf_schedule, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bfd(input_yang_obj: yc_bfd_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bfd, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bfd

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.min_rx._changed():
        input_yang_obj.min_rx = input_yang_obj.min_rx
        
    if input_yang_obj.min_tx._changed():
        input_yang_obj.min_tx = input_yang_obj.min_tx
        
    if input_yang_obj.detect_multiplier._changed():
        input_yang_obj.detect_multiplier = input_yang_obj.detect_multiplier
        
    if input_yang_obj.incr_cost._changed():
        input_yang_obj.incr_cost = input_yang_obj.incr_cost
        
    if input_yang_obj.frr_binding._changed():
        input_yang_obj.frr_binding = input_yang_obj.frr_binding
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_metric_delay(input_yang_obj: yc_metric_delay_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_metric_delay, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/metric-delay

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.adv_enable._changed():
        input_yang_obj.adv_enable = input_yang_obj.adv_enable
        
    if input_yang_obj.suppress_timer._changed():
        input_yang_obj.suppress_timer = input_yang_obj.suppress_timer
        
    if input_yang_obj.suppress_percent._changed():
        input_yang_obj.suppress_percent = input_yang_obj.suppress_percent
        
    if input_yang_obj.suppress_absolute._changed():
        input_yang_obj.suppress_absolute = input_yang_obj.suppress_absolute
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bier(input_yang_obj: yc_bier_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bier, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_stub_router(input_yang_obj: yc_stub_router_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_stub_router, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/stub-router

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.flag._changed():
        input_yang_obj.flag = input_yang_obj.flag
        
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.include_stub._changed():
        input_yang_obj.include_stub = input_yang_obj.include_stub
        
    if input_yang_obj.external_lsa._changed():
        input_yang_obj.external_lsa = input_yang_obj.external_lsa
        
    if input_yang_obj.external_cost._changed():
        input_yang_obj.external_cost = input_yang_obj.external_cost
        
    if input_yang_obj.summary_lsa._changed():
        input_yang_obj.summary_lsa = input_yang_obj.summary_lsa
        
    if input_yang_obj.summary_cost._changed():
        input_yang_obj.summary_cost = input_yang_obj.summary_cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bgp_ls(input_yang_obj: yc_bgp_ls_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bgp_ls, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bgp-ls

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.identifier._changed():
        input_yang_obj.identifier = input_yang_obj.identifier
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_import_limit(input_yang_obj: yc_import_limit_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_import_limit, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/import-limit

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.max_number._changed():
        input_yang_obj.max_number = input_yang_obj.max_number
        
    if input_yang_obj.threshold_upper._changed():
        input_yang_obj.threshold_upper = input_yang_obj.threshold_upper
        
    if input_yang_obj.threshold_lower._changed():
        input_yang_obj.threshold_lower = input_yang_obj.threshold_lower
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_spf_control(input_yang_obj: yc_spf_control_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_spf_control, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/spf-control

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.max_load_balancing._changed():
        input_yang_obj.max_load_balancing = input_yang_obj.max_load_balancing
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_default_para(input_yang_obj: yc_default_para_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_default_para, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/default-para

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost_value._changed():
        input_yang_obj.cost_value = input_yang_obj.cost_value
        
    if input_yang_obj.cost_inherit_metric._changed():
        input_yang_obj.cost_inherit_metric = input_yang_obj.cost_inherit_metric
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_avoid_micro_loop(input_yang_obj: yc_avoid_micro_loop_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_avoid_micro_loop, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/avoid-micro-loop

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.frr_enable._changed():
        input_yang_obj.frr_enable = input_yang_obj.frr_enable
        
    if input_yang_obj.frr_rib_update_delay._changed():
        input_yang_obj.frr_rib_update_delay = input_yang_obj.frr_rib_update_delay
        
    if input_yang_obj.te_tunnel_enable._changed():
        input_yang_obj.te_tunnel_enable = input_yang_obj.te_tunnel_enable
        
    if input_yang_obj.te_tunnel_rib_update_delay._changed():
        input_yang_obj.te_tunnel_rib_update_delay = input_yang_obj.te_tunnel_rib_update_delay
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs_asbr_summary_prefix(input_yang_obj: yc_asbr_summary_prefix_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs_asbr_summary_prefix, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/asbr-summary-prefixs/asbr-summary-prefix

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.distribute_delay._changed():
        input_yang_obj.distribute_delay = input_yang_obj.distribute_delay
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.advertise._changed():
        input_yang_obj.advertise = input_yang_obj.advertise
        
    if input_yang_obj.generate_null_zero._changed():
        input_yang_obj.generate_null_zero = input_yang_obj.generate_null_zero
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs(input_yang_obj: yc_asbr_summary_prefixs_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/asbr-summary-prefixs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.asbr_summary_prefix.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs_asbr_summary_prefix(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_summary(input_yang_obj: yc_summary_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_summary, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/summary

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_no_summary(input_yang_obj: yc_no_summary_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_no_summary, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/no-summary

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    if input_yang_obj.distribute_delay._changed():
        input_yang_obj.distribute_delay = input_yang_obj.distribute_delay
        
    if input_yang_obj.permit_calculate_other._changed():
        input_yang_obj.permit_calculate_other = input_yang_obj.permit_calculate_other
        
    if input_yang_obj.permit_ibgp._changed():
        input_yang_obj.permit_ibgp = input_yang_obj.permit_ibgp
        
    if input_yang_obj.always._changed():
        input_yang_obj.always = input_yang_obj.always
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_route_preferences_route_preference(input_yang_obj: yc_route_preference_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_route_preferences_route_preference, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/route-preferences/route-preference

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.preference._changed():
        input_yang_obj.preference = input_yang_obj.preference
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_route_preferences(input_yang_obj: yc_route_preferences_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_route_preferences, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/route-preferences

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_preference.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_route_preferences_route_preference(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights_nexthop_weight(input_yang_obj: yc_nexthop_weight_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights_nexthop_weight, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/nexthop-weights/nexthop-weight

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.weight._changed():
        input_yang_obj.weight = input_yang_obj.weight
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights(input_yang_obj: yc_nexthop_weights_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/nexthop-weights

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.nexthop_weight.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights_nexthop_weight(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys_prefix_priority(input_yang_obj: yc_prefix_priority_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys_prefix_priority, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/prefix-prioritys/prefix-priority

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys(input_yang_obj: yc_prefix_prioritys_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/prefix-prioritys

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.prefix_priority.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys_prefix_priority(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_ecmp_prefer(input_yang_obj: yc_ecmp_prefer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_ecmp_prefer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/ecmp-prefer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.te_tunnel._changed():
        input_yang_obj.te_tunnel = input_yang_obj.te_tunnel
        
    if input_yang_obj.intact._changed():
        input_yang_obj.intact = input_yang_obj.intact
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr_tiebreaker(input_yang_obj: yc_tiebreaker_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr_tiebreaker, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr/tiebreaker

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.node_protect._changed():
        input_yang_obj.node_protect = input_yang_obj.node_protect
        
    if input_yang_obj.lowest_cost._changed():
        input_yang_obj.lowest_cost = input_yang_obj.lowest_cost
        
    if input_yang_obj.ldp_sync._changed():
        input_yang_obj.ldp_sync = input_yang_obj.ldp_sync
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr_route_policy(input_yang_obj: yc_route_policy_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr_route_policy, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr/route-policy

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr_rlfa_tunnel(input_yang_obj: yc_rlfa_tunnel_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr_rlfa_tunnel, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr/rlfa-tunnel

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.ip_prefix_name._changed():
        input_yang_obj.ip_prefix_name = input_yang_obj.ip_prefix_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr(input_yang_obj: yc_frr_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.lfa_enable._changed():
        input_yang_obj.lfa_enable = input_yang_obj.lfa_enable
        
    if input_yang_obj.rlfa_enable._changed():
        input_yang_obj.rlfa_enable = input_yang_obj.rlfa_enable
        
    if input_yang_obj.rlfa_max_cost._changed():
        input_yang_obj.rlfa_max_cost = input_yang_obj.rlfa_max_cost
        
    if input_yang_obj.tilfa_enable._changed():
        input_yang_obj.tilfa_enable = input_yang_obj.tilfa_enable
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_frr_tiebreaker(input_yang_obj.tiebreaker, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_frr_route_policy(input_yang_obj.route_policy, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_frr_rlfa_tunnel(input_yang_obj.rlfa_tunnel, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_local_mt_filter(input_yang_obj: yc_local_mt_filter_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_local_mt_filter, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/local-mt-filter

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.acl_name_or_num._changed():
        input_yang_obj.acl_name_or_num = input_yang_obj.acl_name_or_num
        
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_peers_peer(input_yang_obj: yc_peer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_peers_peer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/peers/peer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.priority._changed():
        input_yang_obj.priority = input_yang_obj.priority
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_peers(input_yang_obj: yc_peers_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_peers, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/peers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.peer.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_peers_peer(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs_filter_lsa_out(input_yang_obj: yc_filter_lsa_out_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs_filter_lsa_out, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/filter-lsa-outs/filter-lsa-out

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs(input_yang_obj: yc_filter_lsa_outs_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/filter-lsa-outs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.filter_lsa_out.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs_filter_lsa_out(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_gr_ietf(input_yang_obj: yc_gr_ietf_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_gr_ietf, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/gr-ietf

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.never._changed():
        input_yang_obj.never = input_yang_obj.never
        
    if input_yang_obj.planned_only._changed():
        input_yang_obj.planned_only = input_yang_obj.planned_only
        
    if input_yang_obj.ignore_external_lsa._changed():
        input_yang_obj.ignore_external_lsa = input_yang_obj.ignore_external_lsa
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_flood_control(input_yang_obj: yc_flood_control_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_flood_control, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/flood-control

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.number._changed():
        input_yang_obj.number = input_yang_obj.number
        
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids_summary_router_id(input_yang_obj: yc_summary_router_id_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids_summary_router_id, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/dn-bit/summary-router-ids/summary-router-id

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids(input_yang_obj: yc_summary_router_ids_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/dn-bit/summary-router-ids

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.summary_router_id.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids_summary_router_id(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_dn_bit(input_yang_obj: yc_dn_bit_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_dn_bit, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/dn-bit

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.set_ase._changed():
        input_yang_obj.set_ase = input_yang_obj.set_ase
        
    if input_yang_obj.set_nssa._changed():
        input_yang_obj.set_nssa = input_yang_obj.set_nssa
        
    if input_yang_obj.set_summary._changed():
        input_yang_obj.set_summary = input_yang_obj.set_summary
        
    if input_yang_obj.check_ase._changed():
        input_yang_obj.check_ase = input_yang_obj.check_ase
        
    if input_yang_obj.check_nssa._changed():
        input_yang_obj.check_nssa = input_yang_obj.check_nssa
        
    if input_yang_obj.check_summary._changed():
        input_yang_obj.check_summary = input_yang_obj.check_summary
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids(input_yang_obj.summary_router_ids, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_filter_import(input_yang_obj: yc_filter_import_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_filter_import, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/filter-import

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.name_or_num._changed():
        input_yang_obj.name_or_num = input_yang_obj.name_or_num
        
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    if input_yang_obj.route_policy._changed():
        input_yang_obj.route_policy = input_yang_obj.route_policy
        
    if input_yang_obj.route_filter._changed():
        input_yang_obj.route_filter = input_yang_obj.route_filter
        
    if input_yang_obj.secondary._changed():
        input_yang_obj.secondary = input_yang_obj.secondary
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_filter_exports_filter_export(input_yang_obj: yc_filter_export_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_filter_exports_filter_export, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/filter-exports/filter-export

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.name_or_num._changed():
        input_yang_obj.name_or_num = input_yang_obj.name_or_num
        
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    if input_yang_obj.route_policy._changed():
        input_yang_obj.route_policy = input_yang_obj.route_policy
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_filter_exports(input_yang_obj: yc_filter_exports_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_filter_exports, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/filter-exports

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.filter_export.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_filter_exports_filter_export(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_import_routes_import_route(input_yang_obj: yc_import_route_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_import_routes_import_route, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/import-routes/import-route

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    if input_yang_obj.permit_ibgp._changed():
        input_yang_obj.permit_ibgp = input_yang_obj.permit_ibgp
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_import_routes(input_yang_obj: yc_import_routes_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_import_routes, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/import-routes

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.import_route.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_import_routes_import_route(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_silent_interfaces_silent_interface(input_yang_obj: yc_silent_interface_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_silent_interfaces_silent_interface, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/silent-interfaces/silent-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_silent_interfaces(input_yang_obj: yc_silent_interfaces_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_silent_interfaces, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/silent-interfaces

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.silent_interface.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_silent_interfaces_silent_interface(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_undo_silent_interfaces_undo_silent_interface(input_yang_obj: yc_undo_silent_interface_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_undo_silent_interfaces_undo_silent_interface, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/undo-silent-interfaces/undo-silent-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_undo_silent_interfaces(input_yang_obj: yc_undo_silent_interfaces_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_undo_silent_interfaces, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/undo-silent-interfaces

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.undo_silent_interface.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_undo_silent_interfaces_undo_silent_interface(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_cost_bindings_cost_binding(input_yang_obj: yc_cost_binding_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_cost_bindings_cost_binding, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/cost-bindings/cost-binding

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_cost_bindings(input_yang_obj: yc_cost_bindings_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_cost_bindings, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/cost-bindings

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.cost_binding.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_cost_bindings_cost_binding(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_networks_network(input_yang_obj: yc_network_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_networks_network, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/networks/network

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.description._changed():
        input_yang_obj.description = input_yang_obj.description
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_networks(input_yang_obj: yc_networks_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_networks, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/networks

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.network.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_networks_network(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_stub(input_yang_obj: yc_stub_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_stub, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/stub

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.backbone_peer_ignore._changed():
        input_yang_obj.backbone_peer_ignore = input_yang_obj.backbone_peer_ignore
        
    if input_yang_obj.no_summary._changed():
        input_yang_obj.no_summary = input_yang_obj.no_summary
        
    if input_yang_obj.default_cost._changed():
        input_yang_obj.default_cost = input_yang_obj.default_cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_nssa(input_yang_obj: yc_nssa_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_nssa, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/nssa

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.no_summary._changed():
        input_yang_obj.no_summary = input_yang_obj.no_summary
        
    if input_yang_obj.translator_always._changed():
        input_yang_obj.translator_always = input_yang_obj.translator_always
        
    if input_yang_obj.default_route_advertise._changed():
        input_yang_obj.default_route_advertise = input_yang_obj.default_route_advertise
        
    if input_yang_obj.backbone_peer_ignore._changed():
        input_yang_obj.backbone_peer_ignore = input_yang_obj.backbone_peer_ignore
        
    if input_yang_obj.no_import_route._changed():
        input_yang_obj.no_import_route = input_yang_obj.no_import_route
        
    if input_yang_obj.set_n_bit._changed():
        input_yang_obj.set_n_bit = input_yang_obj.set_n_bit
        
    if input_yang_obj.suppress_fa._changed():
        input_yang_obj.suppress_fa = input_yang_obj.suppress_fa
        
    if input_yang_obj.zero_address_forwarding._changed():
        input_yang_obj.zero_address_forwarding = input_yang_obj.zero_address_forwarding
        
    if input_yang_obj.translator_interval._changed():
        input_yang_obj.translator_interval = input_yang_obj.translator_interval
        
    if input_yang_obj.default_cost._changed():
        input_yang_obj.default_cost = input_yang_obj.default_cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_ldp_sync(input_yang_obj: yc_ldp_sync_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_ldp_sync, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/ldp-sync

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.timer._changed():
        input_yang_obj.timer = input_yang_obj.timer
        
    if input_yang_obj.infinite._changed():
        input_yang_obj.infinite = input_yang_obj.infinite
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_mpls_te(input_yang_obj: yc_mpls_te_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_mpls_te, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/mpls-te

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.standard_complying._changed():
        input_yang_obj.standard_complying = input_yang_obj.standard_complying
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_authentication(input_yang_obj: yc_authentication_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_authentication, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/authentication

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    if input_yang_obj.auth_text_simple._changed():
        input_yang_obj.auth_text_simple = input_yang_obj.auth_text_simple
        
    if input_yang_obj.key_id._changed():
        input_yang_obj.key_id = input_yang_obj.key_id
        
    if input_yang_obj.auth_text_md5._changed():
        input_yang_obj.auth_text_md5 = input_yang_obj.auth_text_md5
        
    if input_yang_obj.key_chain_name._changed():
        input_yang_obj.key_chain_name = input_yang_obj.key_chain_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_abr_summary_prefixs_abr_summary_prefix(input_yang_obj: yc_abr_summary_prefix_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_abr_summary_prefixs_abr_summary_prefix, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/abr-summary-prefixs/abr-summary-prefix

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost_value._changed():
        input_yang_obj.cost_value = input_yang_obj.cost_value
        
    if input_yang_obj.cost_inherit_min._changed():
        input_yang_obj.cost_inherit_min = input_yang_obj.cost_inherit_min
        
    if input_yang_obj.hold_max_cost._changed():
        input_yang_obj.hold_max_cost = input_yang_obj.hold_max_cost
        
    if input_yang_obj.advertise._changed():
        input_yang_obj.advertise = input_yang_obj.advertise
        
    if input_yang_obj.generate_null_zero._changed():
        input_yang_obj.generate_null_zero = input_yang_obj.generate_null_zero
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_abr_summary_prefixs(input_yang_obj: yc_abr_summary_prefixs_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_abr_summary_prefixs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/abr-summary-prefixs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.abr_summary_prefix.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_abr_summary_prefixs_abr_summary_prefix(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_timer(input_yang_obj: yc_timer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_timer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/vlink-peers/vlink-peer/timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hello_interval._changed():
        input_yang_obj.hello_interval = input_yang_obj.hello_interval
        
    if input_yang_obj.dead_interval._changed():
        input_yang_obj.dead_interval = input_yang_obj.dead_interval
        
    if input_yang_obj.trans_delay_interval._changed():
        input_yang_obj.trans_delay_interval = input_yang_obj.trans_delay_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_authentication(input_yang_obj: yc_authentication_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_authentication, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/vlink-peers/vlink-peer/authentication

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    if input_yang_obj.auth_text_simple._changed():
        input_yang_obj.auth_text_simple = input_yang_obj.auth_text_simple
        
    if input_yang_obj.key_id._changed():
        input_yang_obj.key_id = input_yang_obj.key_id
        
    if input_yang_obj.auth_text_md5._changed():
        input_yang_obj.auth_text_md5 = input_yang_obj.auth_text_md5
        
    if input_yang_obj.key_chain_name._changed():
        input_yang_obj.key_chain_name = input_yang_obj.key_chain_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer(input_yang_obj: yc_vlink_peer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/vlink-peers/vlink-peer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.retransmit_interval._changed():
        input_yang_obj.retransmit_interval = input_yang_obj.retransmit_interval
        
    if input_yang_obj.smart_discover._changed():
        input_yang_obj.smart_discover = input_yang_obj.smart_discover
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_timer(input_yang_obj.timer, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_authentication(input_yang_obj.authentication, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers(input_yang_obj: yc_vlink_peers_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/vlink-peers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vlink_peer.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_timer(input_yang_obj: yc_timer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_timer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/sham-links/sham-link/timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hello_interval._changed():
        input_yang_obj.hello_interval = input_yang_obj.hello_interval
        
    if input_yang_obj.dead_interval._changed():
        input_yang_obj.dead_interval = input_yang_obj.dead_interval
        
    if input_yang_obj.trans_delay_interval._changed():
        input_yang_obj.trans_delay_interval = input_yang_obj.trans_delay_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_authentication(input_yang_obj: yc_authentication_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_authentication, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/sham-links/sham-link/authentication

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    if input_yang_obj.auth_text_simple._changed():
        input_yang_obj.auth_text_simple = input_yang_obj.auth_text_simple
        
    if input_yang_obj.key_id._changed():
        input_yang_obj.key_id = input_yang_obj.key_id
        
    if input_yang_obj.auth_text_md5._changed():
        input_yang_obj.auth_text_md5 = input_yang_obj.auth_text_md5
        
    if input_yang_obj.key_chain_name._changed():
        input_yang_obj.key_chain_name = input_yang_obj.key_chain_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link(input_yang_obj: yc_sham_link_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/sham-links/sham-link

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.retransmit_interval._changed():
        input_yang_obj.retransmit_interval = input_yang_obj.retransmit_interval
        
    if input_yang_obj.smart_discover._changed():
        input_yang_obj.smart_discover = input_yang_obj.smart_discover
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_timer(input_yang_obj.timer, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_authentication(input_yang_obj.authentication, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links(input_yang_obj: yc_sham_links_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/sham-links

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.sham_link.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_filters_filter(input_yang_obj: yc_filter_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_filters_filter, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/filters/filter

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.name_or_num._changed():
        input_yang_obj.name_or_num = input_yang_obj.name_or_num
        
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    if input_yang_obj.route_policy._changed():
        input_yang_obj.route_policy = input_yang_obj.route_policy
        
    if input_yang_obj.route_filter._changed():
        input_yang_obj.route_filter = input_yang_obj.route_filter
        
    if input_yang_obj.include_abr_summary._changed():
        input_yang_obj.include_abr_summary = input_yang_obj.include_abr_summary
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_filters(input_yang_obj: yc_filters_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_filters, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/filters

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.filter.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_filters_filter(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_frr_ti_lfa(input_yang_obj: yc_ti_lfa_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_frr_ti_lfa, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/frr/ti-lfa

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.disable._changed():
        input_yang_obj.disable = input_yang_obj.disable
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_frr(input_yang_obj: yc_frr_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_frr, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/frr

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.frr_disable._changed():
        input_yang_obj.frr_disable = input_yang_obj.frr_disable
        
    if input_yang_obj.rlfa_disable._changed():
        input_yang_obj.rlfa_disable = input_yang_obj.rlfa_disable
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_frr_ti_lfa(input_yang_obj.ti_lfa, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_timer(input_yang_obj: yc_timer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_timer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hello_interval._changed():
        input_yang_obj.hello_interval = input_yang_obj.hello_interval
        
    if input_yang_obj.hello_conser._changed():
        input_yang_obj.hello_conser = input_yang_obj.hello_conser
        
    if input_yang_obj.dead_interval._changed():
        input_yang_obj.dead_interval = input_yang_obj.dead_interval
        
    if input_yang_obj.wait_interval._changed():
        input_yang_obj.wait_interval = input_yang_obj.wait_interval
        
    if input_yang_obj.poll_interval._changed():
        input_yang_obj.poll_interval = input_yang_obj.poll_interval
        
    if input_yang_obj.retransmit_interval._changed():
        input_yang_obj.retransmit_interval = input_yang_obj.retransmit_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_ldp_sync(input_yang_obj: yc_ldp_sync_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_ldp_sync, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/ldp-sync

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hold_down_timer._changed():
        input_yang_obj.hold_down_timer = input_yang_obj.hold_down_timer
        
    if input_yang_obj.timer._changed():
        input_yang_obj.timer = input_yang_obj.timer
        
    if input_yang_obj.infinite._changed():
        input_yang_obj.infinite = input_yang_obj.infinite
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_bfd(input_yang_obj: yc_bfd_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_bfd, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/bfd

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.block._changed():
        input_yang_obj.block = input_yang_obj.block
        
    if input_yang_obj.detect_multiplier._changed():
        input_yang_obj.detect_multiplier = input_yang_obj.detect_multiplier
        
    if input_yang_obj.min_tx._changed():
        input_yang_obj.min_tx = input_yang_obj.min_tx
        
    if input_yang_obj.min_rx._changed():
        input_yang_obj.min_rx = input_yang_obj.min_rx
        
    if input_yang_obj.frr_binding._changed():
        input_yang_obj.frr_binding = input_yang_obj.frr_binding
        
    if input_yang_obj.incr_cost_block._changed():
        input_yang_obj.incr_cost_block = input_yang_obj.incr_cost_block
        
    if input_yang_obj.incr_cost_value._changed():
        input_yang_obj.incr_cost_value = input_yang_obj.incr_cost_value
        
    if input_yang_obj.per_link_flag._changed():
        input_yang_obj.per_link_flag = input_yang_obj.per_link_flag
        
    if input_yang_obj.one_arm_echo_flag._changed():
        input_yang_obj.one_arm_echo_flag = input_yang_obj.one_arm_echo_flag
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_authentication(input_yang_obj: yc_authentication_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_authentication, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/authentication

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    if input_yang_obj.auth_text_simple._changed():
        input_yang_obj.auth_text_simple = input_yang_obj.auth_text_simple
        
    if input_yang_obj.key_id._changed():
        input_yang_obj.key_id = input_yang_obj.key_id
        
    if input_yang_obj.auth_text_md5._changed():
        input_yang_obj.auth_text_md5 = input_yang_obj.auth_text_md5
        
    if input_yang_obj.key_chain_name._changed():
        input_yang_obj.key_chain_name = input_yang_obj.key_chain_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_filter_lsa_out(input_yang_obj: yc_filter_lsa_out_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_filter_lsa_out, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/filter-lsa-out

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.all_flag._changed():
        input_yang_obj.all_flag = input_yang_obj.all_flag
        
    if input_yang_obj.sum_flag._changed():
        input_yang_obj.sum_flag = input_yang_obj.sum_flag
        
    if input_yang_obj.ase_flag._changed():
        input_yang_obj.ase_flag = input_yang_obj.ase_flag
        
    if input_yang_obj.nssa_flag._changed():
        input_yang_obj.nssa_flag = input_yang_obj.nssa_flag
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_suppress_flapping_peer(input_yang_obj: yc_peer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_suppress_flapping_peer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/suppress-flapping/peer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.detect_interval._changed():
        input_yang_obj.detect_interval = input_yang_obj.detect_interval
        
    if input_yang_obj.threshold._changed():
        input_yang_obj.threshold = input_yang_obj.threshold
        
    if input_yang_obj.resume_interval._changed():
        input_yang_obj.resume_interval = input_yang_obj.resume_interval
        
    if input_yang_obj.hold_down_interval._changed():
        input_yang_obj.hold_down_interval = input_yang_obj.hold_down_interval
        
    if input_yang_obj.hold_max_cost._changed():
        input_yang_obj.hold_max_cost = input_yang_obj.hold_max_cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_suppress_flapping(input_yang_obj: yc_suppress_flapping_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_suppress_flapping, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/suppress-flapping

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_suppress_flapping_peer(input_yang_obj.peer, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_flush_source_trace(input_yang_obj: yc_flush_source_trace_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_flush_source_trace, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/flush-source-trace

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.block._changed():
        input_yang_obj.block = input_yang_obj.block
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_mpls_te_peers_mpls_te_peer_procs_proc(input_yang_obj: yc_proc_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_mpls_te_peers_mpls_te_peer_procs_proc, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/mpls-te-peers/mpls-te-peer/procs/proc

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_mpls_te_peers_mpls_te_peer_procs(input_yang_obj: yc_procs_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_mpls_te_peers_mpls_te_peer_procs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/mpls-te-peers/mpls-te-peer/procs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.proc.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_mpls_te_peers_mpls_te_peer_procs_proc(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_mpls_te_peers_mpls_te_peer(input_yang_obj: yc_mpls_te_peer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_mpls_te_peers_mpls_te_peer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/mpls-te-peers/mpls-te-peer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_mpls_te_peers_mpls_te_peer_procs(input_yang_obj.procs, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_mpls_te_peers(input_yang_obj: yc_mpls_te_peers_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_mpls_te_peers, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/mpls-te-peers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.mpls_te_peer.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_mpls_te_peers_mpls_te_peer(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_frr(input_yang_obj: yc_frr_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_frr, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/multi-areas/multi-area/frr

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.frr_disable._changed():
        input_yang_obj.frr_disable = input_yang_obj.frr_disable
        
    if input_yang_obj.rlfa_disable._changed():
        input_yang_obj.rlfa_disable = input_yang_obj.rlfa_disable
        
    if input_yang_obj.ti_lfa_disable._changed():
        input_yang_obj.ti_lfa_disable = input_yang_obj.ti_lfa_disable
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_timer(input_yang_obj: yc_timer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_timer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/multi-areas/multi-area/timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hello_interval._changed():
        input_yang_obj.hello_interval = input_yang_obj.hello_interval
        
    if input_yang_obj.dead_interval._changed():
        input_yang_obj.dead_interval = input_yang_obj.dead_interval
        
    if input_yang_obj.retransmit_interval._changed():
        input_yang_obj.retransmit_interval = input_yang_obj.retransmit_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_ldp_sync(input_yang_obj: yc_ldp_sync_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_ldp_sync, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/multi-areas/multi-area/ldp-sync

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hold_down_timer._changed():
        input_yang_obj.hold_down_timer = input_yang_obj.hold_down_timer
        
    if input_yang_obj.timer._changed():
        input_yang_obj.timer = input_yang_obj.timer
        
    if input_yang_obj.infinite._changed():
        input_yang_obj.infinite = input_yang_obj.infinite
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_bfd(input_yang_obj: yc_bfd_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_bfd, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/multi-areas/multi-area/bfd

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.block._changed():
        input_yang_obj.block = input_yang_obj.block
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_authentication(input_yang_obj: yc_authentication_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_authentication, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/multi-areas/multi-area/authentication

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    if input_yang_obj.auth_text_simple._changed():
        input_yang_obj.auth_text_simple = input_yang_obj.auth_text_simple
        
    if input_yang_obj.key_id._changed():
        input_yang_obj.key_id = input_yang_obj.key_id
        
    if input_yang_obj.auth_text_md5._changed():
        input_yang_obj.auth_text_md5 = input_yang_obj.auth_text_md5
        
    if input_yang_obj.key_chain_name._changed():
        input_yang_obj.key_chain_name = input_yang_obj.key_chain_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_filter_lsa_out(input_yang_obj: yc_filter_lsa_out_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_filter_lsa_out, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/multi-areas/multi-area/filter-lsa-out

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.all_flag._changed():
        input_yang_obj.all_flag = input_yang_obj.all_flag
        
    if input_yang_obj.sum_flag._changed():
        input_yang_obj.sum_flag = input_yang_obj.sum_flag
        
    if input_yang_obj.ase_flag._changed():
        input_yang_obj.ase_flag = input_yang_obj.ase_flag
        
    if input_yang_obj.nssa_flag._changed():
        input_yang_obj.nssa_flag = input_yang_obj.nssa_flag
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_suppress_flapping_peer(input_yang_obj: yc_peer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_suppress_flapping_peer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/multi-areas/multi-area/suppress-flapping/peer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.detect_interval._changed():
        input_yang_obj.detect_interval = input_yang_obj.detect_interval
        
    if input_yang_obj.threshold._changed():
        input_yang_obj.threshold = input_yang_obj.threshold
        
    if input_yang_obj.resume_interval._changed():
        input_yang_obj.resume_interval = input_yang_obj.resume_interval
        
    if input_yang_obj.hold_down_interval._changed():
        input_yang_obj.hold_down_interval = input_yang_obj.hold_down_interval
        
    if input_yang_obj.hold_max_cost._changed():
        input_yang_obj.hold_max_cost = input_yang_obj.hold_max_cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_suppress_flapping(input_yang_obj: yc_suppress_flapping_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_suppress_flapping, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/multi-areas/multi-area/suppress-flapping

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_suppress_flapping_peer(input_yang_obj.peer, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area(input_yang_obj: yc_multi_area_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/multi-areas/multi-area

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.transmit_delay._changed():
        input_yang_obj.transmit_delay = input_yang_obj.transmit_delay
        
    if input_yang_obj.mtu_enable._changed():
        input_yang_obj.mtu_enable = input_yang_obj.mtu_enable
        
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.smart_discover._changed():
        input_yang_obj.smart_discover = input_yang_obj.smart_discover
        
    if input_yang_obj.ldp_sync_block._changed():
        input_yang_obj.ldp_sync_block = input_yang_obj.ldp_sync_block
        
    if input_yang_obj.ldp_sync_enable._changed():
        input_yang_obj.ldp_sync_enable = input_yang_obj.ldp_sync_enable
        
    if input_yang_obj.fallback_cost._changed():
        input_yang_obj.fallback_cost = input_yang_obj.fallback_cost
        
    if input_yang_obj.fallback_bw._changed():
        input_yang_obj.fallback_bw = input_yang_obj.fallback_bw
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_frr(input_yang_obj.frr, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_timer(input_yang_obj.timer, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_ldp_sync(input_yang_obj.ldp_sync, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_bfd(input_yang_obj.bfd, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_authentication(input_yang_obj.authentication, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_filter_lsa_out(input_yang_obj.filter_lsa_out, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_suppress_flapping(input_yang_obj.suppress_flapping, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas(input_yang_obj: yc_multi_areas_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/multi-areas

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.multi_area.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_disp_data(input_yang_obj: yc_disp_data_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_disp_data, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/disp-data

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.suppress_reach_block._changed():
        input_yang_obj.suppress_reach_block = input_yang_obj.suppress_reach_block
        
    if input_yang_obj.silent_enable._changed():
        input_yang_obj.silent_enable = input_yang_obj.silent_enable
        
    if input_yang_obj.dr._changed():
        input_yang_obj.dr = input_yang_obj.dr
        
    if input_yang_obj.bdr._changed():
        input_yang_obj.bdr = input_yang_obj.bdr
        
    if input_yang_obj.state._changed():
        input_yang_obj.state = input_yang_obj.state
        
    if input_yang_obj.mtu._changed():
        input_yang_obj.mtu = input_yang_obj.mtu
        
    if input_yang_obj.ip._changed():
        input_yang_obj.ip = input_yang_obj.ip
        
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.gr_state._changed():
        input_yang_obj.gr_state = input_yang_obj.gr_state
        
    if input_yang_obj.previous_state._changed():
        input_yang_obj.previous_state = input_yang_obj.previous_state
        
    if input_yang_obj.opaque_id._changed():
        input_yang_obj.opaque_id = input_yang_obj.opaque_id
        
    if input_yang_obj.mpls_te_link._changed():
        input_yang_obj.mpls_te_link = input_yang_obj.mpls_te_link
        
    if input_yang_obj.peer_flap_status._changed():
        input_yang_obj.peer_flap_status = input_yang_obj.peer_flap_status
        
    if input_yang_obj.peer_flap_count._changed():
        input_yang_obj.peer_flap_count = input_yang_obj.peer_flap_count
        
    if input_yang_obj.peer_flap_threshold._changed():
        input_yang_obj.peer_flap_threshold = input_yang_obj.peer_flap_threshold
        
    if input_yang_obj.peer_flap_timer._changed():
        input_yang_obj.peer_flap_timer = input_yang_obj.peer_flap_timer
        
    if input_yang_obj.peer_flap_remain_timer._changed():
        input_yang_obj.peer_flap_remain_timer = input_yang_obj.peer_flap_remain_timer
        
    if input_yang_obj.bandwidth._changed():
        input_yang_obj.bandwidth = input_yang_obj.bandwidth
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_nbr_statistics_nbr_statistic(input_yang_obj: yc_nbr_statistic_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_nbr_statistics_nbr_statistic, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/nbr-statistics/nbr-statistic

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.intf_ip._changed():
        input_yang_obj.intf_ip = input_yang_obj.intf_ip
        
    if input_yang_obj.gr_state._changed():
        input_yang_obj.gr_state = input_yang_obj.gr_state
        
    if input_yang_obj.state._changed():
        input_yang_obj.state = input_yang_obj.state
        
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    if input_yang_obj.priority._changed():
        input_yang_obj.priority = input_yang_obj.priority
        
    if input_yang_obj.dr._changed():
        input_yang_obj.dr = input_yang_obj.dr
        
    if input_yang_obj.bdr._changed():
        input_yang_obj.bdr = input_yang_obj.bdr
        
    if input_yang_obj.intf_mtu._changed():
        input_yang_obj.intf_mtu = input_yang_obj.intf_mtu
        
    if input_yang_obj.dead_due_timer._changed():
        input_yang_obj.dead_due_timer = input_yang_obj.dead_due_timer
        
    if input_yang_obj.retran_intv._changed():
        input_yang_obj.retran_intv = input_yang_obj.retran_intv
        
    if input_yang_obj.up_time._changed():
        input_yang_obj.up_time = input_yang_obj.up_time
        
    if input_yang_obj.up_time_stamp._changed():
        input_yang_obj.up_time_stamp = input_yang_obj.up_time_stamp
        
    if input_yang_obj.auth_sequence._changed():
        input_yang_obj.auth_sequence = input_yang_obj.auth_sequence
        
    if input_yang_obj.adj_sid._changed():
        input_yang_obj.adj_sid = input_yang_obj.adj_sid
        
    if input_yang_obj.adj_weight._changed():
        input_yang_obj.adj_weight = input_yang_obj.adj_weight
        
    if input_yang_obj.adj_flags._changed():
        input_yang_obj.adj_flags = input_yang_obj.adj_flags
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_nbr_statistics(input_yang_obj: yc_nbr_statistics_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_nbr_statistics, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/nbr-statistics

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.nbr_statistic.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_nbr_statistics_nbr_statistic(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_error_data(input_yang_obj: yc_error_data_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_error_data, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/error-data

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.router_id._changed():
        input_yang_obj.router_id = input_yang_obj.router_id
        
    if input_yang_obj.same_ip_pkt_cnt._changed():
        input_yang_obj.same_ip_pkt_cnt = input_yang_obj.same_ip_pkt_cnt
        
    if input_yang_obj.bad_pkt_cnt._changed():
        input_yang_obj.bad_pkt_cnt = input_yang_obj.bad_pkt_cnt
        
    if input_yang_obj.bad_ver_cnt._changed():
        input_yang_obj.bad_ver_cnt = input_yang_obj.bad_ver_cnt
        
    if input_yang_obj.bad_chksum_pkt_cnt._changed():
        input_yang_obj.bad_chksum_pkt_cnt = input_yang_obj.bad_chksum_pkt_cnt
        
    if input_yang_obj.bad_area_pkt_cnt._changed():
        input_yang_obj.bad_area_pkt_cnt = input_yang_obj.bad_area_pkt_cnt
        
    if input_yang_obj.pkt_rcv_unnumber._changed():
        input_yang_obj.pkt_rcv_unnumber = input_yang_obj.pkt_rcv_unnumber
        
    if input_yang_obj.bad_virt_link_cnt._changed():
        input_yang_obj.bad_virt_link_cnt = input_yang_obj.bad_virt_link_cnt
        
    if input_yang_obj.auth_type_fail_cnt._changed():
        input_yang_obj.auth_type_fail_cnt = input_yang_obj.auth_type_fail_cnt
        
    if input_yang_obj.auth_key_fail_cnt._changed():
        input_yang_obj.auth_key_fail_cnt = input_yang_obj.auth_key_fail_cnt
        
    if input_yang_obj.short_pkt_cnt._changed():
        input_yang_obj.short_pkt_cnt = input_yang_obj.short_pkt_cnt
        
    if input_yang_obj.long_pkt_cnt._changed():
        input_yang_obj.long_pkt_cnt = input_yang_obj.long_pkt_cnt
        
    if input_yang_obj.tx_err_cnt._changed():
        input_yang_obj.tx_err_cnt = input_yang_obj.tx_err_cnt
        
    if input_yang_obj.if_down_cnt._changed():
        input_yang_obj.if_down_cnt = input_yang_obj.if_down_cnt
        
    if input_yang_obj.no_nbr._changed():
        input_yang_obj.no_nbr = input_yang_obj.no_nbr
        
    if input_yang_obj.mis_netmask_cnt._changed():
        input_yang_obj.mis_netmask_cnt = input_yang_obj.mis_netmask_cnt
        
    if input_yang_obj.mis_hello_intl_cnt._changed():
        input_yang_obj.mis_hello_intl_cnt = input_yang_obj.mis_hello_intl_cnt
        
    if input_yang_obj.mis_dead_intl_cnt._changed():
        input_yang_obj.mis_dead_intl_cnt = input_yang_obj.mis_dead_intl_cnt
        
    if input_yang_obj.mis_ext_cnt._changed():
        input_yang_obj.mis_ext_cnt = input_yang_obj.mis_ext_cnt
        
    if input_yang_obj.router_id_confusion._changed():
        input_yang_obj.router_id_confusion = input_yang_obj.router_id_confusion
        
    if input_yang_obj.vlink_nbr_mis_cnt._changed():
        input_yang_obj.vlink_nbr_mis_cnt = input_yang_obj.vlink_nbr_mis_cnt
        
    if input_yang_obj.nbma_nbr_err_cnt._changed():
        input_yang_obj.nbma_nbr_err_cnt = input_yang_obj.nbma_nbr_err_cnt
        
    if input_yang_obj.inval_src_hello_cnt._changed():
        input_yang_obj.inval_src_hello_cnt = input_yang_obj.inval_src_hello_cnt
        
    if input_yang_obj.dd_nbr_low_cnt._changed():
        input_yang_obj.dd_nbr_low_cnt = input_yang_obj.dd_nbr_low_cnt
        
    if input_yang_obj.dd_rtrid_cnt._changed():
        input_yang_obj.dd_rtrid_cnt = input_yang_obj.dd_rtrid_cnt
        
    if input_yang_obj.dd_opt_mismatch_cnt._changed():
        input_yang_obj.dd_opt_mismatch_cnt = input_yang_obj.dd_opt_mismatch_cnt
        
    if input_yang_obj.dd_unknwn_lsa_cnt._changed():
        input_yang_obj.dd_unknwn_lsa_cnt = input_yang_obj.dd_unknwn_lsa_cnt
        
    if input_yang_obj.dd_mtu_mismatch_cnt._changed():
        input_yang_obj.dd_mtu_mismatch_cnt = input_yang_obj.dd_mtu_mismatch_cnt
        
    if input_yang_obj.ack_nbr_low_cnt._changed():
        input_yang_obj.ack_nbr_low_cnt = input_yang_obj.ack_nbr_low_cnt
        
    if input_yang_obj.ack_bad_cnt._changed():
        input_yang_obj.ack_bad_cnt = input_yang_obj.ack_bad_cnt
        
    if input_yang_obj.ack_duplicate_cnt._changed():
        input_yang_obj.ack_duplicate_cnt = input_yang_obj.ack_duplicate_cnt
        
    if input_yang_obj.ack_unknwn_lsa_cnt._changed():
        input_yang_obj.ack_unknwn_lsa_cnt = input_yang_obj.ack_unknwn_lsa_cnt
        
    if input_yang_obj.req_nbr_low_cnt._changed():
        input_yang_obj.req_nbr_low_cnt = input_yang_obj.req_nbr_low_cnt
        
    if input_yang_obj.req_empty_cnt._changed():
        input_yang_obj.req_empty_cnt = input_yang_obj.req_empty_cnt
        
    if input_yang_obj.req_bad_cnt._changed():
        input_yang_obj.req_bad_cnt = input_yang_obj.req_bad_cnt
        
    if input_yang_obj.upd_nbr_low_cnt._changed():
        input_yang_obj.upd_nbr_low_cnt = input_yang_obj.upd_nbr_low_cnt
        
    if input_yang_obj.upd_self_newr_cnt._changed():
        input_yang_obj.upd_self_newr_cnt = input_yang_obj.upd_self_newr_cnt
        
    if input_yang_obj.upd_min_lsarr_cnt._changed():
        input_yang_obj.upd_min_lsarr_cnt = input_yang_obj.upd_min_lsarr_cnt
        
    if input_yang_obj.upd_ls_chksum_cnt._changed():
        input_yang_obj.upd_ls_chksum_cnt = input_yang_obj.upd_ls_chksum_cnt
        
    if input_yang_obj.upd_les_recent_cnt._changed():
        input_yang_obj.upd_les_recent_cnt = input_yang_obj.upd_les_recent_cnt
        
    if input_yang_obj.upd_unknw_lsa_cnt._changed():
        input_yang_obj.upd_unknw_lsa_cnt = input_yang_obj.upd_unknw_lsa_cnt
        
    if input_yang_obj.opq9_flood_cnt._changed():
        input_yang_obj.opq9_flood_cnt = input_yang_obj.opq9_flood_cnt
        
    if input_yang_obj.opq10_flood_cnt._changed():
        input_yang_obj.opq10_flood_cnt = input_yang_obj.opq10_flood_cnt
        
    if input_yang_obj.opq11_flood_cnt._changed():
        input_yang_obj.opq11_flood_cnt = input_yang_obj.opq11_flood_cnt
        
    if input_yang_obj.rxmt_dd_err_cnt._changed():
        input_yang_obj.rxmt_dd_err_cnt = input_yang_obj.rxmt_dd_err_cnt
        
    if input_yang_obj.rxmt_req_err_cnt._changed():
        input_yang_obj.rxmt_req_err_cnt = input_yang_obj.rxmt_req_err_cnt
        
    if input_yang_obj.rxmt_upd_err_cnt._changed():
        input_yang_obj.rxmt_upd_err_cnt = input_yang_obj.rxmt_upd_err_cnt
        
    if input_yang_obj.gr_invalid_lsa_cnt._changed():
        input_yang_obj.gr_invalid_lsa_cnt = input_yang_obj.gr_invalid_lsa_cnt
        
    if input_yang_obj.gr_invalid_pol_cnt._changed():
        input_yang_obj.gr_invalid_pol_cnt = input_yang_obj.gr_invalid_pol_cnt
        
    if input_yang_obj.gr_invalid_prd_cnt._changed():
        input_yang_obj.gr_invalid_prd_cnt = input_yang_obj.gr_invalid_prd_cnt
        
    if input_yang_obj.tunnel_cost_cnt._changed():
        input_yang_obj.tunnel_cost_cnt = input_yang_obj.tunnel_cost_cnt
        
    if input_yang_obj.peer_net_type_cnt._changed():
        input_yang_obj.peer_net_type_cnt = input_yang_obj.peer_net_type_cnt
        
    if input_yang_obj.hello_dr_mis_cnt._changed():
        input_yang_obj.hello_dr_mis_cnt = input_yang_obj.hello_dr_mis_cnt
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface(input_yang_obj: yc_interface_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.network_type._changed():
        input_yang_obj.network_type = input_yang_obj.network_type
        
    if input_yang_obj.peer_ip_ignore._changed():
        input_yang_obj.peer_ip_ignore = input_yang_obj.peer_ip_ignore
        
    if input_yang_obj.transmit_delay._changed():
        input_yang_obj.transmit_delay = input_yang_obj.transmit_delay
        
    if input_yang_obj.mtu_enable._changed():
        input_yang_obj.mtu_enable = input_yang_obj.mtu_enable
        
    if input_yang_obj.dr_priority._changed():
        input_yang_obj.dr_priority = input_yang_obj.dr_priority
        
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.smart_discover._changed():
        input_yang_obj.smart_discover = input_yang_obj.smart_discover
        
    if input_yang_obj.p2mp_mask_ignore._changed():
        input_yang_obj.p2mp_mask_ignore = input_yang_obj.p2mp_mask_ignore
        
    if input_yang_obj.ldp_sync_block._changed():
        input_yang_obj.ldp_sync_block = input_yang_obj.ldp_sync_block
        
    if input_yang_obj.ldp_sync_enable._changed():
        input_yang_obj.ldp_sync_enable = input_yang_obj.ldp_sync_enable
        
    if input_yang_obj.link_cost._changed():
        input_yang_obj.link_cost = input_yang_obj.link_cost
        
    if input_yang_obj.suppress_reachability._changed():
        input_yang_obj.suppress_reachability = input_yang_obj.suppress_reachability
        
    if input_yang_obj.mpls_ldp_auto_flag._changed():
        input_yang_obj.mpls_ldp_auto_flag = input_yang_obj.mpls_ldp_auto_flag
        
    if input_yang_obj.dcn_opq_blk_enable._changed():
        input_yang_obj.dcn_opq_blk_enable = input_yang_obj.dcn_opq_blk_enable
        
    if input_yang_obj.peer_hold_max_timer._changed():
        input_yang_obj.peer_hold_max_timer = input_yang_obj.peer_hold_max_timer
        
    if input_yang_obj.fallback_cost._changed():
        input_yang_obj.fallback_cost = input_yang_obj.fallback_cost
        
    if input_yang_obj.fallback_bw._changed():
        input_yang_obj.fallback_bw = input_yang_obj.fallback_bw
        
    if input_yang_obj.source_sub_ip_address._changed():
        input_yang_obj.source_sub_ip_address = input_yang_obj.source_sub_ip_address
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_frr(input_yang_obj.frr, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_timer(input_yang_obj.timer, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_ldp_sync(input_yang_obj.ldp_sync, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_bfd(input_yang_obj.bfd, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_authentication(input_yang_obj.authentication, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_filter_lsa_out(input_yang_obj.filter_lsa_out, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_suppress_flapping(input_yang_obj.suppress_flapping, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_flush_source_trace(input_yang_obj.flush_source_trace, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_mpls_te_peers(input_yang_obj.mpls_te_peers, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas(input_yang_obj.multi_areas, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_disp_data(input_yang_obj.disp_data, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_nbr_statistics(input_yang_obj.nbr_statistics, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_error_data(input_yang_obj.error_data, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces(input_yang_obj: yc_interfaces_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.interface.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_disp_data(input_yang_obj: yc_disp_data_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_disp_data, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/disp-data

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.spf_schedule_times._changed():
        input_yang_obj.spf_schedule_times = input_yang_obj.spf_schedule_times
        
    if input_yang_obj.interface_count._changed():
        input_yang_obj.interface_count = input_yang_obj.interface_count
        
    if input_yang_obj.exchange_and_loading_nbr._changed():
        input_yang_obj.exchange_and_loading_nbr = input_yang_obj.exchange_and_loading_nbr
        
    if input_yang_obj.router_id_conflict._changed():
        input_yang_obj.router_id_conflict = input_yang_obj.router_id_conflict
        
    if input_yang_obj.import_limit_status._changed():
        input_yang_obj.import_limit_status = input_yang_obj.import_limit_status
        
    if input_yang_obj.self_nssa_lsa_count._changed():
        input_yang_obj.self_nssa_lsa_count = input_yang_obj.self_nssa_lsa_count
        
    if input_yang_obj.nssa_trans_state._changed():
        input_yang_obj.nssa_trans_state = input_yang_obj.nssa_trans_state
        
    if input_yang_obj.nssa_trans_role._changed():
        input_yang_obj.nssa_trans_role = input_yang_obj.nssa_trans_role
        
    if input_yang_obj.nssa_trans_stab_intv._changed():
        input_yang_obj.nssa_trans_stab_intv = input_yang_obj.nssa_trans_stab_intv
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area(input_yang_obj: yc_area_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.area_type._changed():
        input_yang_obj.area_type = input_yang_obj.area_type
        
    if input_yang_obj.description._changed():
        input_yang_obj.description = input_yang_obj.description
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_networks(input_yang_obj.networks, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_stub(input_yang_obj.stub, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_nssa(input_yang_obj.nssa, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_ldp_sync(input_yang_obj.ldp_sync, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_mpls_te(input_yang_obj.mpls_te, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_authentication(input_yang_obj.authentication, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_abr_summary_prefixs(input_yang_obj.abr_summary_prefixs, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers(input_yang_obj.vlink_peers, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links(input_yang_obj.sham_links, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_filters(input_yang_obj.filters, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces(input_yang_obj.interfaces, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_disp_data(input_yang_obj.disp_data, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas(input_yang_obj: yc_areas_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.area.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_disp_data(input_yang_obj: yc_disp_data_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_disp_data, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/disp-data

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.effective_router_id._changed():
        input_yang_obj.effective_router_id = input_yang_obj.effective_router_id
        
    if input_yang_obj.border_router._changed():
        input_yang_obj.border_router = input_yang_obj.border_router
        
    if input_yang_obj.ietf_mode._changed():
        input_yang_obj.ietf_mode = input_yang_obj.ietf_mode
        
    if input_yang_obj.spf_count._changed():
        input_yang_obj.spf_count = input_yang_obj.spf_count
        
    if input_yang_obj.area_count._changed():
        input_yang_obj.area_count = input_yang_obj.area_count
        
    if input_yang_obj.nssa_count._changed():
        input_yang_obj.nssa_count = input_yang_obj.nssa_count
        
    if input_yang_obj.exchange_and_loading_nbr._changed():
        input_yang_obj.exchange_and_loading_nbr = input_yang_obj.exchange_and_loading_nbr
        
    if input_yang_obj.lsdb_overflow_status._changed():
        input_yang_obj.lsdb_overflow_status = input_yang_obj.lsdb_overflow_status
        
    if input_yang_obj.non_default_ase_lsa_count._changed():
        input_yang_obj.non_default_ase_lsa_count = input_yang_obj.non_default_ase_lsa_count
        
    if input_yang_obj.lsdb_overflow_remain._changed():
        input_yang_obj.lsdb_overflow_remain = input_yang_obj.lsdb_overflow_remain
        
    if input_yang_obj.import_limit_status._changed():
        input_yang_obj.import_limit_status = input_yang_obj.import_limit_status
        
    if input_yang_obj.self_ase_lsa_count._changed():
        input_yang_obj.self_ase_lsa_count = input_yang_obj.self_ase_lsa_count
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_migp_routings_migp_routing_nexthop_datas_nexthop_data(input_yang_obj: yc_nexthop_data_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_migp_routings_migp_routing_nexthop_datas_nexthop_data, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/migp-routings/migp-routing/nexthop-datas/nexthop-data

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.flags_disp._changed():
        input_yang_obj.flags_disp = input_yang_obj.flags_disp
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.if_name._changed():
        input_yang_obj.if_name = input_yang_obj.if_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_migp_routings_migp_routing_nexthop_datas(input_yang_obj: yc_nexthop_datas_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_migp_routings_migp_routing_nexthop_datas, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/migp-routings/migp-routing/nexthop-datas

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.nexthop_data.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_migp_routings_migp_routing_nexthop_datas_nexthop_data(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_migp_routings_migp_routing(input_yang_obj: yc_migp_routing_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_migp_routings_migp_routing, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/migp-routings/migp-routing

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.prefix_priority._changed():
        input_yang_obj.prefix_priority = input_yang_obj.prefix_priority
        
    if input_yang_obj.path_type._changed():
        input_yang_obj.path_type = input_yang_obj.path_type
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_migp_routings_migp_routing_nexthop_datas(input_yang_obj.nexthop_datas, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_migp_routings(input_yang_obj: yc_migp_routings_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_migp_routings, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/migp-routings

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.migp_routing.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_migp_routings_migp_routing(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_abr_asbr_statistics_abr_asbr_statistic(input_yang_obj: yc_abr_asbr_statistic_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_abr_asbr_statistics_abr_asbr_statistic, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/abr-asbr-statistics/abr-asbr-statistic

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.if_name._changed():
        input_yang_obj.if_name = input_yang_obj.if_name
        
    if input_yang_obj.router_id._changed():
        input_yang_obj.router_id = input_yang_obj.router_id
        
    if input_yang_obj.path_type._changed():
        input_yang_obj.path_type = input_yang_obj.path_type
        
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.router_type._changed():
        input_yang_obj.router_type = input_yang_obj.router_type
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_abr_asbr_statistics(input_yang_obj: yc_abr_asbr_statistics_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_abr_asbr_statistics, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/abr-asbr-statistics

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.abr_asbr_statistic.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_abr_asbr_statistics_abr_asbr_statistic(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_paras_nexthop_para(input_yang_obj: yc_nexthop_para_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_nexthop_paras_nexthop_para, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/nexthop-paras/nexthop-para

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.referece_count._changed():
        input_yang_obj.referece_count = input_yang_obj.referece_count
        
    if input_yang_obj.router_id._changed():
        input_yang_obj.router_id = input_yang_obj.router_id
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_paras(input_yang_obj: yc_nexthop_paras_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_nexthop_paras, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/nexthop-paras

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.nexthop_para.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_paras_nexthop_para(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_lsdb_statistics_lsdb_statistic_lsabodys_lsabody(input_yang_obj: yc_lsabody_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_lsdb_statistics_lsdb_statistic_lsabodys_lsabody, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/lsdb-statistics/lsdb-statistic/lsabodys/lsabody

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tos_id._changed():
        input_yang_obj.tos_id = input_yang_obj.tos_id
        
    if input_yang_obj.tos_metric._changed():
        input_yang_obj.tos_metric = input_yang_obj.tos_metric
        
    if input_yang_obj.route_tag._changed():
        input_yang_obj.route_tag = input_yang_obj.route_tag
        
    if input_yang_obj.opaque_type._changed():
        input_yang_obj.opaque_type = input_yang_obj.opaque_type
        
    if input_yang_obj.opaque_id._changed():
        input_yang_obj.opaque_id = input_yang_obj.opaque_id
        
    if input_yang_obj.ext_metric_type._changed():
        input_yang_obj.ext_metric_type = input_yang_obj.ext_metric_type
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_lsdb_statistics_lsdb_statistic_lsabodys(input_yang_obj: yc_lsabodys_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_lsdb_statistics_lsdb_statistic_lsabodys, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/lsdb-statistics/lsdb-statistic/lsabodys

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.lsabody.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_lsdb_statistics_lsdb_statistic_lsabodys_lsabody(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_lsdb_statistics_lsdb_statistic_rilsa(input_yang_obj: yc_rilsa_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_lsdb_statistics_lsdb_statistic_rilsa, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/lsdb-statistics/lsdb-statistic/rilsa

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.host_name._changed():
        input_yang_obj.host_name = input_yang_obj.host_name
        
    if input_yang_obj.algorithm._changed():
        input_yang_obj.algorithm = input_yang_obj.algorithm
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_lsdb_statistics_lsdb_statistic(input_yang_obj: yc_lsdb_statistic_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_lsdb_statistics_lsdb_statistic, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/lsdb-statistics/lsdb-statistic

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.lsa_age._changed():
        input_yang_obj.lsa_age = input_yang_obj.lsa_age
        
    if input_yang_obj.lsa_sequence_num._changed():
        input_yang_obj.lsa_sequence_num = input_yang_obj.lsa_sequence_num
        
    if input_yang_obj.check_sum._changed():
        input_yang_obj.check_sum = input_yang_obj.check_sum
        
    if input_yang_obj.lsa_length._changed():
        input_yang_obj.lsa_length = input_yang_obj.lsa_length
        
    if input_yang_obj.options._changed():
        input_yang_obj.options = input_yang_obj.options
        
    if input_yang_obj.option_flag._changed():
        input_yang_obj.option_flag = input_yang_obj.option_flag
        
    if input_yang_obj.link_count._changed():
        input_yang_obj.link_count = input_yang_obj.link_count
        
    if input_yang_obj.network_mask._changed():
        input_yang_obj.network_mask = input_yang_obj.network_mask
        
    if input_yang_obj.host_name._changed():
        input_yang_obj.host_name = input_yang_obj.host_name
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_lsdb_statistics_lsdb_statistic_lsabodys(input_yang_obj.lsabodys, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_lsdb_statistics_lsdb_statistic_rilsa(input_yang_obj.rilsa, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_lsdb_statistics(input_yang_obj: yc_lsdb_statistics_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_lsdb_statistics, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/lsdb-statistics

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.lsdb_statistic.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_lsdb_statistics_lsdb_statistic(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_lsdb_briefs_lsdb_brief(input_yang_obj: yc_lsdb_brief_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_lsdb_briefs_lsdb_brief, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/lsdb-briefs/lsdb-brief

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.router_id._changed():
        input_yang_obj.router_id = input_yang_obj.router_id
        
    if input_yang_obj.stub._changed():
        input_yang_obj.stub = input_yang_obj.stub
        
    if input_yang_obj.router._changed():
        input_yang_obj.router = input_yang_obj.router
        
    if input_yang_obj.network._changed():
        input_yang_obj.network = input_yang_obj.network
        
    if input_yang_obj.summary_net._changed():
        input_yang_obj.summary_net = input_yang_obj.summary_net
        
    if input_yang_obj.asbr._changed():
        input_yang_obj.asbr = input_yang_obj.asbr
        
    if input_yang_obj.type7._changed():
        input_yang_obj.type7 = input_yang_obj.type7
        
    if input_yang_obj.opaque9._changed():
        input_yang_obj.opaque9 = input_yang_obj.opaque9
        
    if input_yang_obj.opaque10._changed():
        input_yang_obj.opaque10 = input_yang_obj.opaque10
        
    if input_yang_obj.sub_total._changed():
        input_yang_obj.sub_total = input_yang_obj.sub_total
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_lsdb_briefs(input_yang_obj: yc_lsdb_briefs_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_lsdb_briefs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/lsdb-briefs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.lsdb_brief.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_lsdb_briefs_lsdb_brief(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_last_down_nbrs_last_down_nbr(input_yang_obj: yc_last_down_nbr_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_last_down_nbrs_last_down_nbr, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/last-down-nbrs/last-down-nbr

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.immediate_reason._changed():
        input_yang_obj.immediate_reason = input_yang_obj.immediate_reason
        
    if input_yang_obj.primary_reason._changed():
        input_yang_obj.primary_reason = input_yang_obj.primary_reason
        
    if input_yang_obj.time._changed():
        input_yang_obj.time = input_yang_obj.time
        
    if input_yang_obj.local_router_id._changed():
        input_yang_obj.local_router_id = input_yang_obj.local_router_id
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_last_down_nbrs(input_yang_obj: yc_last_down_nbrs_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_last_down_nbrs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/last-down-nbrs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.last_down_nbr.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_last_down_nbrs_last_down_nbr(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_disp_graceful_restart(input_yang_obj: yc_disp_graceful_restart_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_disp_graceful_restart, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/disp-graceful-restart

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.capability._changed():
        input_yang_obj.capability = input_yang_obj.capability
        
    if input_yang_obj.help_role._changed():
        input_yang_obj.help_role = input_yang_obj.help_role
        
    if input_yang_obj.current_state._changed():
        input_yang_obj.current_state = input_yang_obj.current_state
        
    if input_yang_obj.on_helper._changed():
        input_yang_obj.on_helper = input_yang_obj.on_helper
        
    if input_yang_obj.nbr_num._changed():
        input_yang_obj.nbr_num = input_yang_obj.nbr_num
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_error_process_data(input_yang_obj: yc_error_process_data_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_error_process_data, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/error-process-data

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.router_id._changed():
        input_yang_obj.router_id = input_yang_obj.router_id
        
    if input_yang_obj.same_ip_pkt_cnt._changed():
        input_yang_obj.same_ip_pkt_cnt = input_yang_obj.same_ip_pkt_cnt
        
    if input_yang_obj.bad_pkt_cnt._changed():
        input_yang_obj.bad_pkt_cnt = input_yang_obj.bad_pkt_cnt
        
    if input_yang_obj.bad_ver_cnt._changed():
        input_yang_obj.bad_ver_cnt = input_yang_obj.bad_ver_cnt
        
    if input_yang_obj.bad_chk_sum_pkt_cnt._changed():
        input_yang_obj.bad_chk_sum_pkt_cnt = input_yang_obj.bad_chk_sum_pkt_cnt
        
    if input_yang_obj.bad_area_pkt_cnt._changed():
        input_yang_obj.bad_area_pkt_cnt = input_yang_obj.bad_area_pkt_cnt
        
    if input_yang_obj.pkt_rcv_unnumber._changed():
        input_yang_obj.pkt_rcv_unnumber = input_yang_obj.pkt_rcv_unnumber
        
    if input_yang_obj.bad_virt_link_cnt._changed():
        input_yang_obj.bad_virt_link_cnt = input_yang_obj.bad_virt_link_cnt
        
    if input_yang_obj.auth_type_fail_cnt._changed():
        input_yang_obj.auth_type_fail_cnt = input_yang_obj.auth_type_fail_cnt
        
    if input_yang_obj.auth_key_fail_cnt._changed():
        input_yang_obj.auth_key_fail_cnt = input_yang_obj.auth_key_fail_cnt
        
    if input_yang_obj.short_pkt_cnt._changed():
        input_yang_obj.short_pkt_cnt = input_yang_obj.short_pkt_cnt
        
    if input_yang_obj.long_pkt_cnt._changed():
        input_yang_obj.long_pkt_cnt = input_yang_obj.long_pkt_cnt
        
    if input_yang_obj.tx_err_cnt._changed():
        input_yang_obj.tx_err_cnt = input_yang_obj.tx_err_cnt
        
    if input_yang_obj.if_down_cnt._changed():
        input_yang_obj.if_down_cnt = input_yang_obj.if_down_cnt
        
    if input_yang_obj.no_nbr._changed():
        input_yang_obj.no_nbr = input_yang_obj.no_nbr
        
    if input_yang_obj.mis_netmask_cnt._changed():
        input_yang_obj.mis_netmask_cnt = input_yang_obj.mis_netmask_cnt
        
    if input_yang_obj.mis_hello_intl_cnt._changed():
        input_yang_obj.mis_hello_intl_cnt = input_yang_obj.mis_hello_intl_cnt
        
    if input_yang_obj.mis_dead_intl_cnt._changed():
        input_yang_obj.mis_dead_intl_cnt = input_yang_obj.mis_dead_intl_cnt
        
    if input_yang_obj.mis_ext_rou_cap_cnt._changed():
        input_yang_obj.mis_ext_rou_cap_cnt = input_yang_obj.mis_ext_rou_cap_cnt
        
    if input_yang_obj.router_id_confusion._changed():
        input_yang_obj.router_id_confusion = input_yang_obj.router_id_confusion
        
    if input_yang_obj.vlink_nbr_mis_cnt._changed():
        input_yang_obj.vlink_nbr_mis_cnt = input_yang_obj.vlink_nbr_mis_cnt
        
    if input_yang_obj.nbma_nbr_err_cnt._changed():
        input_yang_obj.nbma_nbr_err_cnt = input_yang_obj.nbma_nbr_err_cnt
        
    if input_yang_obj.inval_src_helo_cnt._changed():
        input_yang_obj.inval_src_helo_cnt = input_yang_obj.inval_src_helo_cnt
        
    if input_yang_obj.dd_nbr_low_cnt._changed():
        input_yang_obj.dd_nbr_low_cnt = input_yang_obj.dd_nbr_low_cnt
        
    if input_yang_obj.dd_router_id_cnt._changed():
        input_yang_obj.dd_router_id_cnt = input_yang_obj.dd_router_id_cnt
        
    if input_yang_obj.dd_opt_mismatch_cnt._changed():
        input_yang_obj.dd_opt_mismatch_cnt = input_yang_obj.dd_opt_mismatch_cnt
        
    if input_yang_obj.dd_unknwn_lsa_cnt._changed():
        input_yang_obj.dd_unknwn_lsa_cnt = input_yang_obj.dd_unknwn_lsa_cnt
        
    if input_yang_obj.dd_mtu_mismatch_cnt._changed():
        input_yang_obj.dd_mtu_mismatch_cnt = input_yang_obj.dd_mtu_mismatch_cnt
        
    if input_yang_obj.ack_nbr_low_cnt._changed():
        input_yang_obj.ack_nbr_low_cnt = input_yang_obj.ack_nbr_low_cnt
        
    if input_yang_obj.ack_bad_cnt._changed():
        input_yang_obj.ack_bad_cnt = input_yang_obj.ack_bad_cnt
        
    if input_yang_obj.ack_duplicate_cnt._changed():
        input_yang_obj.ack_duplicate_cnt = input_yang_obj.ack_duplicate_cnt
        
    if input_yang_obj.ack_unknown_lsa_cnt._changed():
        input_yang_obj.ack_unknown_lsa_cnt = input_yang_obj.ack_unknown_lsa_cnt
        
    if input_yang_obj.req_nbr_low_cnt._changed():
        input_yang_obj.req_nbr_low_cnt = input_yang_obj.req_nbr_low_cnt
        
    if input_yang_obj.req_empty_cnt._changed():
        input_yang_obj.req_empty_cnt = input_yang_obj.req_empty_cnt
        
    if input_yang_obj.req_bad_cnt._changed():
        input_yang_obj.req_bad_cnt = input_yang_obj.req_bad_cnt
        
    if input_yang_obj.upd_nbr_low_cnt._changed():
        input_yang_obj.upd_nbr_low_cnt = input_yang_obj.upd_nbr_low_cnt
        
    if input_yang_obj.upd_self_newr_cnt._changed():
        input_yang_obj.upd_self_newr_cnt = input_yang_obj.upd_self_newr_cnt
        
    if input_yang_obj.upd_min_lsa_lsarr_cnt._changed():
        input_yang_obj.upd_min_lsa_lsarr_cnt = input_yang_obj.upd_min_lsa_lsarr_cnt
        
    if input_yang_obj.upd_ls_checksum_cnt._changed():
        input_yang_obj.upd_ls_checksum_cnt = input_yang_obj.upd_ls_checksum_cnt
        
    if input_yang_obj.upd_les_recent_cnt._changed():
        input_yang_obj.upd_les_recent_cnt = input_yang_obj.upd_les_recent_cnt
        
    if input_yang_obj.upd_unknow_lsa_cnt._changed():
        input_yang_obj.upd_unknow_lsa_cnt = input_yang_obj.upd_unknow_lsa_cnt
        
    if input_yang_obj.opq9_flood_cnt._changed():
        input_yang_obj.opq9_flood_cnt = input_yang_obj.opq9_flood_cnt
        
    if input_yang_obj.opq10_flood_cnt._changed():
        input_yang_obj.opq10_flood_cnt = input_yang_obj.opq10_flood_cnt
        
    if input_yang_obj.opq11_flood_cnt._changed():
        input_yang_obj.opq11_flood_cnt = input_yang_obj.opq11_flood_cnt
        
    if input_yang_obj.unknown_tlv._changed():
        input_yang_obj.unknown_tlv = input_yang_obj.unknown_tlv
        
    if input_yang_obj.rxmt_dd_err_cnt._changed():
        input_yang_obj.rxmt_dd_err_cnt = input_yang_obj.rxmt_dd_err_cnt
        
    if input_yang_obj.rxmt_req_err_cnt._changed():
        input_yang_obj.rxmt_req_err_cnt = input_yang_obj.rxmt_req_err_cnt
        
    if input_yang_obj.rxmt_upd_err_cnt._changed():
        input_yang_obj.rxmt_upd_err_cnt = input_yang_obj.rxmt_upd_err_cnt
        
    if input_yang_obj.gr_invalid_lsa_cnt._changed():
        input_yang_obj.gr_invalid_lsa_cnt = input_yang_obj.gr_invalid_lsa_cnt
        
    if input_yang_obj.gr_invalid_pol_cnt._changed():
        input_yang_obj.gr_invalid_pol_cnt = input_yang_obj.gr_invalid_pol_cnt
        
    if input_yang_obj.gr_invalid_prd_cnt._changed():
        input_yang_obj.gr_invalid_prd_cnt = input_yang_obj.gr_invalid_prd_cnt
        
    if input_yang_obj.tunnel_cost_cnt._changed():
        input_yang_obj.tunnel_cost_cnt = input_yang_obj.tunnel_cost_cnt
        
    if input_yang_obj.peer_net_type_cnt._changed():
        input_yang_obj.peer_net_type_cnt = input_yang_obj.peer_net_type_cnt
        
    if input_yang_obj.hello_dr_mis_cnt._changed():
        input_yang_obj.hello_dr_mis_cnt = input_yang_obj.hello_dr_mis_cnt
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_as_lsdb_brief(input_yang_obj: yc_as_lsdb_brief_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_as_lsdb_brief, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/as-lsdb-brief

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.router_id._changed():
        input_yang_obj.router_id = input_yang_obj.router_id
        
    if input_yang_obj.opaque11._changed():
        input_yang_obj.opaque11 = input_yang_obj.opaque11
        
    if input_yang_obj.ase._changed():
        input_yang_obj.ase = input_yang_obj.ase
        
    if input_yang_obj.sub_total._changed():
        input_yang_obj.sub_total = input_yang_obj.sub_total
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_neighbors_neighbor_datas_data(input_yang_obj: yc_data_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_neighbors_neighbor_datas_data, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/neighbors/neighbor/datas/data

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.gr_state._changed():
        input_yang_obj.gr_state = input_yang_obj.gr_state
        
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    if input_yang_obj.priority._changed():
        input_yang_obj.priority = input_yang_obj.priority
        
    if input_yang_obj.dr._changed():
        input_yang_obj.dr = input_yang_obj.dr
        
    if input_yang_obj.bdr._changed():
        input_yang_obj.bdr = input_yang_obj.bdr
        
    if input_yang_obj.if_mtu._changed():
        input_yang_obj.if_mtu = input_yang_obj.if_mtu
        
    if input_yang_obj.dead_due_timer._changed():
        input_yang_obj.dead_due_timer = input_yang_obj.dead_due_timer
        
    if input_yang_obj.retran_interval._changed():
        input_yang_obj.retran_interval = input_yang_obj.retran_interval
        
    if input_yang_obj.up_time._changed():
        input_yang_obj.up_time = input_yang_obj.up_time
        
    if input_yang_obj.up_time_stamp._changed():
        input_yang_obj.up_time_stamp = input_yang_obj.up_time_stamp
        
    if input_yang_obj.auth_sequence._changed():
        input_yang_obj.auth_sequence = input_yang_obj.auth_sequence
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_neighbors_neighbor_datas(input_yang_obj: yc_datas_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_neighbors_neighbor_datas, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/neighbors/neighbor/datas

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.data.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_neighbors_neighbor_datas_data(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_neighbors_neighbor(input_yang_obj: yc_neighbor_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_neighbors_neighbor, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/neighbors/neighbor

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.multi_area_flag._changed():
        input_yang_obj.multi_area_flag = input_yang_obj.multi_area_flag
        
    if input_yang_obj.state._changed():
        input_yang_obj.state = input_yang_obj.state
        
    if input_yang_obj.host_name._changed():
        input_yang_obj.host_name = input_yang_obj.host_name
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_neighbors_neighbor_datas(input_yang_obj.datas, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_neighbors(input_yang_obj: yc_neighbors_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_neighbors, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/neighbors

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.neighbor.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_neighbors_neighbor(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_routings_routing_nexthop_datas_nexthop_data(input_yang_obj: yc_nexthop_data_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_routings_routing_nexthop_datas_nexthop_data, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/routings/routing/nexthop-datas/nexthop-data

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.if_name._changed():
        input_yang_obj.if_name = input_yang_obj.if_name
        
    if input_yang_obj.flags_disp._changed():
        input_yang_obj.flags_disp = input_yang_obj.flags_disp
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.bak_if_name._changed():
        input_yang_obj.bak_if_name = input_yang_obj.bak_if_name
        
    if input_yang_obj.bak_next_ip._changed():
        input_yang_obj.bak_next_ip = input_yang_obj.bak_next_ip
        
    if input_yang_obj.backup_type._changed():
        input_yang_obj.backup_type = input_yang_obj.backup_type
        
    if input_yang_obj.tunnel_dest._changed():
        input_yang_obj.tunnel_dest = input_yang_obj.tunnel_dest
        
    if input_yang_obj.tunnel_type._changed():
        input_yang_obj.tunnel_type = input_yang_obj.tunnel_type
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_routings_routing_nexthop_datas(input_yang_obj: yc_nexthop_datas_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_routings_routing_nexthop_datas, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/routings/routing/nexthop-datas

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.nexthop_data.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_routings_routing_nexthop_datas_nexthop_data(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_routings_routing(input_yang_obj: yc_routing_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_routings_routing, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/routings/routing

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.prefix_priority._changed():
        input_yang_obj.prefix_priority = input_yang_obj.prefix_priority
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_routings_routing_nexthop_datas(input_yang_obj.nexthop_datas, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_routings(input_yang_obj: yc_routings_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_routings, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/routings

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.routing.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_routings_routing(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site(input_yang_obj: yc_site_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.description._changed():
        input_yang_obj.description = input_yang_obj.description
        
    if input_yang_obj.router_id._changed():
        input_yang_obj.router_id = input_yang_obj.router_id
        
    if input_yang_obj.opaque._changed():
        input_yang_obj.opaque = input_yang_obj.opaque
        
    if input_yang_obj.rfc1583_compatible._changed():
        input_yang_obj.rfc1583_compatible = input_yang_obj.rfc1583_compatible
        
    if input_yang_obj.silent_all_interface._changed():
        input_yang_obj.silent_all_interface = input_yang_obj.silent_all_interface
        
    if input_yang_obj.retransmission_limit._changed():
        input_yang_obj.retransmission_limit = input_yang_obj.retransmission_limit
        
    if input_yang_obj.retransmission_limit_value._changed():
        input_yang_obj.retransmission_limit_value = input_yang_obj.retransmission_limit_value
        
    if input_yang_obj.safe_sync._changed():
        input_yang_obj.safe_sync = input_yang_obj.safe_sync
        
    if input_yang_obj.traffic_adj._changed():
        input_yang_obj.traffic_adj = input_yang_obj.traffic_adj
        
    if input_yang_obj.traffic_adv._changed():
        input_yang_obj.traffic_adv = input_yang_obj.traffic_adv
        
    if input_yang_obj.local_mt._changed():
        input_yang_obj.local_mt = input_yang_obj.local_mt
        
    if input_yang_obj.advertise_mpls_lsr_id._changed():
        input_yang_obj.advertise_mpls_lsr_id = input_yang_obj.advertise_mpls_lsr_id
        
    if input_yang_obj.advertise_mpls_lsr_id_cost._changed():
        input_yang_obj.advertise_mpls_lsr_id_cost = input_yang_obj.advertise_mpls_lsr_id_cost
        
    if input_yang_obj.suppress_reachability._changed():
        input_yang_obj.suppress_reachability = input_yang_obj.suppress_reachability
        
    if input_yang_obj.lsa_refresh._changed():
        input_yang_obj.lsa_refresh = input_yang_obj.lsa_refresh
        
    if input_yang_obj.mpls_ldp_auto_flag._changed():
        input_yang_obj.mpls_ldp_auto_flag = input_yang_obj.mpls_ldp_auto_flag
        
    if input_yang_obj.lsdb_overflow_limit._changed():
        input_yang_obj.lsdb_overflow_limit = input_yang_obj.lsdb_overflow_limit
        
    if input_yang_obj.peer_flapping_suppress._changed():
        input_yang_obj.peer_flapping_suppress = input_yang_obj.peer_flapping_suppress
        
    if input_yang_obj.shutdown._changed():
        input_yang_obj.shutdown = input_yang_obj.shutdown
        
    if input_yang_obj.sham_hello._changed():
        input_yang_obj.sham_hello = input_yang_obj.sham_hello
        
    if input_yang_obj.max_link_cost._changed():
        input_yang_obj.max_link_cost = input_yang_obj.max_link_cost
        
    if input_yang_obj.maxage_lsa._changed():
        input_yang_obj.maxage_lsa = input_yang_obj.maxage_lsa
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_private_net(input_yang_obj.private_net, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_host_name(input_yang_obj.host_name, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_bandwidth(input_yang_obj.bandwidth, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer(input_yang_obj.timer, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_bfd(input_yang_obj.bfd, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_metric_delay(input_yang_obj.metric_delay, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_bier(input_yang_obj.bier, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_stub_router(input_yang_obj.stub_router, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_bgp_ls(input_yang_obj.bgp_ls, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_import_limit(input_yang_obj.import_limit, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_spf_control(input_yang_obj.spf_control, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_default_para(input_yang_obj.default_para, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_avoid_micro_loop(input_yang_obj.avoid_micro_loop, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs(input_yang_obj.asbr_summary_prefixs, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_summary(input_yang_obj.summary, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_no_summary(input_yang_obj.no_summary, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_route_preferences(input_yang_obj.route_preferences, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights(input_yang_obj.nexthop_weights, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys(input_yang_obj.prefix_prioritys, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_ecmp_prefer(input_yang_obj.ecmp_prefer, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_frr(input_yang_obj.frr, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_local_mt_filter(input_yang_obj.local_mt_filter, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_peers(input_yang_obj.peers, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs(input_yang_obj.filter_lsa_outs, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_gr_ietf(input_yang_obj.gr_ietf, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_flood_control(input_yang_obj.flood_control, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_dn_bit(input_yang_obj.dn_bit, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_filter_import(input_yang_obj.filter_import, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_filter_exports(input_yang_obj.filter_exports, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_import_routes(input_yang_obj.import_routes, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_silent_interfaces(input_yang_obj.silent_interfaces, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_undo_silent_interfaces(input_yang_obj.undo_silent_interfaces, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_cost_bindings(input_yang_obj.cost_bindings, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas(input_yang_obj.areas, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_disp_data(input_yang_obj.disp_data, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_migp_routings(input_yang_obj.migp_routings, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_abr_asbr_statistics(input_yang_obj.abr_asbr_statistics, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_paras(input_yang_obj.nexthop_paras, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_lsdb_statistics(input_yang_obj.lsdb_statistics, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_lsdb_briefs(input_yang_obj.lsdb_briefs, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_last_down_nbrs(input_yang_obj.last_down_nbrs, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_disp_graceful_restart(input_yang_obj.disp_graceful_restart, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_error_process_data(input_yang_obj.error_process_data, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_as_lsdb_brief(input_yang_obj.as_lsdb_brief, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_neighbors(input_yang_obj.neighbors, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_routings(input_yang_obj.routings, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites(input_yang_obj: yc_sites_huawei_network_instance__network_instance_instances_instance_ospfv2_sites, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.site.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2(input_yang_obj: yc_ospfv2_huawei_network_instance__network_instance_instances_instance_ospfv2, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__network_instance_instances_instance_ospfv2_gtsm(input_yang_obj.gtsm, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites(input_yang_obj.sites, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance(input_yang_obj: yc_instance_huawei_network_instance__network_instance_instances_instance, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.description._changed():
        input_yang_obj.description = input_yang_obj.description
        
    if input_yang_obj.sys_router_id._changed():
        input_yang_obj.sys_router_id = input_yang_obj.sys_router_id
        
    if input_yang_obj.vrf_id._changed():
        input_yang_obj.vrf_id = input_yang_obj.vrf_id
        
    if input_yang_obj.traffic_statistic_enable._changed():
        input_yang_obj.traffic_statistic_enable = input_yang_obj.traffic_statistic_enable
        
    innerobj = _translate__network_instance_instances_instance_parameter(input_yang_obj.parameter, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_afs(input_yang_obj.afs, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2(input_yang_obj.ospfv2, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances(input_yang_obj: yc_instances_huawei_network_instance__network_instance_instances, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.instance.iteritems():
        innerobj = _translate__network_instance_instances_instance(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance(input_yang_obj: yc_network_instance_huawei_network_instance__network_instance, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__network_instance_global(input_yang_obj.global_, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances(input_yang_obj.instances, translated_yang_obj)
        
    return translated_yang_obj

def _translate__huawei_network_instance(input_yang_obj: huawei_network_instance, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /huawei-network-instance

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__network_instance(input_yang_obj.network_instance, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_global(input_yang_obj: yc_global__huawei_network_instance__network_instance_global, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/global

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cfg_router_id._changed():
        input_yang_obj.cfg_router_id = input_yang_obj.cfg_router_id
        
    if input_yang_obj.as_notation_plain._changed():
        input_yang_obj.as_notation_plain = input_yang_obj.as_notation_plain
        
    if input_yang_obj.route_distinguisher_auto_ip._changed():
        input_yang_obj.route_distinguisher_auto_ip = input_yang_obj.route_distinguisher_auto_ip
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_parameter(input_yang_obj: yc_parameter_huawei_network_instance__network_instance_instances_instance_parameter, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/parameter

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.identifier._changed():
        input_yang_obj.identifier = input_yang_obj.identifier
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_vpn_targets_vpn_target(input_yang_obj: yc_vpn_target_huawei_network_instance__network_instance_instances_instance_afs_af_vpn_targets_vpn_target, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/vpn-targets/vpn-target

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_vpn_targets(input_yang_obj: yc_vpn_targets_huawei_network_instance__network_instance_instances_instance_afs_af_vpn_targets, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/vpn-targets

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vpn_target.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af_vpn_targets_vpn_target(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_state(input_yang_obj: yc_state_huawei_network_instance__network_instance_instances_instance_afs_af_state, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/state

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.create_time._changed():
        input_yang_obj.create_time = input_yang_obj.create_time
        
    if input_yang_obj.up_time._changed():
        input_yang_obj.up_time = input_yang_obj.up_time
        
    if input_yang_obj.label._changed():
        input_yang_obj.label = input_yang_obj.label
        
    if input_yang_obj.status._changed():
        input_yang_obj.status = input_yang_obj.status
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_tunnel_infos_tunnel_info(input_yang_obj: yc_tunnel_info_huawei_network_instance__network_instance_instances_instance_afs_af_tunnel_infos_tunnel_info, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/tunnel-infos/tunnel-info

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.color._changed():
        input_yang_obj.color = input_yang_obj.color
        
    if input_yang_obj.name._changed():
        input_yang_obj.name = input_yang_obj.name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_tunnel_infos(input_yang_obj: yc_tunnel_infos_huawei_network_instance__network_instance_instances_instance_afs_af_tunnel_infos, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/tunnel-infos

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.tunnel_info.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af_tunnel_infos_tunnel_info(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_ospf_import_rts_ospf_import_rt(input_yang_obj: yc_ospf_import_rt_huawei_network_instance__network_instance_instances_instance_afs_af_ospf_import_rts_ospf_import_rt, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/ospf-import-rts/ospf-import-rt

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.valid_route._changed():
        input_yang_obj.valid_route = input_yang_obj.valid_route
        
    if input_yang_obj.route_policy._changed():
        input_yang_obj.route_policy = input_yang_obj.route_policy
        
    if input_yang_obj.route_filter._changed():
        input_yang_obj.route_filter = input_yang_obj.route_filter
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af_ospf_import_rts(input_yang_obj: yc_ospf_import_rts_huawei_network_instance__network_instance_instances_instance_afs_af_ospf_import_rts, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af/ospf-import-rts

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.ospf_import_rt.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af_ospf_import_rts_ospf_import_rt(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs_af(input_yang_obj: yc_af_huawei_network_instance__network_instance_instances_instance_afs_af, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs/af

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.route_distinguisher._changed():
        input_yang_obj.route_distinguisher = input_yang_obj.route_distinguisher
        
    if input_yang_obj.effect_route_distinguisher._changed():
        input_yang_obj.effect_route_distinguisher = input_yang_obj.effect_route_distinguisher
        
    if input_yang_obj.import_policy._changed():
        input_yang_obj.import_policy = input_yang_obj.import_policy
        
    if input_yang_obj.export_policy._changed():
        input_yang_obj.export_policy = input_yang_obj.export_policy
        
    if input_yang_obj.export_policy_add_ert_first._changed():
        input_yang_obj.export_policy_add_ert_first = input_yang_obj.export_policy_add_ert_first
        
    if input_yang_obj.label_mode._changed():
        input_yang_obj.label_mode = input_yang_obj.label_mode
        
    if input_yang_obj.vpn_frr._changed():
        input_yang_obj.vpn_frr = input_yang_obj.vpn_frr
        
    if input_yang_obj.tunnel_policy._changed():
        input_yang_obj.tunnel_policy = input_yang_obj.tunnel_policy
        
    if input_yang_obj.transit_vpn._changed():
        input_yang_obj.transit_vpn = input_yang_obj.transit_vpn
        
    if input_yang_obj.lsp_operation._changed():
        input_yang_obj.lsp_operation = input_yang_obj.lsp_operation
        
    if input_yang_obj.default_color._changed():
        input_yang_obj.default_color = input_yang_obj.default_color
        
    innerobj = _translate__network_instance_instances_instance_afs_af_vpn_targets(input_yang_obj.vpn_targets, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_afs_af_state(input_yang_obj.state, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_afs_af_tunnel_infos(input_yang_obj.tunnel_infos, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_afs_af_ospf_import_rts(input_yang_obj.ospf_import_rts, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_afs(input_yang_obj: yc_afs_huawei_network_instance__network_instance_instances_instance_afs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/afs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.af.iteritems():
        innerobj = _translate__network_instance_instances_instance_afs_af(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_gtsm(input_yang_obj: yc_gtsm_huawei_network_instance__network_instance_instances_instance_ospfv2_gtsm, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/gtsm

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hops._changed():
        input_yang_obj.hops = input_yang_obj.hops
        
    if input_yang_obj.nonstandard_multicast._changed():
        input_yang_obj.nonstandard_multicast = input_yang_obj.nonstandard_multicast
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id(input_yang_obj: yc_domain_id_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net/domain-id

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.domain_id._changed():
        input_yang_obj.domain_id = input_yang_obj.domain_id
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    if input_yang_obj.value._changed():
        input_yang_obj.value = input_yang_obj.value
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys_domain_id_secondary(input_yang_obj: yc_domain_id_secondary_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys_domain_id_secondary, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net/domain-id-secondarys/domain-id-secondary

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys(input_yang_obj: yc_domain_id_secondarys_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net/domain-id-secondarys

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.domain_id_secondary.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys_domain_id_secondary(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_private_net(input_yang_obj: yc_private_net_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_private_net, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/private-net

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.eca_route._changed():
        input_yang_obj.eca_route = input_yang_obj.eca_route
        
    if input_yang_obj.disable._changed():
        input_yang_obj.disable = input_yang_obj.disable
        
    if input_yang_obj.value._changed():
        input_yang_obj.value = input_yang_obj.value
        
    if input_yang_obj.vpn_capability._changed():
        input_yang_obj.vpn_capability = input_yang_obj.vpn_capability
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id(input_yang_obj.domain_id, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_private_net_domain_id_secondarys(input_yang_obj.domain_id_secondarys, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_host_name(input_yang_obj: yc_host_name_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_host_name, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/host-name

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.value._changed():
        input_yang_obj.value = input_yang_obj.value
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bandwidth(input_yang_obj: yc_bandwidth_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bandwidth, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bandwidth

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.config_bw_enable._changed():
        input_yang_obj.config_bw_enable = input_yang_obj.config_bw_enable
        
    if input_yang_obj.reference_value._changed():
        input_yang_obj.reference_value = input_yang_obj.reference_value
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arrival(input_yang_obj: yc_lsa_arrival_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arrival, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-arrival

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.max_interval._changed():
        input_yang_obj.max_interval = input_yang_obj.max_interval
        
    if input_yang_obj.start_interval._changed():
        input_yang_obj.start_interval = input_yang_obj.start_interval
        
    if input_yang_obj.hold_interval._changed():
        input_yang_obj.hold_interval = input_yang_obj.hold_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arr_supp_flap(input_yang_obj: yc_lsa_arr_supp_flap_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arr_supp_flap, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-arr-supp-flap

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.threshold_count._changed():
        input_yang_obj.threshold_count = input_yang_obj.threshold_count
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_originate(input_yang_obj: yc_lsa_originate_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_originate, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-originate

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.other_type_interval._changed():
        input_yang_obj.other_type_interval = input_yang_obj.other_type_interval
        
    if input_yang_obj.max_interval._changed():
        input_yang_obj.max_interval = input_yang_obj.max_interval
        
    if input_yang_obj.start_interval._changed():
        input_yang_obj.start_interval = input_yang_obj.start_interval
        
    if input_yang_obj.hold_interval._changed():
        input_yang_obj.hold_interval = input_yang_obj.hold_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_org_supp_flap(input_yang_obj: yc_lsa_org_supp_flap_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_org_supp_flap, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/lsa-org-supp-flap

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.threshold_count._changed():
        input_yang_obj.threshold_count = input_yang_obj.threshold_count
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer_spf_schedule(input_yang_obj: yc_spf_schedule_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer_spf_schedule, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer/spf-schedule

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.max_interval._changed():
        input_yang_obj.max_interval = input_yang_obj.max_interval
        
    if input_yang_obj.start_interval._changed():
        input_yang_obj.start_interval = input_yang_obj.start_interval
        
    if input_yang_obj.hold_interval._changed():
        input_yang_obj.hold_interval = input_yang_obj.hold_interval
        
    if input_yang_obj.conserv_flag._changed():
        input_yang_obj.conserv_flag = input_yang_obj.conserv_flag
        
    if input_yang_obj.millisecond._changed():
        input_yang_obj.millisecond = input_yang_obj.millisecond
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_timer(input_yang_obj: yc_timer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_timer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arrival(input_yang_obj.lsa_arrival, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_arr_supp_flap(input_yang_obj.lsa_arr_supp_flap, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_originate(input_yang_obj.lsa_originate, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_lsa_org_supp_flap(input_yang_obj.lsa_org_supp_flap, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer_spf_schedule(input_yang_obj.spf_schedule, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bfd(input_yang_obj: yc_bfd_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bfd, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bfd

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.min_rx._changed():
        input_yang_obj.min_rx = input_yang_obj.min_rx
        
    if input_yang_obj.min_tx._changed():
        input_yang_obj.min_tx = input_yang_obj.min_tx
        
    if input_yang_obj.detect_multiplier._changed():
        input_yang_obj.detect_multiplier = input_yang_obj.detect_multiplier
        
    if input_yang_obj.incr_cost._changed():
        input_yang_obj.incr_cost = input_yang_obj.incr_cost
        
    if input_yang_obj.frr_binding._changed():
        input_yang_obj.frr_binding = input_yang_obj.frr_binding
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_metric_delay(input_yang_obj: yc_metric_delay_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_metric_delay, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/metric-delay

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.adv_enable._changed():
        input_yang_obj.adv_enable = input_yang_obj.adv_enable
        
    if input_yang_obj.suppress_timer._changed():
        input_yang_obj.suppress_timer = input_yang_obj.suppress_timer
        
    if input_yang_obj.suppress_percent._changed():
        input_yang_obj.suppress_percent = input_yang_obj.suppress_percent
        
    if input_yang_obj.suppress_absolute._changed():
        input_yang_obj.suppress_absolute = input_yang_obj.suppress_absolute
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bier(input_yang_obj: yc_bier_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bier, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bier

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_stub_router(input_yang_obj: yc_stub_router_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_stub_router, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/stub-router

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.flag._changed():
        input_yang_obj.flag = input_yang_obj.flag
        
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    if input_yang_obj.include_stub._changed():
        input_yang_obj.include_stub = input_yang_obj.include_stub
        
    if input_yang_obj.external_lsa._changed():
        input_yang_obj.external_lsa = input_yang_obj.external_lsa
        
    if input_yang_obj.external_cost._changed():
        input_yang_obj.external_cost = input_yang_obj.external_cost
        
    if input_yang_obj.summary_lsa._changed():
        input_yang_obj.summary_lsa = input_yang_obj.summary_lsa
        
    if input_yang_obj.summary_cost._changed():
        input_yang_obj.summary_cost = input_yang_obj.summary_cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_bgp_ls(input_yang_obj: yc_bgp_ls_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_bgp_ls, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/bgp-ls

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.identifier._changed():
        input_yang_obj.identifier = input_yang_obj.identifier
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_import_limit(input_yang_obj: yc_import_limit_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_import_limit, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/import-limit

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.max_number._changed():
        input_yang_obj.max_number = input_yang_obj.max_number
        
    if input_yang_obj.threshold_upper._changed():
        input_yang_obj.threshold_upper = input_yang_obj.threshold_upper
        
    if input_yang_obj.threshold_lower._changed():
        input_yang_obj.threshold_lower = input_yang_obj.threshold_lower
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_spf_control(input_yang_obj: yc_spf_control_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_spf_control, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/spf-control

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.max_load_balancing._changed():
        input_yang_obj.max_load_balancing = input_yang_obj.max_load_balancing
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_default_para(input_yang_obj: yc_default_para_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_default_para, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/default-para

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost_value._changed():
        input_yang_obj.cost_value = input_yang_obj.cost_value
        
    if input_yang_obj.cost_inherit_metric._changed():
        input_yang_obj.cost_inherit_metric = input_yang_obj.cost_inherit_metric
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_avoid_micro_loop(input_yang_obj: yc_avoid_micro_loop_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_avoid_micro_loop, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/avoid-micro-loop

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.frr_enable._changed():
        input_yang_obj.frr_enable = input_yang_obj.frr_enable
        
    if input_yang_obj.frr_rib_update_delay._changed():
        input_yang_obj.frr_rib_update_delay = input_yang_obj.frr_rib_update_delay
        
    if input_yang_obj.te_tunnel_enable._changed():
        input_yang_obj.te_tunnel_enable = input_yang_obj.te_tunnel_enable
        
    if input_yang_obj.te_tunnel_rib_update_delay._changed():
        input_yang_obj.te_tunnel_rib_update_delay = input_yang_obj.te_tunnel_rib_update_delay
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs_asbr_summary_prefix(input_yang_obj: yc_asbr_summary_prefix_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs_asbr_summary_prefix, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/asbr-summary-prefixs/asbr-summary-prefix

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.distribute_delay._changed():
        input_yang_obj.distribute_delay = input_yang_obj.distribute_delay
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.advertise._changed():
        input_yang_obj.advertise = input_yang_obj.advertise
        
    if input_yang_obj.generate_null_zero._changed():
        input_yang_obj.generate_null_zero = input_yang_obj.generate_null_zero
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs(input_yang_obj: yc_asbr_summary_prefixs_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/asbr-summary-prefixs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.asbr_summary_prefix.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs_asbr_summary_prefix(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_summary(input_yang_obj: yc_summary_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_summary, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/summary

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_no_summary(input_yang_obj: yc_no_summary_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_no_summary, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/no-summary

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    if input_yang_obj.distribute_delay._changed():
        input_yang_obj.distribute_delay = input_yang_obj.distribute_delay
        
    if input_yang_obj.permit_calculate_other._changed():
        input_yang_obj.permit_calculate_other = input_yang_obj.permit_calculate_other
        
    if input_yang_obj.permit_ibgp._changed():
        input_yang_obj.permit_ibgp = input_yang_obj.permit_ibgp
        
    if input_yang_obj.always._changed():
        input_yang_obj.always = input_yang_obj.always
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_route_preferences_route_preference(input_yang_obj: yc_route_preference_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_route_preferences_route_preference, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/route-preferences/route-preference

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.preference._changed():
        input_yang_obj.preference = input_yang_obj.preference
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_route_preferences(input_yang_obj: yc_route_preferences_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_route_preferences, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/route-preferences

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.route_preference.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_route_preferences_route_preference(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights_nexthop_weight(input_yang_obj: yc_nexthop_weight_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights_nexthop_weight, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/nexthop-weights/nexthop-weight

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.weight._changed():
        input_yang_obj.weight = input_yang_obj.weight
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights(input_yang_obj: yc_nexthop_weights_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/nexthop-weights

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.nexthop_weight.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights_nexthop_weight(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys_prefix_priority(input_yang_obj: yc_prefix_priority_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys_prefix_priority, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/prefix-prioritys/prefix-priority

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys(input_yang_obj: yc_prefix_prioritys_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/prefix-prioritys

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.prefix_priority.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys_prefix_priority(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_ecmp_prefer(input_yang_obj: yc_ecmp_prefer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_ecmp_prefer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/ecmp-prefer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.te_tunnel._changed():
        input_yang_obj.te_tunnel = input_yang_obj.te_tunnel
        
    if input_yang_obj.intact._changed():
        input_yang_obj.intact = input_yang_obj.intact
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr_tiebreaker(input_yang_obj: yc_tiebreaker_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr_tiebreaker, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr/tiebreaker

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.node_protect._changed():
        input_yang_obj.node_protect = input_yang_obj.node_protect
        
    if input_yang_obj.lowest_cost._changed():
        input_yang_obj.lowest_cost = input_yang_obj.lowest_cost
        
    if input_yang_obj.ldp_sync._changed():
        input_yang_obj.ldp_sync = input_yang_obj.ldp_sync
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr_route_policy(input_yang_obj: yc_route_policy_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr_route_policy, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr/route-policy

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr_rlfa_tunnel(input_yang_obj: yc_rlfa_tunnel_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr_rlfa_tunnel, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr/rlfa-tunnel

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.ip_prefix_name._changed():
        input_yang_obj.ip_prefix_name = input_yang_obj.ip_prefix_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_frr(input_yang_obj: yc_frr_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_frr, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/frr

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.lfa_enable._changed():
        input_yang_obj.lfa_enable = input_yang_obj.lfa_enable
        
    if input_yang_obj.rlfa_enable._changed():
        input_yang_obj.rlfa_enable = input_yang_obj.rlfa_enable
        
    if input_yang_obj.rlfa_max_cost._changed():
        input_yang_obj.rlfa_max_cost = input_yang_obj.rlfa_max_cost
        
    if input_yang_obj.tilfa_enable._changed():
        input_yang_obj.tilfa_enable = input_yang_obj.tilfa_enable
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_frr_tiebreaker(input_yang_obj.tiebreaker, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_frr_route_policy(input_yang_obj.route_policy, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_frr_rlfa_tunnel(input_yang_obj.rlfa_tunnel, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_local_mt_filter(input_yang_obj: yc_local_mt_filter_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_local_mt_filter, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/local-mt-filter

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.acl_name_or_num._changed():
        input_yang_obj.acl_name_or_num = input_yang_obj.acl_name_or_num
        
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    if input_yang_obj.route_filter_name._changed():
        input_yang_obj.route_filter_name = input_yang_obj.route_filter_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_peers_peer(input_yang_obj: yc_peer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_peers_peer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/peers/peer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.priority._changed():
        input_yang_obj.priority = input_yang_obj.priority
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_peers(input_yang_obj: yc_peers_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_peers, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/peers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.peer.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_peers_peer(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs_filter_lsa_out(input_yang_obj: yc_filter_lsa_out_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs_filter_lsa_out, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/filter-lsa-outs/filter-lsa-out

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs(input_yang_obj: yc_filter_lsa_outs_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/filter-lsa-outs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.filter_lsa_out.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs_filter_lsa_out(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_gr_ietf(input_yang_obj: yc_gr_ietf_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_gr_ietf, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/gr-ietf

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.never._changed():
        input_yang_obj.never = input_yang_obj.never
        
    if input_yang_obj.planned_only._changed():
        input_yang_obj.planned_only = input_yang_obj.planned_only
        
    if input_yang_obj.ignore_external_lsa._changed():
        input_yang_obj.ignore_external_lsa = input_yang_obj.ignore_external_lsa
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_flood_control(input_yang_obj: yc_flood_control_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_flood_control, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/flood-control

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.number._changed():
        input_yang_obj.number = input_yang_obj.number
        
    if input_yang_obj.interval._changed():
        input_yang_obj.interval = input_yang_obj.interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids_summary_router_id(input_yang_obj: yc_summary_router_id_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids_summary_router_id, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/dn-bit/summary-router-ids/summary-router-id

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids(input_yang_obj: yc_summary_router_ids_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/dn-bit/summary-router-ids

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.summary_router_id.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids_summary_router_id(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_dn_bit(input_yang_obj: yc_dn_bit_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_dn_bit, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/dn-bit

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.set_ase._changed():
        input_yang_obj.set_ase = input_yang_obj.set_ase
        
    if input_yang_obj.set_nssa._changed():
        input_yang_obj.set_nssa = input_yang_obj.set_nssa
        
    if input_yang_obj.set_summary._changed():
        input_yang_obj.set_summary = input_yang_obj.set_summary
        
    if input_yang_obj.check_ase._changed():
        input_yang_obj.check_ase = input_yang_obj.check_ase
        
    if input_yang_obj.check_nssa._changed():
        input_yang_obj.check_nssa = input_yang_obj.check_nssa
        
    if input_yang_obj.check_summary._changed():
        input_yang_obj.check_summary = input_yang_obj.check_summary
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_dn_bit_summary_router_ids(input_yang_obj.summary_router_ids, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_filter_import(input_yang_obj: yc_filter_import_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_filter_import, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/filter-import

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.name_or_num._changed():
        input_yang_obj.name_or_num = input_yang_obj.name_or_num
        
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    if input_yang_obj.route_policy._changed():
        input_yang_obj.route_policy = input_yang_obj.route_policy
        
    if input_yang_obj.route_filter._changed():
        input_yang_obj.route_filter = input_yang_obj.route_filter
        
    if input_yang_obj.secondary._changed():
        input_yang_obj.secondary = input_yang_obj.secondary
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_filter_exports_filter_export(input_yang_obj: yc_filter_export_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_filter_exports_filter_export, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/filter-exports/filter-export

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.name_or_num._changed():
        input_yang_obj.name_or_num = input_yang_obj.name_or_num
        
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    if input_yang_obj.route_policy._changed():
        input_yang_obj.route_policy = input_yang_obj.route_policy
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_filter_exports(input_yang_obj: yc_filter_exports_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_filter_exports, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/filter-exports

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.filter_export.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_filter_exports_filter_export(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_import_routes_import_route(input_yang_obj: yc_import_route_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_import_routes_import_route, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/import-routes/import-route

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    if input_yang_obj.permit_ibgp._changed():
        input_yang_obj.permit_ibgp = input_yang_obj.permit_ibgp
        
    if input_yang_obj.route_policy_name._changed():
        input_yang_obj.route_policy_name = input_yang_obj.route_policy_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_import_routes(input_yang_obj: yc_import_routes_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_import_routes, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/import-routes

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.import_route.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_import_routes_import_route(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_silent_interfaces_silent_interface(input_yang_obj: yc_silent_interface_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_silent_interfaces_silent_interface, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/silent-interfaces/silent-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_silent_interfaces(input_yang_obj: yc_silent_interfaces_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_silent_interfaces, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/silent-interfaces

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.silent_interface.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_silent_interfaces_silent_interface(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_undo_silent_interfaces_undo_silent_interface(input_yang_obj: yc_undo_silent_interface_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_undo_silent_interfaces_undo_silent_interface, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/undo-silent-interfaces/undo-silent-interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_undo_silent_interfaces(input_yang_obj: yc_undo_silent_interfaces_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_undo_silent_interfaces, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/undo-silent-interfaces

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.undo_silent_interface.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_undo_silent_interfaces_undo_silent_interface(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_cost_bindings_cost_binding(input_yang_obj: yc_cost_binding_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_cost_bindings_cost_binding, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/cost-bindings/cost-binding

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_cost_bindings(input_yang_obj: yc_cost_bindings_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_cost_bindings, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/cost-bindings

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.cost_binding.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_cost_bindings_cost_binding(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_networks_network(input_yang_obj: yc_network_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_networks_network, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/networks/network

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.description._changed():
        input_yang_obj.description = input_yang_obj.description
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_networks(input_yang_obj: yc_networks_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_networks, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/networks

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.network.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_networks_network(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_stub(input_yang_obj: yc_stub_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_stub, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/stub

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.backbone_peer_ignore._changed():
        input_yang_obj.backbone_peer_ignore = input_yang_obj.backbone_peer_ignore
        
    if input_yang_obj.no_summary._changed():
        input_yang_obj.no_summary = input_yang_obj.no_summary
        
    if input_yang_obj.default_cost._changed():
        input_yang_obj.default_cost = input_yang_obj.default_cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_nssa(input_yang_obj: yc_nssa_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_nssa, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/nssa

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.no_summary._changed():
        input_yang_obj.no_summary = input_yang_obj.no_summary
        
    if input_yang_obj.translator_always._changed():
        input_yang_obj.translator_always = input_yang_obj.translator_always
        
    if input_yang_obj.default_route_advertise._changed():
        input_yang_obj.default_route_advertise = input_yang_obj.default_route_advertise
        
    if input_yang_obj.backbone_peer_ignore._changed():
        input_yang_obj.backbone_peer_ignore = input_yang_obj.backbone_peer_ignore
        
    if input_yang_obj.no_import_route._changed():
        input_yang_obj.no_import_route = input_yang_obj.no_import_route
        
    if input_yang_obj.set_n_bit._changed():
        input_yang_obj.set_n_bit = input_yang_obj.set_n_bit
        
    if input_yang_obj.suppress_fa._changed():
        input_yang_obj.suppress_fa = input_yang_obj.suppress_fa
        
    if input_yang_obj.zero_address_forwarding._changed():
        input_yang_obj.zero_address_forwarding = input_yang_obj.zero_address_forwarding
        
    if input_yang_obj.translator_interval._changed():
        input_yang_obj.translator_interval = input_yang_obj.translator_interval
        
    if input_yang_obj.default_cost._changed():
        input_yang_obj.default_cost = input_yang_obj.default_cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_ldp_sync(input_yang_obj: yc_ldp_sync_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_ldp_sync, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/ldp-sync

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.timer._changed():
        input_yang_obj.timer = input_yang_obj.timer
        
    if input_yang_obj.infinite._changed():
        input_yang_obj.infinite = input_yang_obj.infinite
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_mpls_te(input_yang_obj: yc_mpls_te_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_mpls_te, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/mpls-te

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.standard_complying._changed():
        input_yang_obj.standard_complying = input_yang_obj.standard_complying
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_authentication(input_yang_obj: yc_authentication_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_authentication, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/authentication

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    if input_yang_obj.auth_text_simple._changed():
        input_yang_obj.auth_text_simple = input_yang_obj.auth_text_simple
        
    if input_yang_obj.key_id._changed():
        input_yang_obj.key_id = input_yang_obj.key_id
        
    if input_yang_obj.auth_text_md5._changed():
        input_yang_obj.auth_text_md5 = input_yang_obj.auth_text_md5
        
    if input_yang_obj.key_chain_name._changed():
        input_yang_obj.key_chain_name = input_yang_obj.key_chain_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_abr_summary_prefixs_abr_summary_prefix(input_yang_obj: yc_abr_summary_prefix_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_abr_summary_prefixs_abr_summary_prefix, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/abr-summary-prefixs/abr-summary-prefix

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost_value._changed():
        input_yang_obj.cost_value = input_yang_obj.cost_value
        
    if input_yang_obj.cost_inherit_min._changed():
        input_yang_obj.cost_inherit_min = input_yang_obj.cost_inherit_min
        
    if input_yang_obj.hold_max_cost._changed():
        input_yang_obj.hold_max_cost = input_yang_obj.hold_max_cost
        
    if input_yang_obj.advertise._changed():
        input_yang_obj.advertise = input_yang_obj.advertise
        
    if input_yang_obj.generate_null_zero._changed():
        input_yang_obj.generate_null_zero = input_yang_obj.generate_null_zero
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_abr_summary_prefixs(input_yang_obj: yc_abr_summary_prefixs_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_abr_summary_prefixs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/abr-summary-prefixs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.abr_summary_prefix.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_abr_summary_prefixs_abr_summary_prefix(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_timer(input_yang_obj: yc_timer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_timer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/vlink-peers/vlink-peer/timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hello_interval._changed():
        input_yang_obj.hello_interval = input_yang_obj.hello_interval
        
    if input_yang_obj.dead_interval._changed():
        input_yang_obj.dead_interval = input_yang_obj.dead_interval
        
    if input_yang_obj.trans_delay_interval._changed():
        input_yang_obj.trans_delay_interval = input_yang_obj.trans_delay_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_authentication(input_yang_obj: yc_authentication_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_authentication, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/vlink-peers/vlink-peer/authentication

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    if input_yang_obj.auth_text_simple._changed():
        input_yang_obj.auth_text_simple = input_yang_obj.auth_text_simple
        
    if input_yang_obj.key_id._changed():
        input_yang_obj.key_id = input_yang_obj.key_id
        
    if input_yang_obj.auth_text_md5._changed():
        input_yang_obj.auth_text_md5 = input_yang_obj.auth_text_md5
        
    if input_yang_obj.key_chain_name._changed():
        input_yang_obj.key_chain_name = input_yang_obj.key_chain_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer(input_yang_obj: yc_vlink_peer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/vlink-peers/vlink-peer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.retransmit_interval._changed():
        input_yang_obj.retransmit_interval = input_yang_obj.retransmit_interval
        
    if input_yang_obj.smart_discover._changed():
        input_yang_obj.smart_discover = input_yang_obj.smart_discover
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_timer(input_yang_obj.timer, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer_authentication(input_yang_obj.authentication, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers(input_yang_obj: yc_vlink_peers_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/vlink-peers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.vlink_peer.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers_vlink_peer(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_timer(input_yang_obj: yc_timer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_timer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/sham-links/sham-link/timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hello_interval._changed():
        input_yang_obj.hello_interval = input_yang_obj.hello_interval
        
    if input_yang_obj.dead_interval._changed():
        input_yang_obj.dead_interval = input_yang_obj.dead_interval
        
    if input_yang_obj.trans_delay_interval._changed():
        input_yang_obj.trans_delay_interval = input_yang_obj.trans_delay_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_authentication(input_yang_obj: yc_authentication_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_authentication, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/sham-links/sham-link/authentication

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    if input_yang_obj.auth_text_simple._changed():
        input_yang_obj.auth_text_simple = input_yang_obj.auth_text_simple
        
    if input_yang_obj.key_id._changed():
        input_yang_obj.key_id = input_yang_obj.key_id
        
    if input_yang_obj.auth_text_md5._changed():
        input_yang_obj.auth_text_md5 = input_yang_obj.auth_text_md5
        
    if input_yang_obj.key_chain_name._changed():
        input_yang_obj.key_chain_name = input_yang_obj.key_chain_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link(input_yang_obj: yc_sham_link_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/sham-links/sham-link

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.retransmit_interval._changed():
        input_yang_obj.retransmit_interval = input_yang_obj.retransmit_interval
        
    if input_yang_obj.smart_discover._changed():
        input_yang_obj.smart_discover = input_yang_obj.smart_discover
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_timer(input_yang_obj.timer, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link_authentication(input_yang_obj.authentication, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links(input_yang_obj: yc_sham_links_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/sham-links

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.sham_link.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links_sham_link(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_filters_filter(input_yang_obj: yc_filter_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_filters_filter, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/filters/filter

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.name_or_num._changed():
        input_yang_obj.name_or_num = input_yang_obj.name_or_num
        
    if input_yang_obj.ip_prefix._changed():
        input_yang_obj.ip_prefix = input_yang_obj.ip_prefix
        
    if input_yang_obj.route_policy._changed():
        input_yang_obj.route_policy = input_yang_obj.route_policy
        
    if input_yang_obj.route_filter._changed():
        input_yang_obj.route_filter = input_yang_obj.route_filter
        
    if input_yang_obj.include_abr_summary._changed():
        input_yang_obj.include_abr_summary = input_yang_obj.include_abr_summary
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_filters(input_yang_obj: yc_filters_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_filters, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/filters

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.filter.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_filters_filter(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_frr_ti_lfa(input_yang_obj: yc_ti_lfa_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_frr_ti_lfa, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/frr/ti-lfa

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.disable._changed():
        input_yang_obj.disable = input_yang_obj.disable
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_frr(input_yang_obj: yc_frr_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_frr, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/frr

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.frr_disable._changed():
        input_yang_obj.frr_disable = input_yang_obj.frr_disable
        
    if input_yang_obj.rlfa_disable._changed():
        input_yang_obj.rlfa_disable = input_yang_obj.rlfa_disable
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_frr_ti_lfa(input_yang_obj.ti_lfa, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_timer(input_yang_obj: yc_timer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_timer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hello_interval._changed():
        input_yang_obj.hello_interval = input_yang_obj.hello_interval
        
    if input_yang_obj.hello_conser._changed():
        input_yang_obj.hello_conser = input_yang_obj.hello_conser
        
    if input_yang_obj.dead_interval._changed():
        input_yang_obj.dead_interval = input_yang_obj.dead_interval
        
    if input_yang_obj.wait_interval._changed():
        input_yang_obj.wait_interval = input_yang_obj.wait_interval
        
    if input_yang_obj.poll_interval._changed():
        input_yang_obj.poll_interval = input_yang_obj.poll_interval
        
    if input_yang_obj.retransmit_interval._changed():
        input_yang_obj.retransmit_interval = input_yang_obj.retransmit_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_ldp_sync(input_yang_obj: yc_ldp_sync_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_ldp_sync, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/ldp-sync

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hold_down_timer._changed():
        input_yang_obj.hold_down_timer = input_yang_obj.hold_down_timer
        
    if input_yang_obj.timer._changed():
        input_yang_obj.timer = input_yang_obj.timer
        
    if input_yang_obj.infinite._changed():
        input_yang_obj.infinite = input_yang_obj.infinite
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_bfd(input_yang_obj: yc_bfd_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_bfd, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/bfd

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.block._changed():
        input_yang_obj.block = input_yang_obj.block
        
    if input_yang_obj.detect_multiplier._changed():
        input_yang_obj.detect_multiplier = input_yang_obj.detect_multiplier
        
    if input_yang_obj.min_tx._changed():
        input_yang_obj.min_tx = input_yang_obj.min_tx
        
    if input_yang_obj.min_rx._changed():
        input_yang_obj.min_rx = input_yang_obj.min_rx
        
    if input_yang_obj.frr_binding._changed():
        input_yang_obj.frr_binding = input_yang_obj.frr_binding
        
    if input_yang_obj.incr_cost_block._changed():
        input_yang_obj.incr_cost_block = input_yang_obj.incr_cost_block
        
    if input_yang_obj.incr_cost_value._changed():
        input_yang_obj.incr_cost_value = input_yang_obj.incr_cost_value
        
    if input_yang_obj.per_link_flag._changed():
        input_yang_obj.per_link_flag = input_yang_obj.per_link_flag
        
    if input_yang_obj.one_arm_echo_flag._changed():
        input_yang_obj.one_arm_echo_flag = input_yang_obj.one_arm_echo_flag
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_authentication(input_yang_obj: yc_authentication_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_authentication, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/authentication

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    if input_yang_obj.auth_text_simple._changed():
        input_yang_obj.auth_text_simple = input_yang_obj.auth_text_simple
        
    if input_yang_obj.key_id._changed():
        input_yang_obj.key_id = input_yang_obj.key_id
        
    if input_yang_obj.auth_text_md5._changed():
        input_yang_obj.auth_text_md5 = input_yang_obj.auth_text_md5
        
    if input_yang_obj.key_chain_name._changed():
        input_yang_obj.key_chain_name = input_yang_obj.key_chain_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_filter_lsa_out(input_yang_obj: yc_filter_lsa_out_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_filter_lsa_out, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/filter-lsa-out

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.all_flag._changed():
        input_yang_obj.all_flag = input_yang_obj.all_flag
        
    if input_yang_obj.sum_flag._changed():
        input_yang_obj.sum_flag = input_yang_obj.sum_flag
        
    if input_yang_obj.ase_flag._changed():
        input_yang_obj.ase_flag = input_yang_obj.ase_flag
        
    if input_yang_obj.nssa_flag._changed():
        input_yang_obj.nssa_flag = input_yang_obj.nssa_flag
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_suppress_flapping_peer(input_yang_obj: yc_peer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_suppress_flapping_peer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/suppress-flapping/peer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.detect_interval._changed():
        input_yang_obj.detect_interval = input_yang_obj.detect_interval
        
    if input_yang_obj.threshold._changed():
        input_yang_obj.threshold = input_yang_obj.threshold
        
    if input_yang_obj.resume_interval._changed():
        input_yang_obj.resume_interval = input_yang_obj.resume_interval
        
    if input_yang_obj.hold_down_interval._changed():
        input_yang_obj.hold_down_interval = input_yang_obj.hold_down_interval
        
    if input_yang_obj.hold_max_cost._changed():
        input_yang_obj.hold_max_cost = input_yang_obj.hold_max_cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_suppress_flapping(input_yang_obj: yc_suppress_flapping_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_suppress_flapping, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/suppress-flapping

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_suppress_flapping_peer(input_yang_obj.peer, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_flush_source_trace(input_yang_obj: yc_flush_source_trace_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_flush_source_trace, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/flush-source-trace

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.block._changed():
        input_yang_obj.block = input_yang_obj.block
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_mpls_te_peers_mpls_te_peer_procs_proc(input_yang_obj: yc_proc_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_mpls_te_peers_mpls_te_peer_procs_proc, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/mpls-te-peers/mpls-te-peer/procs/proc

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_mpls_te_peers_mpls_te_peer_procs(input_yang_obj: yc_procs_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_mpls_te_peers_mpls_te_peer_procs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/mpls-te-peers/mpls-te-peer/procs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.proc.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_mpls_te_peers_mpls_te_peer_procs_proc(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_mpls_te_peers_mpls_te_peer(input_yang_obj: yc_mpls_te_peer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_mpls_te_peers_mpls_te_peer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/mpls-te-peers/mpls-te-peer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_mpls_te_peers_mpls_te_peer_procs(input_yang_obj.procs, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_mpls_te_peers(input_yang_obj: yc_mpls_te_peers_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_mpls_te_peers, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/mpls-te-peers

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.mpls_te_peer.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_mpls_te_peers_mpls_te_peer(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_frr(input_yang_obj: yc_frr_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_frr, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/multi-areas/multi-area/frr

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.frr_disable._changed():
        input_yang_obj.frr_disable = input_yang_obj.frr_disable
        
    if input_yang_obj.rlfa_disable._changed():
        input_yang_obj.rlfa_disable = input_yang_obj.rlfa_disable
        
    if input_yang_obj.ti_lfa_disable._changed():
        input_yang_obj.ti_lfa_disable = input_yang_obj.ti_lfa_disable
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_timer(input_yang_obj: yc_timer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_timer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/multi-areas/multi-area/timer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hello_interval._changed():
        input_yang_obj.hello_interval = input_yang_obj.hello_interval
        
    if input_yang_obj.dead_interval._changed():
        input_yang_obj.dead_interval = input_yang_obj.dead_interval
        
    if input_yang_obj.retransmit_interval._changed():
        input_yang_obj.retransmit_interval = input_yang_obj.retransmit_interval
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_ldp_sync(input_yang_obj: yc_ldp_sync_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_ldp_sync, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/multi-areas/multi-area/ldp-sync

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.hold_down_timer._changed():
        input_yang_obj.hold_down_timer = input_yang_obj.hold_down_timer
        
    if input_yang_obj.timer._changed():
        input_yang_obj.timer = input_yang_obj.timer
        
    if input_yang_obj.infinite._changed():
        input_yang_obj.infinite = input_yang_obj.infinite
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_bfd(input_yang_obj: yc_bfd_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_bfd, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/multi-areas/multi-area/bfd

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.block._changed():
        input_yang_obj.block = input_yang_obj.block
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_authentication(input_yang_obj: yc_authentication_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_authentication, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/multi-areas/multi-area/authentication

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    if input_yang_obj.auth_text_simple._changed():
        input_yang_obj.auth_text_simple = input_yang_obj.auth_text_simple
        
    if input_yang_obj.key_id._changed():
        input_yang_obj.key_id = input_yang_obj.key_id
        
    if input_yang_obj.auth_text_md5._changed():
        input_yang_obj.auth_text_md5 = input_yang_obj.auth_text_md5
        
    if input_yang_obj.key_chain_name._changed():
        input_yang_obj.key_chain_name = input_yang_obj.key_chain_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_filter_lsa_out(input_yang_obj: yc_filter_lsa_out_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_filter_lsa_out, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/multi-areas/multi-area/filter-lsa-out

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.all_flag._changed():
        input_yang_obj.all_flag = input_yang_obj.all_flag
        
    if input_yang_obj.sum_flag._changed():
        input_yang_obj.sum_flag = input_yang_obj.sum_flag
        
    if input_yang_obj.ase_flag._changed():
        input_yang_obj.ase_flag = input_yang_obj.ase_flag
        
    if input_yang_obj.nssa_flag._changed():
        input_yang_obj.nssa_flag = input_yang_obj.nssa_flag
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_suppress_flapping_peer(input_yang_obj: yc_peer_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_suppress_flapping_peer, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/multi-areas/multi-area/suppress-flapping/peer

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.enable._changed():
        input_yang_obj.enable = input_yang_obj.enable
        
    if input_yang_obj.detect_interval._changed():
        input_yang_obj.detect_interval = input_yang_obj.detect_interval
        
    if input_yang_obj.threshold._changed():
        input_yang_obj.threshold = input_yang_obj.threshold
        
    if input_yang_obj.resume_interval._changed():
        input_yang_obj.resume_interval = input_yang_obj.resume_interval
        
    if input_yang_obj.hold_down_interval._changed():
        input_yang_obj.hold_down_interval = input_yang_obj.hold_down_interval
        
    if input_yang_obj.hold_max_cost._changed():
        input_yang_obj.hold_max_cost = input_yang_obj.hold_max_cost
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_suppress_flapping(input_yang_obj: yc_suppress_flapping_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_suppress_flapping, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/multi-areas/multi-area/suppress-flapping

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_suppress_flapping_peer(input_yang_obj.peer, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area(input_yang_obj: yc_multi_area_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/multi-areas/multi-area

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.transmit_delay._changed():
        input_yang_obj.transmit_delay = input_yang_obj.transmit_delay
        
    if input_yang_obj.mtu_enable._changed():
        input_yang_obj.mtu_enable = input_yang_obj.mtu_enable
        
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.smart_discover._changed():
        input_yang_obj.smart_discover = input_yang_obj.smart_discover
        
    if input_yang_obj.ldp_sync_block._changed():
        input_yang_obj.ldp_sync_block = input_yang_obj.ldp_sync_block
        
    if input_yang_obj.ldp_sync_enable._changed():
        input_yang_obj.ldp_sync_enable = input_yang_obj.ldp_sync_enable
        
    if input_yang_obj.fallback_cost._changed():
        input_yang_obj.fallback_cost = input_yang_obj.fallback_cost
        
    if input_yang_obj.fallback_bw._changed():
        input_yang_obj.fallback_bw = input_yang_obj.fallback_bw
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_frr(input_yang_obj.frr, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_timer(input_yang_obj.timer, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_ldp_sync(input_yang_obj.ldp_sync, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_bfd(input_yang_obj.bfd, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_authentication(input_yang_obj.authentication, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_filter_lsa_out(input_yang_obj.filter_lsa_out, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area_suppress_flapping(input_yang_obj.suppress_flapping, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas(input_yang_obj: yc_multi_areas_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/multi-areas

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.multi_area.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas_multi_area(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_disp_data(input_yang_obj: yc_disp_data_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_disp_data, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/disp-data

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.suppress_reach_block._changed():
        input_yang_obj.suppress_reach_block = input_yang_obj.suppress_reach_block
        
    if input_yang_obj.silent_enable._changed():
        input_yang_obj.silent_enable = input_yang_obj.silent_enable
        
    if input_yang_obj.dr._changed():
        input_yang_obj.dr = input_yang_obj.dr
        
    if input_yang_obj.bdr._changed():
        input_yang_obj.bdr = input_yang_obj.bdr
        
    if input_yang_obj.state._changed():
        input_yang_obj.state = input_yang_obj.state
        
    if input_yang_obj.mtu._changed():
        input_yang_obj.mtu = input_yang_obj.mtu
        
    if input_yang_obj.ip._changed():
        input_yang_obj.ip = input_yang_obj.ip
        
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.gr_state._changed():
        input_yang_obj.gr_state = input_yang_obj.gr_state
        
    if input_yang_obj.previous_state._changed():
        input_yang_obj.previous_state = input_yang_obj.previous_state
        
    if input_yang_obj.opaque_id._changed():
        input_yang_obj.opaque_id = input_yang_obj.opaque_id
        
    if input_yang_obj.mpls_te_link._changed():
        input_yang_obj.mpls_te_link = input_yang_obj.mpls_te_link
        
    if input_yang_obj.peer_flap_status._changed():
        input_yang_obj.peer_flap_status = input_yang_obj.peer_flap_status
        
    if input_yang_obj.peer_flap_count._changed():
        input_yang_obj.peer_flap_count = input_yang_obj.peer_flap_count
        
    if input_yang_obj.peer_flap_threshold._changed():
        input_yang_obj.peer_flap_threshold = input_yang_obj.peer_flap_threshold
        
    if input_yang_obj.peer_flap_timer._changed():
        input_yang_obj.peer_flap_timer = input_yang_obj.peer_flap_timer
        
    if input_yang_obj.peer_flap_remain_timer._changed():
        input_yang_obj.peer_flap_remain_timer = input_yang_obj.peer_flap_remain_timer
        
    if input_yang_obj.bandwidth._changed():
        input_yang_obj.bandwidth = input_yang_obj.bandwidth
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_nbr_statistics_nbr_statistic(input_yang_obj: yc_nbr_statistic_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_nbr_statistics_nbr_statistic, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/nbr-statistics/nbr-statistic

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.intf_ip._changed():
        input_yang_obj.intf_ip = input_yang_obj.intf_ip
        
    if input_yang_obj.gr_state._changed():
        input_yang_obj.gr_state = input_yang_obj.gr_state
        
    if input_yang_obj.state._changed():
        input_yang_obj.state = input_yang_obj.state
        
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    if input_yang_obj.priority._changed():
        input_yang_obj.priority = input_yang_obj.priority
        
    if input_yang_obj.dr._changed():
        input_yang_obj.dr = input_yang_obj.dr
        
    if input_yang_obj.bdr._changed():
        input_yang_obj.bdr = input_yang_obj.bdr
        
    if input_yang_obj.intf_mtu._changed():
        input_yang_obj.intf_mtu = input_yang_obj.intf_mtu
        
    if input_yang_obj.dead_due_timer._changed():
        input_yang_obj.dead_due_timer = input_yang_obj.dead_due_timer
        
    if input_yang_obj.retran_intv._changed():
        input_yang_obj.retran_intv = input_yang_obj.retran_intv
        
    if input_yang_obj.up_time._changed():
        input_yang_obj.up_time = input_yang_obj.up_time
        
    if input_yang_obj.up_time_stamp._changed():
        input_yang_obj.up_time_stamp = input_yang_obj.up_time_stamp
        
    if input_yang_obj.auth_sequence._changed():
        input_yang_obj.auth_sequence = input_yang_obj.auth_sequence
        
    if input_yang_obj.adj_sid._changed():
        input_yang_obj.adj_sid = input_yang_obj.adj_sid
        
    if input_yang_obj.adj_weight._changed():
        input_yang_obj.adj_weight = input_yang_obj.adj_weight
        
    if input_yang_obj.adj_flags._changed():
        input_yang_obj.adj_flags = input_yang_obj.adj_flags
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_nbr_statistics(input_yang_obj: yc_nbr_statistics_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_nbr_statistics, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/nbr-statistics

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.nbr_statistic.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_nbr_statistics_nbr_statistic(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_error_data(input_yang_obj: yc_error_data_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_error_data, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface/error-data

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.router_id._changed():
        input_yang_obj.router_id = input_yang_obj.router_id
        
    if input_yang_obj.same_ip_pkt_cnt._changed():
        input_yang_obj.same_ip_pkt_cnt = input_yang_obj.same_ip_pkt_cnt
        
    if input_yang_obj.bad_pkt_cnt._changed():
        input_yang_obj.bad_pkt_cnt = input_yang_obj.bad_pkt_cnt
        
    if input_yang_obj.bad_ver_cnt._changed():
        input_yang_obj.bad_ver_cnt = input_yang_obj.bad_ver_cnt
        
    if input_yang_obj.bad_chksum_pkt_cnt._changed():
        input_yang_obj.bad_chksum_pkt_cnt = input_yang_obj.bad_chksum_pkt_cnt
        
    if input_yang_obj.bad_area_pkt_cnt._changed():
        input_yang_obj.bad_area_pkt_cnt = input_yang_obj.bad_area_pkt_cnt
        
    if input_yang_obj.pkt_rcv_unnumber._changed():
        input_yang_obj.pkt_rcv_unnumber = input_yang_obj.pkt_rcv_unnumber
        
    if input_yang_obj.bad_virt_link_cnt._changed():
        input_yang_obj.bad_virt_link_cnt = input_yang_obj.bad_virt_link_cnt
        
    if input_yang_obj.auth_type_fail_cnt._changed():
        input_yang_obj.auth_type_fail_cnt = input_yang_obj.auth_type_fail_cnt
        
    if input_yang_obj.auth_key_fail_cnt._changed():
        input_yang_obj.auth_key_fail_cnt = input_yang_obj.auth_key_fail_cnt
        
    if input_yang_obj.short_pkt_cnt._changed():
        input_yang_obj.short_pkt_cnt = input_yang_obj.short_pkt_cnt
        
    if input_yang_obj.long_pkt_cnt._changed():
        input_yang_obj.long_pkt_cnt = input_yang_obj.long_pkt_cnt
        
    if input_yang_obj.tx_err_cnt._changed():
        input_yang_obj.tx_err_cnt = input_yang_obj.tx_err_cnt
        
    if input_yang_obj.if_down_cnt._changed():
        input_yang_obj.if_down_cnt = input_yang_obj.if_down_cnt
        
    if input_yang_obj.no_nbr._changed():
        input_yang_obj.no_nbr = input_yang_obj.no_nbr
        
    if input_yang_obj.mis_netmask_cnt._changed():
        input_yang_obj.mis_netmask_cnt = input_yang_obj.mis_netmask_cnt
        
    if input_yang_obj.mis_hello_intl_cnt._changed():
        input_yang_obj.mis_hello_intl_cnt = input_yang_obj.mis_hello_intl_cnt
        
    if input_yang_obj.mis_dead_intl_cnt._changed():
        input_yang_obj.mis_dead_intl_cnt = input_yang_obj.mis_dead_intl_cnt
        
    if input_yang_obj.mis_ext_cnt._changed():
        input_yang_obj.mis_ext_cnt = input_yang_obj.mis_ext_cnt
        
    if input_yang_obj.router_id_confusion._changed():
        input_yang_obj.router_id_confusion = input_yang_obj.router_id_confusion
        
    if input_yang_obj.vlink_nbr_mis_cnt._changed():
        input_yang_obj.vlink_nbr_mis_cnt = input_yang_obj.vlink_nbr_mis_cnt
        
    if input_yang_obj.nbma_nbr_err_cnt._changed():
        input_yang_obj.nbma_nbr_err_cnt = input_yang_obj.nbma_nbr_err_cnt
        
    if input_yang_obj.inval_src_hello_cnt._changed():
        input_yang_obj.inval_src_hello_cnt = input_yang_obj.inval_src_hello_cnt
        
    if input_yang_obj.dd_nbr_low_cnt._changed():
        input_yang_obj.dd_nbr_low_cnt = input_yang_obj.dd_nbr_low_cnt
        
    if input_yang_obj.dd_rtrid_cnt._changed():
        input_yang_obj.dd_rtrid_cnt = input_yang_obj.dd_rtrid_cnt
        
    if input_yang_obj.dd_opt_mismatch_cnt._changed():
        input_yang_obj.dd_opt_mismatch_cnt = input_yang_obj.dd_opt_mismatch_cnt
        
    if input_yang_obj.dd_unknwn_lsa_cnt._changed():
        input_yang_obj.dd_unknwn_lsa_cnt = input_yang_obj.dd_unknwn_lsa_cnt
        
    if input_yang_obj.dd_mtu_mismatch_cnt._changed():
        input_yang_obj.dd_mtu_mismatch_cnt = input_yang_obj.dd_mtu_mismatch_cnt
        
    if input_yang_obj.ack_nbr_low_cnt._changed():
        input_yang_obj.ack_nbr_low_cnt = input_yang_obj.ack_nbr_low_cnt
        
    if input_yang_obj.ack_bad_cnt._changed():
        input_yang_obj.ack_bad_cnt = input_yang_obj.ack_bad_cnt
        
    if input_yang_obj.ack_duplicate_cnt._changed():
        input_yang_obj.ack_duplicate_cnt = input_yang_obj.ack_duplicate_cnt
        
    if input_yang_obj.ack_unknwn_lsa_cnt._changed():
        input_yang_obj.ack_unknwn_lsa_cnt = input_yang_obj.ack_unknwn_lsa_cnt
        
    if input_yang_obj.req_nbr_low_cnt._changed():
        input_yang_obj.req_nbr_low_cnt = input_yang_obj.req_nbr_low_cnt
        
    if input_yang_obj.req_empty_cnt._changed():
        input_yang_obj.req_empty_cnt = input_yang_obj.req_empty_cnt
        
    if input_yang_obj.req_bad_cnt._changed():
        input_yang_obj.req_bad_cnt = input_yang_obj.req_bad_cnt
        
    if input_yang_obj.upd_nbr_low_cnt._changed():
        input_yang_obj.upd_nbr_low_cnt = input_yang_obj.upd_nbr_low_cnt
        
    if input_yang_obj.upd_self_newr_cnt._changed():
        input_yang_obj.upd_self_newr_cnt = input_yang_obj.upd_self_newr_cnt
        
    if input_yang_obj.upd_min_lsarr_cnt._changed():
        input_yang_obj.upd_min_lsarr_cnt = input_yang_obj.upd_min_lsarr_cnt
        
    if input_yang_obj.upd_ls_chksum_cnt._changed():
        input_yang_obj.upd_ls_chksum_cnt = input_yang_obj.upd_ls_chksum_cnt
        
    if input_yang_obj.upd_les_recent_cnt._changed():
        input_yang_obj.upd_les_recent_cnt = input_yang_obj.upd_les_recent_cnt
        
    if input_yang_obj.upd_unknw_lsa_cnt._changed():
        input_yang_obj.upd_unknw_lsa_cnt = input_yang_obj.upd_unknw_lsa_cnt
        
    if input_yang_obj.opq9_flood_cnt._changed():
        input_yang_obj.opq9_flood_cnt = input_yang_obj.opq9_flood_cnt
        
    if input_yang_obj.opq10_flood_cnt._changed():
        input_yang_obj.opq10_flood_cnt = input_yang_obj.opq10_flood_cnt
        
    if input_yang_obj.opq11_flood_cnt._changed():
        input_yang_obj.opq11_flood_cnt = input_yang_obj.opq11_flood_cnt
        
    if input_yang_obj.rxmt_dd_err_cnt._changed():
        input_yang_obj.rxmt_dd_err_cnt = input_yang_obj.rxmt_dd_err_cnt
        
    if input_yang_obj.rxmt_req_err_cnt._changed():
        input_yang_obj.rxmt_req_err_cnt = input_yang_obj.rxmt_req_err_cnt
        
    if input_yang_obj.rxmt_upd_err_cnt._changed():
        input_yang_obj.rxmt_upd_err_cnt = input_yang_obj.rxmt_upd_err_cnt
        
    if input_yang_obj.gr_invalid_lsa_cnt._changed():
        input_yang_obj.gr_invalid_lsa_cnt = input_yang_obj.gr_invalid_lsa_cnt
        
    if input_yang_obj.gr_invalid_pol_cnt._changed():
        input_yang_obj.gr_invalid_pol_cnt = input_yang_obj.gr_invalid_pol_cnt
        
    if input_yang_obj.gr_invalid_prd_cnt._changed():
        input_yang_obj.gr_invalid_prd_cnt = input_yang_obj.gr_invalid_prd_cnt
        
    if input_yang_obj.tunnel_cost_cnt._changed():
        input_yang_obj.tunnel_cost_cnt = input_yang_obj.tunnel_cost_cnt
        
    if input_yang_obj.peer_net_type_cnt._changed():
        input_yang_obj.peer_net_type_cnt = input_yang_obj.peer_net_type_cnt
        
    if input_yang_obj.hello_dr_mis_cnt._changed():
        input_yang_obj.hello_dr_mis_cnt = input_yang_obj.hello_dr_mis_cnt
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface(input_yang_obj: yc_interface_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces/interface

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.network_type._changed():
        input_yang_obj.network_type = input_yang_obj.network_type
        
    if input_yang_obj.peer_ip_ignore._changed():
        input_yang_obj.peer_ip_ignore = input_yang_obj.peer_ip_ignore
        
    if input_yang_obj.transmit_delay._changed():
        input_yang_obj.transmit_delay = input_yang_obj.transmit_delay
        
    if input_yang_obj.mtu_enable._changed():
        input_yang_obj.mtu_enable = input_yang_obj.mtu_enable
        
    if input_yang_obj.dr_priority._changed():
        input_yang_obj.dr_priority = input_yang_obj.dr_priority
        
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.smart_discover._changed():
        input_yang_obj.smart_discover = input_yang_obj.smart_discover
        
    if input_yang_obj.p2mp_mask_ignore._changed():
        input_yang_obj.p2mp_mask_ignore = input_yang_obj.p2mp_mask_ignore
        
    if input_yang_obj.ldp_sync_block._changed():
        input_yang_obj.ldp_sync_block = input_yang_obj.ldp_sync_block
        
    if input_yang_obj.ldp_sync_enable._changed():
        input_yang_obj.ldp_sync_enable = input_yang_obj.ldp_sync_enable
        
    if input_yang_obj.link_cost._changed():
        input_yang_obj.link_cost = input_yang_obj.link_cost
        
    if input_yang_obj.suppress_reachability._changed():
        input_yang_obj.suppress_reachability = input_yang_obj.suppress_reachability
        
    if input_yang_obj.mpls_ldp_auto_flag._changed():
        input_yang_obj.mpls_ldp_auto_flag = input_yang_obj.mpls_ldp_auto_flag
        
    if input_yang_obj.dcn_opq_blk_enable._changed():
        input_yang_obj.dcn_opq_blk_enable = input_yang_obj.dcn_opq_blk_enable
        
    if input_yang_obj.peer_hold_max_timer._changed():
        input_yang_obj.peer_hold_max_timer = input_yang_obj.peer_hold_max_timer
        
    if input_yang_obj.fallback_cost._changed():
        input_yang_obj.fallback_cost = input_yang_obj.fallback_cost
        
    if input_yang_obj.fallback_bw._changed():
        input_yang_obj.fallback_bw = input_yang_obj.fallback_bw
        
    if input_yang_obj.source_sub_ip_address._changed():
        input_yang_obj.source_sub_ip_address = input_yang_obj.source_sub_ip_address
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_frr(input_yang_obj.frr, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_timer(input_yang_obj.timer, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_ldp_sync(input_yang_obj.ldp_sync, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_bfd(input_yang_obj.bfd, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_authentication(input_yang_obj.authentication, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_filter_lsa_out(input_yang_obj.filter_lsa_out, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_suppress_flapping(input_yang_obj.suppress_flapping, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_flush_source_trace(input_yang_obj.flush_source_trace, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_mpls_te_peers(input_yang_obj.mpls_te_peers, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_multi_areas(input_yang_obj.multi_areas, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_disp_data(input_yang_obj.disp_data, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_nbr_statistics(input_yang_obj.nbr_statistics, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface_error_data(input_yang_obj.error_data, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces(input_yang_obj: yc_interfaces_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/interfaces

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.interface.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces_interface(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_disp_data(input_yang_obj: yc_disp_data_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area_disp_data, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area/disp-data

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.spf_schedule_times._changed():
        input_yang_obj.spf_schedule_times = input_yang_obj.spf_schedule_times
        
    if input_yang_obj.interface_count._changed():
        input_yang_obj.interface_count = input_yang_obj.interface_count
        
    if input_yang_obj.exchange_and_loading_nbr._changed():
        input_yang_obj.exchange_and_loading_nbr = input_yang_obj.exchange_and_loading_nbr
        
    if input_yang_obj.router_id_conflict._changed():
        input_yang_obj.router_id_conflict = input_yang_obj.router_id_conflict
        
    if input_yang_obj.import_limit_status._changed():
        input_yang_obj.import_limit_status = input_yang_obj.import_limit_status
        
    if input_yang_obj.self_nssa_lsa_count._changed():
        input_yang_obj.self_nssa_lsa_count = input_yang_obj.self_nssa_lsa_count
        
    if input_yang_obj.nssa_trans_state._changed():
        input_yang_obj.nssa_trans_state = input_yang_obj.nssa_trans_state
        
    if input_yang_obj.nssa_trans_role._changed():
        input_yang_obj.nssa_trans_role = input_yang_obj.nssa_trans_role
        
    if input_yang_obj.nssa_trans_stab_intv._changed():
        input_yang_obj.nssa_trans_stab_intv = input_yang_obj.nssa_trans_stab_intv
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area(input_yang_obj: yc_area_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas_area, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas/area

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.area_type._changed():
        input_yang_obj.area_type = input_yang_obj.area_type
        
    if input_yang_obj.description._changed():
        input_yang_obj.description = input_yang_obj.description
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_networks(input_yang_obj.networks, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_stub(input_yang_obj.stub, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_nssa(input_yang_obj.nssa, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_ldp_sync(input_yang_obj.ldp_sync, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_mpls_te(input_yang_obj.mpls_te, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_authentication(input_yang_obj.authentication, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_abr_summary_prefixs(input_yang_obj.abr_summary_prefixs, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_vlink_peers(input_yang_obj.vlink_peers, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_sham_links(input_yang_obj.sham_links, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_filters(input_yang_obj.filters, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_interfaces(input_yang_obj.interfaces, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area_disp_data(input_yang_obj.disp_data, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_areas(input_yang_obj: yc_areas_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_areas, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/areas

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.area.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas_area(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_disp_data(input_yang_obj: yc_disp_data_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_disp_data, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/disp-data

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.effective_router_id._changed():
        input_yang_obj.effective_router_id = input_yang_obj.effective_router_id
        
    if input_yang_obj.border_router._changed():
        input_yang_obj.border_router = input_yang_obj.border_router
        
    if input_yang_obj.ietf_mode._changed():
        input_yang_obj.ietf_mode = input_yang_obj.ietf_mode
        
    if input_yang_obj.spf_count._changed():
        input_yang_obj.spf_count = input_yang_obj.spf_count
        
    if input_yang_obj.area_count._changed():
        input_yang_obj.area_count = input_yang_obj.area_count
        
    if input_yang_obj.nssa_count._changed():
        input_yang_obj.nssa_count = input_yang_obj.nssa_count
        
    if input_yang_obj.exchange_and_loading_nbr._changed():
        input_yang_obj.exchange_and_loading_nbr = input_yang_obj.exchange_and_loading_nbr
        
    if input_yang_obj.lsdb_overflow_status._changed():
        input_yang_obj.lsdb_overflow_status = input_yang_obj.lsdb_overflow_status
        
    if input_yang_obj.non_default_ase_lsa_count._changed():
        input_yang_obj.non_default_ase_lsa_count = input_yang_obj.non_default_ase_lsa_count
        
    if input_yang_obj.lsdb_overflow_remain._changed():
        input_yang_obj.lsdb_overflow_remain = input_yang_obj.lsdb_overflow_remain
        
    if input_yang_obj.import_limit_status._changed():
        input_yang_obj.import_limit_status = input_yang_obj.import_limit_status
        
    if input_yang_obj.self_ase_lsa_count._changed():
        input_yang_obj.self_ase_lsa_count = input_yang_obj.self_ase_lsa_count
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_migp_routings_migp_routing_nexthop_datas_nexthop_data(input_yang_obj: yc_nexthop_data_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_migp_routings_migp_routing_nexthop_datas_nexthop_data, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/migp-routings/migp-routing/nexthop-datas/nexthop-data

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.flags_disp._changed():
        input_yang_obj.flags_disp = input_yang_obj.flags_disp
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.if_name._changed():
        input_yang_obj.if_name = input_yang_obj.if_name
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_migp_routings_migp_routing_nexthop_datas(input_yang_obj: yc_nexthop_datas_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_migp_routings_migp_routing_nexthop_datas, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/migp-routings/migp-routing/nexthop-datas

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.nexthop_data.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_migp_routings_migp_routing_nexthop_datas_nexthop_data(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_migp_routings_migp_routing(input_yang_obj: yc_migp_routing_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_migp_routings_migp_routing, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/migp-routings/migp-routing

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.prefix_priority._changed():
        input_yang_obj.prefix_priority = input_yang_obj.prefix_priority
        
    if input_yang_obj.path_type._changed():
        input_yang_obj.path_type = input_yang_obj.path_type
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_migp_routings_migp_routing_nexthop_datas(input_yang_obj.nexthop_datas, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_migp_routings(input_yang_obj: yc_migp_routings_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_migp_routings, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/migp-routings

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.migp_routing.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_migp_routings_migp_routing(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_abr_asbr_statistics_abr_asbr_statistic(input_yang_obj: yc_abr_asbr_statistic_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_abr_asbr_statistics_abr_asbr_statistic, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/abr-asbr-statistics/abr-asbr-statistic

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.if_name._changed():
        input_yang_obj.if_name = input_yang_obj.if_name
        
    if input_yang_obj.router_id._changed():
        input_yang_obj.router_id = input_yang_obj.router_id
        
    if input_yang_obj.path_type._changed():
        input_yang_obj.path_type = input_yang_obj.path_type
        
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.router_type._changed():
        input_yang_obj.router_type = input_yang_obj.router_type
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_abr_asbr_statistics(input_yang_obj: yc_abr_asbr_statistics_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_abr_asbr_statistics, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/abr-asbr-statistics

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.abr_asbr_statistic.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_abr_asbr_statistics_abr_asbr_statistic(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_paras_nexthop_para(input_yang_obj: yc_nexthop_para_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_nexthop_paras_nexthop_para, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/nexthop-paras/nexthop-para

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.referece_count._changed():
        input_yang_obj.referece_count = input_yang_obj.referece_count
        
    if input_yang_obj.router_id._changed():
        input_yang_obj.router_id = input_yang_obj.router_id
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_paras(input_yang_obj: yc_nexthop_paras_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_nexthop_paras, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/nexthop-paras

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.nexthop_para.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_paras_nexthop_para(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_lsdb_statistics_lsdb_statistic_lsabodys_lsabody(input_yang_obj: yc_lsabody_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_lsdb_statistics_lsdb_statistic_lsabodys_lsabody, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/lsdb-statistics/lsdb-statistic/lsabodys/lsabody

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.tos_id._changed():
        input_yang_obj.tos_id = input_yang_obj.tos_id
        
    if input_yang_obj.tos_metric._changed():
        input_yang_obj.tos_metric = input_yang_obj.tos_metric
        
    if input_yang_obj.route_tag._changed():
        input_yang_obj.route_tag = input_yang_obj.route_tag
        
    if input_yang_obj.opaque_type._changed():
        input_yang_obj.opaque_type = input_yang_obj.opaque_type
        
    if input_yang_obj.opaque_id._changed():
        input_yang_obj.opaque_id = input_yang_obj.opaque_id
        
    if input_yang_obj.ext_metric_type._changed():
        input_yang_obj.ext_metric_type = input_yang_obj.ext_metric_type
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_lsdb_statistics_lsdb_statistic_lsabodys(input_yang_obj: yc_lsabodys_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_lsdb_statistics_lsdb_statistic_lsabodys, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/lsdb-statistics/lsdb-statistic/lsabodys

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.lsabody.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_lsdb_statistics_lsdb_statistic_lsabodys_lsabody(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_lsdb_statistics_lsdb_statistic_rilsa(input_yang_obj: yc_rilsa_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_lsdb_statistics_lsdb_statistic_rilsa, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/lsdb-statistics/lsdb-statistic/rilsa

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.host_name._changed():
        input_yang_obj.host_name = input_yang_obj.host_name
        
    if input_yang_obj.algorithm._changed():
        input_yang_obj.algorithm = input_yang_obj.algorithm
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_lsdb_statistics_lsdb_statistic(input_yang_obj: yc_lsdb_statistic_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_lsdb_statistics_lsdb_statistic, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/lsdb-statistics/lsdb-statistic

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.lsa_age._changed():
        input_yang_obj.lsa_age = input_yang_obj.lsa_age
        
    if input_yang_obj.lsa_sequence_num._changed():
        input_yang_obj.lsa_sequence_num = input_yang_obj.lsa_sequence_num
        
    if input_yang_obj.check_sum._changed():
        input_yang_obj.check_sum = input_yang_obj.check_sum
        
    if input_yang_obj.lsa_length._changed():
        input_yang_obj.lsa_length = input_yang_obj.lsa_length
        
    if input_yang_obj.options._changed():
        input_yang_obj.options = input_yang_obj.options
        
    if input_yang_obj.option_flag._changed():
        input_yang_obj.option_flag = input_yang_obj.option_flag
        
    if input_yang_obj.link_count._changed():
        input_yang_obj.link_count = input_yang_obj.link_count
        
    if input_yang_obj.network_mask._changed():
        input_yang_obj.network_mask = input_yang_obj.network_mask
        
    if input_yang_obj.host_name._changed():
        input_yang_obj.host_name = input_yang_obj.host_name
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_lsdb_statistics_lsdb_statistic_lsabodys(input_yang_obj.lsabodys, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_lsdb_statistics_lsdb_statistic_rilsa(input_yang_obj.rilsa, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_lsdb_statistics(input_yang_obj: yc_lsdb_statistics_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_lsdb_statistics, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/lsdb-statistics

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.lsdb_statistic.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_lsdb_statistics_lsdb_statistic(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_lsdb_briefs_lsdb_brief(input_yang_obj: yc_lsdb_brief_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_lsdb_briefs_lsdb_brief, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/lsdb-briefs/lsdb-brief

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.router_id._changed():
        input_yang_obj.router_id = input_yang_obj.router_id
        
    if input_yang_obj.stub._changed():
        input_yang_obj.stub = input_yang_obj.stub
        
    if input_yang_obj.router._changed():
        input_yang_obj.router = input_yang_obj.router
        
    if input_yang_obj.network._changed():
        input_yang_obj.network = input_yang_obj.network
        
    if input_yang_obj.summary_net._changed():
        input_yang_obj.summary_net = input_yang_obj.summary_net
        
    if input_yang_obj.asbr._changed():
        input_yang_obj.asbr = input_yang_obj.asbr
        
    if input_yang_obj.type7._changed():
        input_yang_obj.type7 = input_yang_obj.type7
        
    if input_yang_obj.opaque9._changed():
        input_yang_obj.opaque9 = input_yang_obj.opaque9
        
    if input_yang_obj.opaque10._changed():
        input_yang_obj.opaque10 = input_yang_obj.opaque10
        
    if input_yang_obj.sub_total._changed():
        input_yang_obj.sub_total = input_yang_obj.sub_total
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_lsdb_briefs(input_yang_obj: yc_lsdb_briefs_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_lsdb_briefs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/lsdb-briefs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.lsdb_brief.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_lsdb_briefs_lsdb_brief(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_last_down_nbrs_last_down_nbr(input_yang_obj: yc_last_down_nbr_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_last_down_nbrs_last_down_nbr, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/last-down-nbrs/last-down-nbr

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.immediate_reason._changed():
        input_yang_obj.immediate_reason = input_yang_obj.immediate_reason
        
    if input_yang_obj.primary_reason._changed():
        input_yang_obj.primary_reason = input_yang_obj.primary_reason
        
    if input_yang_obj.time._changed():
        input_yang_obj.time = input_yang_obj.time
        
    if input_yang_obj.local_router_id._changed():
        input_yang_obj.local_router_id = input_yang_obj.local_router_id
        
    if input_yang_obj.type._changed():
        input_yang_obj.type = input_yang_obj.type
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_last_down_nbrs(input_yang_obj: yc_last_down_nbrs_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_last_down_nbrs, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/last-down-nbrs

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.last_down_nbr.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_last_down_nbrs_last_down_nbr(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_disp_graceful_restart(input_yang_obj: yc_disp_graceful_restart_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_disp_graceful_restart, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/disp-graceful-restart

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.capability._changed():
        input_yang_obj.capability = input_yang_obj.capability
        
    if input_yang_obj.help_role._changed():
        input_yang_obj.help_role = input_yang_obj.help_role
        
    if input_yang_obj.current_state._changed():
        input_yang_obj.current_state = input_yang_obj.current_state
        
    if input_yang_obj.on_helper._changed():
        input_yang_obj.on_helper = input_yang_obj.on_helper
        
    if input_yang_obj.nbr_num._changed():
        input_yang_obj.nbr_num = input_yang_obj.nbr_num
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_error_process_data(input_yang_obj: yc_error_process_data_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_error_process_data, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/error-process-data

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.router_id._changed():
        input_yang_obj.router_id = input_yang_obj.router_id
        
    if input_yang_obj.same_ip_pkt_cnt._changed():
        input_yang_obj.same_ip_pkt_cnt = input_yang_obj.same_ip_pkt_cnt
        
    if input_yang_obj.bad_pkt_cnt._changed():
        input_yang_obj.bad_pkt_cnt = input_yang_obj.bad_pkt_cnt
        
    if input_yang_obj.bad_ver_cnt._changed():
        input_yang_obj.bad_ver_cnt = input_yang_obj.bad_ver_cnt
        
    if input_yang_obj.bad_chk_sum_pkt_cnt._changed():
        input_yang_obj.bad_chk_sum_pkt_cnt = input_yang_obj.bad_chk_sum_pkt_cnt
        
    if input_yang_obj.bad_area_pkt_cnt._changed():
        input_yang_obj.bad_area_pkt_cnt = input_yang_obj.bad_area_pkt_cnt
        
    if input_yang_obj.pkt_rcv_unnumber._changed():
        input_yang_obj.pkt_rcv_unnumber = input_yang_obj.pkt_rcv_unnumber
        
    if input_yang_obj.bad_virt_link_cnt._changed():
        input_yang_obj.bad_virt_link_cnt = input_yang_obj.bad_virt_link_cnt
        
    if input_yang_obj.auth_type_fail_cnt._changed():
        input_yang_obj.auth_type_fail_cnt = input_yang_obj.auth_type_fail_cnt
        
    if input_yang_obj.auth_key_fail_cnt._changed():
        input_yang_obj.auth_key_fail_cnt = input_yang_obj.auth_key_fail_cnt
        
    if input_yang_obj.short_pkt_cnt._changed():
        input_yang_obj.short_pkt_cnt = input_yang_obj.short_pkt_cnt
        
    if input_yang_obj.long_pkt_cnt._changed():
        input_yang_obj.long_pkt_cnt = input_yang_obj.long_pkt_cnt
        
    if input_yang_obj.tx_err_cnt._changed():
        input_yang_obj.tx_err_cnt = input_yang_obj.tx_err_cnt
        
    if input_yang_obj.if_down_cnt._changed():
        input_yang_obj.if_down_cnt = input_yang_obj.if_down_cnt
        
    if input_yang_obj.no_nbr._changed():
        input_yang_obj.no_nbr = input_yang_obj.no_nbr
        
    if input_yang_obj.mis_netmask_cnt._changed():
        input_yang_obj.mis_netmask_cnt = input_yang_obj.mis_netmask_cnt
        
    if input_yang_obj.mis_hello_intl_cnt._changed():
        input_yang_obj.mis_hello_intl_cnt = input_yang_obj.mis_hello_intl_cnt
        
    if input_yang_obj.mis_dead_intl_cnt._changed():
        input_yang_obj.mis_dead_intl_cnt = input_yang_obj.mis_dead_intl_cnt
        
    if input_yang_obj.mis_ext_rou_cap_cnt._changed():
        input_yang_obj.mis_ext_rou_cap_cnt = input_yang_obj.mis_ext_rou_cap_cnt
        
    if input_yang_obj.router_id_confusion._changed():
        input_yang_obj.router_id_confusion = input_yang_obj.router_id_confusion
        
    if input_yang_obj.vlink_nbr_mis_cnt._changed():
        input_yang_obj.vlink_nbr_mis_cnt = input_yang_obj.vlink_nbr_mis_cnt
        
    if input_yang_obj.nbma_nbr_err_cnt._changed():
        input_yang_obj.nbma_nbr_err_cnt = input_yang_obj.nbma_nbr_err_cnt
        
    if input_yang_obj.inval_src_helo_cnt._changed():
        input_yang_obj.inval_src_helo_cnt = input_yang_obj.inval_src_helo_cnt
        
    if input_yang_obj.dd_nbr_low_cnt._changed():
        input_yang_obj.dd_nbr_low_cnt = input_yang_obj.dd_nbr_low_cnt
        
    if input_yang_obj.dd_router_id_cnt._changed():
        input_yang_obj.dd_router_id_cnt = input_yang_obj.dd_router_id_cnt
        
    if input_yang_obj.dd_opt_mismatch_cnt._changed():
        input_yang_obj.dd_opt_mismatch_cnt = input_yang_obj.dd_opt_mismatch_cnt
        
    if input_yang_obj.dd_unknwn_lsa_cnt._changed():
        input_yang_obj.dd_unknwn_lsa_cnt = input_yang_obj.dd_unknwn_lsa_cnt
        
    if input_yang_obj.dd_mtu_mismatch_cnt._changed():
        input_yang_obj.dd_mtu_mismatch_cnt = input_yang_obj.dd_mtu_mismatch_cnt
        
    if input_yang_obj.ack_nbr_low_cnt._changed():
        input_yang_obj.ack_nbr_low_cnt = input_yang_obj.ack_nbr_low_cnt
        
    if input_yang_obj.ack_bad_cnt._changed():
        input_yang_obj.ack_bad_cnt = input_yang_obj.ack_bad_cnt
        
    if input_yang_obj.ack_duplicate_cnt._changed():
        input_yang_obj.ack_duplicate_cnt = input_yang_obj.ack_duplicate_cnt
        
    if input_yang_obj.ack_unknown_lsa_cnt._changed():
        input_yang_obj.ack_unknown_lsa_cnt = input_yang_obj.ack_unknown_lsa_cnt
        
    if input_yang_obj.req_nbr_low_cnt._changed():
        input_yang_obj.req_nbr_low_cnt = input_yang_obj.req_nbr_low_cnt
        
    if input_yang_obj.req_empty_cnt._changed():
        input_yang_obj.req_empty_cnt = input_yang_obj.req_empty_cnt
        
    if input_yang_obj.req_bad_cnt._changed():
        input_yang_obj.req_bad_cnt = input_yang_obj.req_bad_cnt
        
    if input_yang_obj.upd_nbr_low_cnt._changed():
        input_yang_obj.upd_nbr_low_cnt = input_yang_obj.upd_nbr_low_cnt
        
    if input_yang_obj.upd_self_newr_cnt._changed():
        input_yang_obj.upd_self_newr_cnt = input_yang_obj.upd_self_newr_cnt
        
    if input_yang_obj.upd_min_lsa_lsarr_cnt._changed():
        input_yang_obj.upd_min_lsa_lsarr_cnt = input_yang_obj.upd_min_lsa_lsarr_cnt
        
    if input_yang_obj.upd_ls_checksum_cnt._changed():
        input_yang_obj.upd_ls_checksum_cnt = input_yang_obj.upd_ls_checksum_cnt
        
    if input_yang_obj.upd_les_recent_cnt._changed():
        input_yang_obj.upd_les_recent_cnt = input_yang_obj.upd_les_recent_cnt
        
    if input_yang_obj.upd_unknow_lsa_cnt._changed():
        input_yang_obj.upd_unknow_lsa_cnt = input_yang_obj.upd_unknow_lsa_cnt
        
    if input_yang_obj.opq9_flood_cnt._changed():
        input_yang_obj.opq9_flood_cnt = input_yang_obj.opq9_flood_cnt
        
    if input_yang_obj.opq10_flood_cnt._changed():
        input_yang_obj.opq10_flood_cnt = input_yang_obj.opq10_flood_cnt
        
    if input_yang_obj.opq11_flood_cnt._changed():
        input_yang_obj.opq11_flood_cnt = input_yang_obj.opq11_flood_cnt
        
    if input_yang_obj.unknown_tlv._changed():
        input_yang_obj.unknown_tlv = input_yang_obj.unknown_tlv
        
    if input_yang_obj.rxmt_dd_err_cnt._changed():
        input_yang_obj.rxmt_dd_err_cnt = input_yang_obj.rxmt_dd_err_cnt
        
    if input_yang_obj.rxmt_req_err_cnt._changed():
        input_yang_obj.rxmt_req_err_cnt = input_yang_obj.rxmt_req_err_cnt
        
    if input_yang_obj.rxmt_upd_err_cnt._changed():
        input_yang_obj.rxmt_upd_err_cnt = input_yang_obj.rxmt_upd_err_cnt
        
    if input_yang_obj.gr_invalid_lsa_cnt._changed():
        input_yang_obj.gr_invalid_lsa_cnt = input_yang_obj.gr_invalid_lsa_cnt
        
    if input_yang_obj.gr_invalid_pol_cnt._changed():
        input_yang_obj.gr_invalid_pol_cnt = input_yang_obj.gr_invalid_pol_cnt
        
    if input_yang_obj.gr_invalid_prd_cnt._changed():
        input_yang_obj.gr_invalid_prd_cnt = input_yang_obj.gr_invalid_prd_cnt
        
    if input_yang_obj.tunnel_cost_cnt._changed():
        input_yang_obj.tunnel_cost_cnt = input_yang_obj.tunnel_cost_cnt
        
    if input_yang_obj.peer_net_type_cnt._changed():
        input_yang_obj.peer_net_type_cnt = input_yang_obj.peer_net_type_cnt
        
    if input_yang_obj.hello_dr_mis_cnt._changed():
        input_yang_obj.hello_dr_mis_cnt = input_yang_obj.hello_dr_mis_cnt
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_as_lsdb_brief(input_yang_obj: yc_as_lsdb_brief_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_as_lsdb_brief, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/as-lsdb-brief

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.router_id._changed():
        input_yang_obj.router_id = input_yang_obj.router_id
        
    if input_yang_obj.opaque11._changed():
        input_yang_obj.opaque11 = input_yang_obj.opaque11
        
    if input_yang_obj.ase._changed():
        input_yang_obj.ase = input_yang_obj.ase
        
    if input_yang_obj.sub_total._changed():
        input_yang_obj.sub_total = input_yang_obj.sub_total
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_neighbors_neighbor_datas_data(input_yang_obj: yc_data_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_neighbors_neighbor_datas_data, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/neighbors/neighbor/datas/data

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.gr_state._changed():
        input_yang_obj.gr_state = input_yang_obj.gr_state
        
    if input_yang_obj.mode._changed():
        input_yang_obj.mode = input_yang_obj.mode
        
    if input_yang_obj.priority._changed():
        input_yang_obj.priority = input_yang_obj.priority
        
    if input_yang_obj.dr._changed():
        input_yang_obj.dr = input_yang_obj.dr
        
    if input_yang_obj.bdr._changed():
        input_yang_obj.bdr = input_yang_obj.bdr
        
    if input_yang_obj.if_mtu._changed():
        input_yang_obj.if_mtu = input_yang_obj.if_mtu
        
    if input_yang_obj.dead_due_timer._changed():
        input_yang_obj.dead_due_timer = input_yang_obj.dead_due_timer
        
    if input_yang_obj.retran_interval._changed():
        input_yang_obj.retran_interval = input_yang_obj.retran_interval
        
    if input_yang_obj.up_time._changed():
        input_yang_obj.up_time = input_yang_obj.up_time
        
    if input_yang_obj.up_time_stamp._changed():
        input_yang_obj.up_time_stamp = input_yang_obj.up_time_stamp
        
    if input_yang_obj.auth_sequence._changed():
        input_yang_obj.auth_sequence = input_yang_obj.auth_sequence
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_neighbors_neighbor_datas(input_yang_obj: yc_datas_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_neighbors_neighbor_datas, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/neighbors/neighbor/datas

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.data.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_neighbors_neighbor_datas_data(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_neighbors_neighbor(input_yang_obj: yc_neighbor_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_neighbors_neighbor, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/neighbors/neighbor

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.multi_area_flag._changed():
        input_yang_obj.multi_area_flag = input_yang_obj.multi_area_flag
        
    if input_yang_obj.state._changed():
        input_yang_obj.state = input_yang_obj.state
        
    if input_yang_obj.host_name._changed():
        input_yang_obj.host_name = input_yang_obj.host_name
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_neighbors_neighbor_datas(input_yang_obj.datas, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_neighbors(input_yang_obj: yc_neighbors_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_neighbors, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/neighbors

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.neighbor.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_neighbors_neighbor(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_routings_routing_nexthop_datas_nexthop_data(input_yang_obj: yc_nexthop_data_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_routings_routing_nexthop_datas_nexthop_data, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/routings/routing/nexthop-datas/nexthop-data

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.if_name._changed():
        input_yang_obj.if_name = input_yang_obj.if_name
        
    if input_yang_obj.flags_disp._changed():
        input_yang_obj.flags_disp = input_yang_obj.flags_disp
        
    if input_yang_obj.tag._changed():
        input_yang_obj.tag = input_yang_obj.tag
        
    if input_yang_obj.bak_if_name._changed():
        input_yang_obj.bak_if_name = input_yang_obj.bak_if_name
        
    if input_yang_obj.bak_next_ip._changed():
        input_yang_obj.bak_next_ip = input_yang_obj.bak_next_ip
        
    if input_yang_obj.backup_type._changed():
        input_yang_obj.backup_type = input_yang_obj.backup_type
        
    if input_yang_obj.tunnel_dest._changed():
        input_yang_obj.tunnel_dest = input_yang_obj.tunnel_dest
        
    if input_yang_obj.tunnel_type._changed():
        input_yang_obj.tunnel_type = input_yang_obj.tunnel_type
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_routings_routing_nexthop_datas(input_yang_obj: yc_nexthop_datas_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_routings_routing_nexthop_datas, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/routings/routing/nexthop-datas

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.nexthop_data.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_routings_routing_nexthop_datas_nexthop_data(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_routings_routing(input_yang_obj: yc_routing_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_routings_routing, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/routings/routing

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.cost._changed():
        input_yang_obj.cost = input_yang_obj.cost
        
    if input_yang_obj.prefix_priority._changed():
        input_yang_obj.prefix_priority = input_yang_obj.prefix_priority
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_routings_routing_nexthop_datas(input_yang_obj.nexthop_datas, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site_routings(input_yang_obj: yc_routings_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site_routings, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site/routings

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.routing.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_routings_routing(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites_site(input_yang_obj: yc_site_huawei_network_instance__network_instance_instances_instance_ospfv2_sites_site, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites/site

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.description._changed():
        input_yang_obj.description = input_yang_obj.description
        
    if input_yang_obj.router_id._changed():
        input_yang_obj.router_id = input_yang_obj.router_id
        
    if input_yang_obj.opaque._changed():
        input_yang_obj.opaque = input_yang_obj.opaque
        
    if input_yang_obj.rfc1583_compatible._changed():
        input_yang_obj.rfc1583_compatible = input_yang_obj.rfc1583_compatible
        
    if input_yang_obj.silent_all_interface._changed():
        input_yang_obj.silent_all_interface = input_yang_obj.silent_all_interface
        
    if input_yang_obj.retransmission_limit._changed():
        input_yang_obj.retransmission_limit = input_yang_obj.retransmission_limit
        
    if input_yang_obj.retransmission_limit_value._changed():
        input_yang_obj.retransmission_limit_value = input_yang_obj.retransmission_limit_value
        
    if input_yang_obj.safe_sync._changed():
        input_yang_obj.safe_sync = input_yang_obj.safe_sync
        
    if input_yang_obj.traffic_adj._changed():
        input_yang_obj.traffic_adj = input_yang_obj.traffic_adj
        
    if input_yang_obj.traffic_adv._changed():
        input_yang_obj.traffic_adv = input_yang_obj.traffic_adv
        
    if input_yang_obj.local_mt._changed():
        input_yang_obj.local_mt = input_yang_obj.local_mt
        
    if input_yang_obj.advertise_mpls_lsr_id._changed():
        input_yang_obj.advertise_mpls_lsr_id = input_yang_obj.advertise_mpls_lsr_id
        
    if input_yang_obj.advertise_mpls_lsr_id_cost._changed():
        input_yang_obj.advertise_mpls_lsr_id_cost = input_yang_obj.advertise_mpls_lsr_id_cost
        
    if input_yang_obj.suppress_reachability._changed():
        input_yang_obj.suppress_reachability = input_yang_obj.suppress_reachability
        
    if input_yang_obj.lsa_refresh._changed():
        input_yang_obj.lsa_refresh = input_yang_obj.lsa_refresh
        
    if input_yang_obj.mpls_ldp_auto_flag._changed():
        input_yang_obj.mpls_ldp_auto_flag = input_yang_obj.mpls_ldp_auto_flag
        
    if input_yang_obj.lsdb_overflow_limit._changed():
        input_yang_obj.lsdb_overflow_limit = input_yang_obj.lsdb_overflow_limit
        
    if input_yang_obj.peer_flapping_suppress._changed():
        input_yang_obj.peer_flapping_suppress = input_yang_obj.peer_flapping_suppress
        
    if input_yang_obj.shutdown._changed():
        input_yang_obj.shutdown = input_yang_obj.shutdown
        
    if input_yang_obj.sham_hello._changed():
        input_yang_obj.sham_hello = input_yang_obj.sham_hello
        
    if input_yang_obj.max_link_cost._changed():
        input_yang_obj.max_link_cost = input_yang_obj.max_link_cost
        
    if input_yang_obj.maxage_lsa._changed():
        input_yang_obj.maxage_lsa = input_yang_obj.maxage_lsa
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_private_net(input_yang_obj.private_net, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_host_name(input_yang_obj.host_name, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_bandwidth(input_yang_obj.bandwidth, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_timer(input_yang_obj.timer, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_bfd(input_yang_obj.bfd, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_metric_delay(input_yang_obj.metric_delay, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_bier(input_yang_obj.bier, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_stub_router(input_yang_obj.stub_router, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_bgp_ls(input_yang_obj.bgp_ls, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_import_limit(input_yang_obj.import_limit, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_spf_control(input_yang_obj.spf_control, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_default_para(input_yang_obj.default_para, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_avoid_micro_loop(input_yang_obj.avoid_micro_loop, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_asbr_summary_prefixs(input_yang_obj.asbr_summary_prefixs, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_summary(input_yang_obj.summary, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_no_summary(input_yang_obj.no_summary, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_route_preferences(input_yang_obj.route_preferences, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_weights(input_yang_obj.nexthop_weights, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_prefix_prioritys(input_yang_obj.prefix_prioritys, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_ecmp_prefer(input_yang_obj.ecmp_prefer, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_frr(input_yang_obj.frr, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_local_mt_filter(input_yang_obj.local_mt_filter, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_peers(input_yang_obj.peers, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_filter_lsa_outs(input_yang_obj.filter_lsa_outs, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_gr_ietf(input_yang_obj.gr_ietf, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_flood_control(input_yang_obj.flood_control, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_dn_bit(input_yang_obj.dn_bit, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_filter_import(input_yang_obj.filter_import, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_filter_exports(input_yang_obj.filter_exports, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_import_routes(input_yang_obj.import_routes, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_silent_interfaces(input_yang_obj.silent_interfaces, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_undo_silent_interfaces(input_yang_obj.undo_silent_interfaces, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_cost_bindings(input_yang_obj.cost_bindings, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_areas(input_yang_obj.areas, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_disp_data(input_yang_obj.disp_data, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_migp_routings(input_yang_obj.migp_routings, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_abr_asbr_statistics(input_yang_obj.abr_asbr_statistics, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_nexthop_paras(input_yang_obj.nexthop_paras, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_lsdb_statistics(input_yang_obj.lsdb_statistics, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_lsdb_briefs(input_yang_obj.lsdb_briefs, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_last_down_nbrs(input_yang_obj.last_down_nbrs, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_disp_graceful_restart(input_yang_obj.disp_graceful_restart, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_error_process_data(input_yang_obj.error_process_data, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_as_lsdb_brief(input_yang_obj.as_lsdb_brief, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_neighbors(input_yang_obj.neighbors, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site_routings(input_yang_obj.routings, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2_sites(input_yang_obj: yc_sites_huawei_network_instance__network_instance_instances_instance_ospfv2_sites, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2/sites

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.site.iteritems():
        innerobj = _translate__network_instance_instances_instance_ospfv2_sites_site(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance_ospfv2(input_yang_obj: yc_ospfv2_huawei_network_instance__network_instance_instances_instance_ospfv2, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance/ospfv2

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__network_instance_instances_instance_ospfv2_gtsm(input_yang_obj.gtsm, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2_sites(input_yang_obj.sites, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances_instance(input_yang_obj: yc_instance_huawei_network_instance__network_instance_instances_instance, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances/instance

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    if input_yang_obj.description._changed():
        input_yang_obj.description = input_yang_obj.description
        
    if input_yang_obj.sys_router_id._changed():
        input_yang_obj.sys_router_id = input_yang_obj.sys_router_id
        
    if input_yang_obj.vrf_id._changed():
        input_yang_obj.vrf_id = input_yang_obj.vrf_id
        
    if input_yang_obj.traffic_statistic_enable._changed():
        input_yang_obj.traffic_statistic_enable = input_yang_obj.traffic_statistic_enable
        
    innerobj = _translate__network_instance_instances_instance_parameter(input_yang_obj.parameter, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_afs(input_yang_obj.afs, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances_instance_ospfv2(input_yang_obj.ospfv2, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance_instances(input_yang_obj: yc_instances_huawei_network_instance__network_instance_instances, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance/instances

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    for k, listInst in input_yang_obj.instance.iteritems():
        innerobj = _translate__network_instance_instances_instance(listInst, translated_yang_obj)
        
    return translated_yang_obj

def _translate__network_instance(input_yang_obj: yc_network_instance_huawei_network_instance__network_instance, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /network-instance

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__network_instance_global(input_yang_obj.global_, translated_yang_obj)
        
    innerobj = _translate__network_instance_instances(input_yang_obj.instances, translated_yang_obj)
        
    return translated_yang_obj

def _translate__huawei_network_instance(input_yang_obj: huawei_network_instance, translated_yang_obj=None):
    """
    Translate method. This can only be called after object pointing to "self" is instantiated.
    This is mapped to Yang variable /huawei-network-instance

    Most of the times, for each yang list instance in the source, we may need to create
    a yang list instance in the translated-yang-object. Use the "add" API to create the yang list
    instance.
    For ex:
        To add a srv6 locator instance:
            loc1 = segripv6.srv6Locators.srv6Locator.add(locatorName=listInst.name)

        To iterate over list instances:
            for k, listInst in segripv6.srv6Locators.srv6Locator.iteritems():
                -- Use this for APP business logic.

    We need to add translation logic only for non-key leaves.
    Keys are already added as part of yang list instance creation
    """
    
    innerobj = _translate__network_instance(input_yang_obj.network_instance, translated_yang_obj)
        
    return translated_yang_obj
