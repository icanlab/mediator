# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mediator_server.models.base_model_ import Model
from mediator_server import util


class InputMsg(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, protocol: str=None, neid: str=None, message: str=None):  # noqa: E501
        """InputMsg - a model defined in Swagger

        :param protocol: The protocol of this InputMsg.  # noqa: E501
        :type protocol: str
        :param neid: The neid of this InputMsg.  # noqa: E501
        :type neid: str
        :param message: The message of this InputMsg.  # noqa: E501
        :type message: str
        """
        self.swagger_types = {
            'protocol': str,
            'neid': str,
            'message': str
        }

        self.attribute_map = {
            'protocol': 'protocol',
            'neid': 'neid',
            'message': 'message'
        }
        self._protocol = protocol
        self._neid = neid
        self._message = message

    @classmethod
    def from_dict(cls, dikt) -> 'InputMsg':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The input_msg of this InputMsg.  # noqa: E501
        :rtype: InputMsg
        """
        return util.deserialize_model(dikt, cls)

    @property
    def protocol(self) -> str:
        """Gets the protocol of this InputMsg.


        :return: The protocol of this InputMsg.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol: str):
        """Sets the protocol of this InputMsg.


        :param protocol: The protocol of this InputMsg.
        :type protocol: str
        """

        self._protocol = protocol

    @property
    def neid(self) -> str:
        """Gets the neid of this InputMsg.


        :return: The neid of this InputMsg.
        :rtype: str
        """
        return self._neid

    @neid.setter
    def neid(self, neid: str):
        """Sets the neid of this InputMsg.


        :param neid: The neid of this InputMsg.
        :type neid: str
        """

        self._neid = neid

    @property
    def message(self) -> str:
        """Gets the message of this InputMsg.


        :return: The message of this InputMsg.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this InputMsg.


        :param message: The message of this InputMsg.
        :type message: str
        """

        self._message = message
